using ERawaana.Helper;
using minesmart.DGMS;
using minesmart.Helper;
using minesmart.ViewModels;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO.Ports;
using System.Linq;
using System.Resources;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
 
using WebEye.Controls.WinForms.StreamPlayerControl;
using Timer = System.Windows.Forms.Timer;

namespace minesmart
{

    public partial class MineMart : Form
    {

        string frontCameraImage = null;
        string rearCameraImage = null;
        private ImageFormat imgformat = ImageFormat.Jpeg;
        private string rtsp1 = string.Empty;
        private string rtsp2 = string.Empty;
        public static System.IO.StreamWriter objWriter;
        public static long comboconsigneevalue;
        public static long comboleasenovalue;

        CheckConnection checkcon = new CheckConnection();
        Exception ex = new Exception();
        weightReader _spManager;
        SettingModel _settingModal = new SettingModel();
        WebAPIModelResponse wb = new WebAPIModelResponse();
        DataGridViewButtonColumn cmdbtn = new DataGridViewButtonColumn();
        static string FirmGSTNumber = string.Empty;
        static string gstslabId = string.Empty;
        static string SearchRawanna = string.Empty;
        UCCamersetting uc = new UCCamersetting();
        static DataTable dtdelare = new DataTable();
        AutoCompleteStringCollection collMlno = new AutoCompleteStringCollection();
        AutoCompleteStringCollection collCons = new AutoCompleteStringCollection();
        AutoCompleteStringCollection colldealer = new AutoCompleteStringCollection();
        AutoCompleteStringCollection collCAddress = new AutoCompleteStringCollection();
        AutoCompleteStringCollection collCTcons = new AutoCompleteStringCollection();
        static DataTable dtMlno = new DataTable();
        static DataTable dtConsignee = new DataTable();
        static DataTable dtMineral = new DataTable();
        static DataTable dtConsigneeaddress = new DataTable();
        static long leasenoId = 0;
        static long ConsigneeId = 0;
        static long cmbdealername = 0;
        static long CTConsigneeId = 0;
        static long cmblocation = 0;
        static long CTcmbAddress = 0;
        //static long ConsigneeAddressId = 0;
        Control ctrl;
        [DllImport("wininet.dll")]
        private extern static bool InternetGetConnectedState(out int description, int reservedValue);

        #region URl Rawanna
        static readonly string SSL_GetConsigneeDetails = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/consigneeDetail/";
        static readonly string SSL_MineralList = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/mineralDetail/";
        static readonly string SSL_VehicleInfo = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/vehicleDetail";
        static readonly string SSL_GetconsigneeAddressDetails = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/consigneeAddress/";
        static readonly string SSL_leaseDetail = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/leaseDetail";
        static readonly string SSL_SearchRawannaDetail = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/rawannaDetail";
        static string SSL_GenerateRawanna = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/generateRawanna";
        static string SSL_Generateconfirmrawanna = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/generateConfirmRawanna";
        #endregion
        #region TP
        static readonly string SSL_TPallInfo = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/allTpDetail";

        static readonly string SSL_TPStockLocation = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/stockLocation";
        static readonly string SSL_TPMineralDetail = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/mineralDetail";
        static readonly string SSL_TPConsigneeDetail = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/consigneeDetail";
        static readonly string SSL_TPSearchDetail = minesmart.Helper.HttpServiceUrl.localURL + "tp/searchConsignee";
        private static string SSL_TPGenerateConfirmTransitPass = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/generateConfirmTransitPass";
        private static string SSL_TPTranistPass = minesmart.Helper.HttpServiceUrl.localURL + "eravanna/generateRawanna";
        static readonly string SSL_TPdealerInfo = minesmart.Helper.HttpServiceUrl.TrasitlocalURL + "tp/dealerInfo";
        #endregion

        public MineMart()
        {
            try
            {
                InitializeComponent();
                this.Text = "Minesmart " + GetAssemblyVersion();
                lblversion.Text = "  " + GetAssemblyVersion();
                lbldate.Text = DateTime.Now.ToString("dd-MMM-yyyy");
                lblversion.ForeColor = System.Drawing.Color.Black;
                Timer timer1 = new Timer
                {
                    Interval = 500
                };
                timer1.Enabled = true;
                timer1.Tick += new System.EventHandler(OnTimerEvent);
                cmbmineralws.DataSource = null;
                this.KeyPreview = true;
                panel1.AutoSize = true;
                panel1.AutoSizeMode = AutoSizeMode.GrowAndShrink;
                panel1.Controls.Add(uc);
                // string startupPath = System.IO.Directory.GetCurrentDirectory();
                PageResourceFile();
                lblloginusername.Text = WebAPIModelResponse.LoginUserEmailId;
                lblssoid.Text = WebAPIModelResponse.FirmName;
                //this.MinimumSize = new System.Drawing.Size(1080, 788);
                //cmbmlno.Focus();
                //grporderdtl.Visible = false;
                //grpdtl.Visible = false;
                // transparent
                btntpassline.FlatAppearance.BorderSize = 0;
                LoadTicketNumber();
                BindGetSetting();

                this.tabControl1.SelectedTab = this.tabPage12;
                DataTable dtorderlst = new DataTable();
                dtorderlst = LoadCollectionData();
                if (dtorderlst != null)
                {
                    if (Convert.ToString(dtorderlst.Rows[0]["Status"]) == "200")
                    {
                        dataGridView3.Columns.Clear();
                        dataGridView3.DataSource = dtorderlst.DefaultView;
                        dataGridView3.Columns[0].Visible = false;// The id column 
                        dataGridView3.Columns[1].Width = 50;
                        dataGridView3.Columns[2].Width = 80;
                        dataGridView3.Columns[3].Width = 100;
                        dataGridView3.Columns[4].Width = 50;
                        dataGridView3.Columns[5].Width = 50;
                        dataGridView3.Columns[9].Visible = false;

                    }
                    else dataGridView3.DataSource = dtorderlst.DefaultView.ToString().FirstOrDefault();
                }
                else
                {

                }


                /// <summary>
                /// Change Camera dynamic key 16 July
                /// </summary>
                /// 
                //CTtxttonnes.ReadOnly = false;

                //timer = new DispatcherTimer();
                //timer.Interval = TimeSpan.FromMilliseconds(1);
                ////timer.Interval = new TimeSpan(0, 0, 1);
                //timer.Tick += timer_Tick;
                //timer.Start();
                BindGetDashboard();
                if (WebAPIModelResponse.eRawannaNo != null)
                {
                    // grporderdtl.Visible = true;
                    //grpdtl.Visible = true;
                    rtdirect.Checked = true;

                    // txtorderno.Text = GetInvoiceNumber();
                    //BindProductItem();
                }
                else
                {
                    //GetconsigneeDetails(0);
                }

            }
            catch (Exception ex)
            {

                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                //MessageBox.Show(ex.Message);
                MessageBox.Show(ex.Message, "MineMart");

            }
        }
        public string GetAssemblyVersion()
        {
            var version = string.Empty;
            try
            {
                DataTable dtMain = new DataTable();
                SettingModel settingModal = new SettingModel();
                settingModal.PostUrl = "/Api/ErawaanaAPI/ApplicationVersion/";
                settingModal.Authtoken = UniqueSystemId.GetMacAddress();
                dtMain = WebAPI.PostApplicationVersion(settingModal.PostUrl, settingModal).Result;
                if (dtMain.Rows[0]["Status"].ToString() == "200")
                {
                    version = dtMain.Rows[0]["ApplicationVersion"].ToString();
                }
            }
            catch (Exception ex)
            {
                // minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                System.Windows.Forms.MessageBox.Show(ex.Message);
                System.Windows.Forms.MessageBox.Show(ex.StackTrace);
                System.Windows.Forms.MessageBox.Show(ex.InnerException.ToString());
                //System.Windows.Forms.MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                MessageBox.Show(ex.Message, "GetAssemblyVersion");
            }
            return version;
        }
        public void BindGetDashboard()
        {
            DataTable dt = new DataTable();
            try
            {
                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetDashboardDetails/";
                dt = WebAPI.PostDashboardDetails(_settingModal.PostUrl, _settingModal).Result;
                if (dt != null && dt.Rows.Count > 0)
                {
                    if (dt.Rows.Count == 1)
                    {
                        lblcrawanncoun.Text = "0";
                        lblcramount.Text = "0.00";
                        lbltpcount.Text = "0";
                        lbltpamount.Text = "0.00";
                        lblinvocount.Text = "0";
                        lblinvamount.Text = "0.00" + "Rs"; ;
                        lblweightslipcont.Text = "0";
                        lblweightslipamount.Text = "0.00";

                    }
                    else
                    {
                        lblcrawanncoun.Text = dt.Rows[0][1].ToString();
                        lblcramount.Text = string.Format("{0:#.00}", Convert.ToDecimal(dt.Rows[0][2].ToString()));
                        lbltpcount.Text = dt.Rows[1][1].ToString();
                        lbltpamount.Text = string.Format("{0:#.00}", Convert.ToDecimal(dt.Rows[1][2].ToString()));
                        lblinvocount.Text = dt.Rows[3][1].ToString();
                        lblinvamount.Text = string.Format("{0:#.00}", Convert.ToDecimal(dt.Rows[3][2].ToString())) + "Rs"; ;
                        lblweightslipcont.Text = dt.Rows[2][1].ToString();
                        lblweightslipamount.Text = string.Format("{0:#.00}", Convert.ToDecimal(dt.Rows[2][2].ToString()));
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                // MessageBox.Show(ex.Message);
                MessageBox.Show(ex.Message, "BindGetDashboard");

            }
        }
        public void PageResourceFile()
        {

            DataTable dt = new DataTable();
            try
            {
                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetLanguagesetting/";
                dt = WebAPI.PostGetLanguagesetting(_settingModal.PostUrl, _settingModal).Result;
                if (dt != null)
                {
                    _settingModal.LanguageSetting = dt.Rows[0]["LanguageSetting"].ToString();
                    if (_settingModal.LanguageSetting.ToString() == "True")
                    {
                        ResXResourceReader rsxr = new ResXResourceReader(AppDomain.CurrentDomain.BaseDirectory + @"\\Resource\\ResHindi.resx");
                        foreach (DictionaryEntry d in rsxr)
                        {
                            #region Hindi Resource
                            if (d.Key.ToString() == "lblwelcome.Text")
                                lblwelcome.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsssytemtype.Text")
                                lblsssytemtype.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsystemmodel.Text")
                                lblsystemmodel.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkdmgtpass.Text")
                                chkdmgtpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkprinttpass.Text")
                                chkprinttpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "Chkconfirmdmg.Text")
                                Chkconfirmdmg.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkconfirmprint.Text")
                                chkconfirmprint.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblvechicle.Text")
                                lblvechicle.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblAddress.Text")
                                lblAddress.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblapproxdistnce.Text")
                                lblapproxdistnce.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblapproxtime.Text")
                                lblapproxtime.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblbackameraurl.Text")
                                lblbackameraurl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblbackcameraIpaddress.Text")
                                lblbackcameraIpaddress.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblbackpassword.Text")
                                lblbackpassword.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblbackusername.Text")
                                lblbackusername.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblbaudrate.Text")
                                lblbaudrate.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblcameraipaddress.Text")
                                lblcameraipaddress.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblcompanyname.Text")
                                lblcompanyname.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcondigndtl.Text")
                                lblcondigndtl.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblconsigneegst.Text")
                                lblconsigneegst.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblconsigneename.Text")
                                lblconsigneename.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctapproxtime.Text")
                                lblctapproxtime.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctconsdt.Text")
                                lblctconsdt.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctconsigneeaddrs.Text")
                                lblctconsigneeaddrs.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctconsigneename.Text")
                                lblctconsigneename.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctdealername.Text")
                                lblctdealername.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctdrivermobileno.Text")
                                lblctdrivermobileno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctdrivername.Text")
                                lblctdrivername.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblctgrossweight.Text")
                                lblctgrossweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctgstno.Text")
                                lblctgstno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctlocation.Text")
                                lblctlocation.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctmineral.Text")
                                lblctmineral.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctmineralstocket.Text")
                                lblctmineralstocket.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctmineraluserfor.Text")
                                lblctmineraluserfor.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctnetweight.Text")
                                lblctnetweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctpas.Text")
                                lblctpas.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblctremarks.Text")
                                lblctremarks.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcttareweight.Text")
                                lblcttareweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcttransportmode.Text")
                                lblcttransportmode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcttrasportdtl.Text")
                                lblcttrasportdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblctvehicelno.Text")
                                lblctvehicelno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblucttranportmode.Text")
                                lblucttranportmode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkprintdtl.Text")
                                chkprintdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkissaved.Text")
                                chkissaved.Text = d.Value.ToString();


                            else if (d.Key.ToString() == "lblctweightdtl.Text")
                                lblctweightdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcweightdtl.Text")
                                lblcweightdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldatabits.Text")
                                lbldatabits.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldealarname.Text")
                                lbldealarname.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldrivename.Text")
                                lbldrivename.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldrivermobile.Text")
                                lbldrivermobile.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblEmailId.Text")
                                lblEmailId.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblfrntcameradtl.Text")
                                lblfrntcameradtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblisreversed.Text")
                                lblisreversed.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmainconfirmrawann.Text")
                                lblmainconfirmrawann.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmineral.Text")
                                lblmineral.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmineraluserfor.Text")
                                lblmineraluserfor.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmlno.Text")
                                lblmlno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMobileNo.Text")
                                lblMobileNo.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblnetweight.Text")
                                lblnetweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblparity.Text")
                                lblparity.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblpassword.Text")
                                lblpassword.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblpoartname.Text")
                                lblpoartname.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblreadercode.Text")
                                lblreadercode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblremark.Text")
                                lblremark.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblroyaltyschd.Text")
                                lblroyaltyschd.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblroyaltyschedule.Text")
                                lblroyaltyschedule.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsearch.Text")
                                lblsearch.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblstaddress.Text")
                                lblstaddress.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblstcameradtl.Text")
                                lblstcameradtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblstcdetail.Text")
                                lblstcdetail.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblstopbits.Text")
                                lblstopbits.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblstportsetting.Text")
                                lblstportsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsystemtype.Text")
                                lblsystemtype.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbltarewght.Text")
                                lbltarewght.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbltdtl.Text")
                                lbltdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblticketno.Text")
                                lblticketno.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lbltransport.Text")
                                lbltransport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblucmlno.Text")
                                lblucmlno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctaddress.Text")
                                lbluctaddress.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctapporxdtl.Text")
                                lbluctapporxdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctapproxtime.Text")
                                lbluctapproxtime.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctconsdtl.Text")
                                lbluctconsdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctconsgst.Text")
                                lbluctconsgst.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctconsinme.Text")
                                lbluctconsinme.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctdrivermble.Text")
                                lbluctdrivermble.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctdrivername.Text")
                                lbluctdrivername.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctdtl.Text")
                                lbluctdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctgrosswght.Text")
                                lbluctgrosswght.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctlocation.Text")
                                lbluctlocation.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctmineral.Text")
                                lbluctmineral.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctmineralusefor.Text")
                                lbluctmineralusefor.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctnetwght.Text")
                                lbluctnetwght.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctrawannadate.Text")
                                lbluctrawannadate.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctrawannano.Text")
                                lbluctrawannano.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lbluctremark.Text")
                                lbluctremark.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctstatus.Text")
                                lbluctstatus.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblucttranportmode.Text")
                                lblucttranportmode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblucttransportdtl.Text")
                                lblucttransportdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblucttrasportmode.Text")
                                lblucttrasportmode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctvehicleno.Text")
                                lbluctvehicleno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluctweightdtl.Text")
                                lbluctweightdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunaddress.Text")
                                lblunaddress.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblunapproxtime.Text")
                                lblunapproxtime.Text = d.Value.ToString();


                            else if (d.Key.ToString() == "lblunconfdtl.Text")
                                lblunconfdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunconfstatus.Text")
                                lblunconfstatus.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunconsignedtl.Text")
                                lblunconsignedtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunconsigneegst.Text")
                                lblunconsigneegst.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunconsigneename.Text")
                                lblunconsigneename.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblundrivename.Text")
                                lblundrivename.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblundrivermobile.Text")
                                lblundrivermobile.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblungrossweight.Text")
                                lblungrossweight.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblunmineralname.Text")
                                lblunmineralname.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunmineralusefor.Text")
                                lblunmineralusefor.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunnetweight.Text")
                                lblunnetweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunrawannano.Text")
                                lblunrawannano.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunremark.Text")
                                lblunremark.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunroyalityrate.Text")
                                lblunroyalityrate.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunroyalitysch.Text")
                                lblunroyalitysch.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunsearch.Text")
                                lblunsearch.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluntareweight.Text")
                                lbluntareweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluntransportdtl.Text")
                                lbluntransportdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbluntransportmode.Text")
                                lbluntransportmode.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunvehiclenumb.Text")
                                lblunvehiclenumb.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblunweightdtl.Text")
                                lblunweightdtl.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblwelcome.Text")
                                lblwelcome.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblwgmaterial.Text")
                                lblwgmaterial.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwgslip.Text")
                                lblwgslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwgweightdtl.Text")
                                lblwgweightdtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsdate.Text")
                                lblwsdate.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsdrivermobno.Text")
                                lblwsdrivermobno.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsdrivernme.Text")
                                lblwsdrivernme.Text = d.Value.ToString();
                            //if (d.Key.ToString() == lblwsfcameras.Text)
                            //    lblwelcome.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsgrossweight.Text")
                                lblwsgrossweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsnetweight.Text")
                                lblwsnetweight.Text = d.Value.ToString();
                            //if (d.Key.ToString() == lblwsrcameras.Text)
                            //        lblwelcome.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsremarks.Text")
                                lblwsremarks.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwstareweight.Text")
                                lblwstareweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwsvehino.Text")
                                lblwsvehino.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "btnSave.Text")
                                btnSave.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblgrossweight.Text")
                                lblgrossweight.Text = d.Value.ToString();
                            //else if (d.Key.ToString() == "lblorderdetails.Text")
                            //    lblorderdetails.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbltareweight.Text")
                                lbltareweight.Text = d.Value.ToString();
                            //else if (d.Key.ToString() == "rtdirect.Text")
                            //    rtdirect.Text = d.Value.ToString();
                            //else if (d.Key.ToString() == "rtorder.Text")
                            //    rtorder.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "rtprintinvoice.Text")
                                rtprintinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "rtprintweightslip.Text")
                                rtprintweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btnsearch.Text")
                                btnsearch.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btnunconfirmrawanna.Text")
                                btnunconfirmrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblunconfdate.Text")
                                lblunconfdate.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkdmgunconfirmprint.Text")
                                chkdmgunconfirmprint.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkunconfirmprint.Text")
                                chkunconfirmprint.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button2.Text")
                                button2.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "CTbtnSave.Text")
                                CTbtnSave.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblcRemainBalance.Text")
                                lblcRemainBalance.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "UCTbtnsearch.Text")
                                UCTbtnsearch.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btncameradtl.Text")
                                btncameradtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btnCompanydtl.Text")
                                btnCompanydtl.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btnSaveWeightSlip.Text")
                                btnSaveWeightSlip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "btnserialport.Text")
                                btnserialport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkdmguntpass.Text")
                                chkdmguntpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "chkprintuntpass.Text")
                                chkprintuntpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "UCTbtnsearch.Text")
                                UCTbtnsearch.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "lblmnulglogout.Text")
                                lblmnulglogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulghelp.Text")
                                lblmnulghelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgreport.Text")
                                lblmnulgreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulginvoice.Text")
                                lblmnulginvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgsetting.Text")
                                lblmnulgsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgweightslip.Text")
                                lblmnulgweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgtpass.Text")
                                lblmnulgtpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgrawanna.Text")
                                lblmnulgrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnulgdashbrd.Text")
                                lblmnulgdashbrd.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhphelp.Text")
                                lblmnuhphelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhplogout.Text")
                                lblmnuhplogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhpinvoice.Text")
                                lblmnuhpinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhpsetting.Text")
                                lblmnuhpsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhpwslip.Text")
                                lblmnuhpwslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhptpass.Text")
                                lblmnuhptpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhprawanna.Text")
                                lblmnuhprawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhpdashboard.Text")
                                lblmnuhpdashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "llblmnurphelp.Text")
                                llblmnurphelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurptogout.Text")
                                lblmnurptogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurpreport.Text")
                                lblmnurpreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurptinvoice.Text")
                                lblmnurptinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurpwslip.Text")
                                lblmnurpwslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurptsetting.Text")
                                lblmnurptsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurptrawanna.Text")
                                lblmnurptrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurptdashboard.Text")
                                lblmnurptdashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinvlogout.Text")
                                lblmnuinvlogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinvhelp.Text")
                                lblmnuinvhelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinreport.Text")
                                lblmnuinreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuininvoice.Text")
                                lblmnuininvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuindashboard.Text")
                                lblmnuindashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinrwanna.Text")
                                lblmnuinrwanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuintpass.Text")
                                lblmnuintpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinwslip.Text")
                                lblmnuinwslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinsetting.Text")
                                lblmnuinsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuslogout.Text")
                                lblmnuslogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuhelp.Text")
                                lblmnuhelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsreport.Text")
                                lblsreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuinvoice.Text")
                                lblmnuinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblssetting.Text")
                                lblssetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblsweightslip.Text")
                                lblsweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnustpass.Text")
                                lblmnustpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnusrawanna.Text")
                                lblmnusrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmenusdashboard.Text")
                                lblmenusdashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwlogout.Text")
                                lblmnuwlogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwhelp.Text")
                                lblmnuwhelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwreport.Text")
                                lblmnuwreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwinvoice.Text")
                                lblmnuwinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwsetting.Text")
                                lblmnuwsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwweightslip.Text")
                                lblmnuwweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwtpass.Text")
                                lblmnuwtpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblwrawanna.Text")
                                lblwrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuwdashboard.Text")
                                lblmnuwdashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnudlogout.Text")
                                lblmnudlogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnudhelp.Text")
                                lblmnudhelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnudreport.Text")
                                lblmnudreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnudinvoice.Text")
                                lblmnudinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldsetting.Text")
                                lbldsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldweightslip.Text")
                                lbldweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldtranistpass.Text")
                                lbldtranistpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lbldrawanna.Text")
                                lbldrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuddashboard.Text")
                                lblmnuddashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnudashboard.Text")
                                lblMnudashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnuRawanna.Text")
                                lblMnuRawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnuTPass.Text")
                                lblMnuTPass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnuWghtslp.Text")
                                lblMnuWghtslp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnusetting.Text")
                                lblMnusetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnurwinvoice.Text")
                                lblMnurwinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnurwreport.Text")
                                lblMnurwreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnurwhelp.Text")
                                lblMnurwhelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblMnurlogout.Text")
                                lblMnurlogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutlogout.Text")
                                lblmnutlogout.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuthelp.Text")
                                lblmnuthelp.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutreport.Text")
                                lblmnutreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutinvoice.Text")
                                lblmnutinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutsetting.Text")
                                lblmnutsetting.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutweightslip.Text")
                                lblmnutweightslip.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnuttpass.Text")
                                lblmnuttpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutrawanna.Text")
                                lblmnutrawanna.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnutdashboard.Text")
                                lblmnutdashboard.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblmnurpttpass.Text")
                                lblmnurpttpass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblhreport.Text")
                                lblhreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblhreport.Text")
                                lblhreport.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblOrderList.Text")
                                lblOrderList.Text = d.Value.ToString();

                            else if (d.Key.ToString() == "btntpassline.Text")
                                btntpassline.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button3.Text")
                                button3.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button4.Text")
                                button4.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button5.Text")
                                button5.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button6.Text")
                                button6.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button7.Text")
                                button7.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button8.Text")
                                button8.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblinvoice.Text")
                                lblinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblRawana.Text")
                                lblRawana.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblTranistPass.Text")
                                lblTranistPass.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblweight.Text")
                                lblweight.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "lblinvoice.Text")
                                lblinvoice.Text = d.Value.ToString();
                            else if (d.Key.ToString() == "button1.Text")
                                button1.Text = d.Value.ToString();

                            tabPage7.Text = "कन्फर्म रवाना";
                            tabPage8.Text = "अन्कन्फर्म्ड रवाना";
                            tabPage9.Text = "कन्फर्म  ट्रैन्ज़िट पास";
                            tabPage10.Text = "अन्कन्फर्म्ड ट्रैन्ज़िट पास";
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "PageResourceFile");

            }

        }
        private void OnTimerEvent(object sender, EventArgs e)
        {
            try
            {
                //uc.Refresh();
                var IsCheckInternet = false;
                IsCheckInternet = IsInternetAvailable();
                if (IsCheckInternet)
                {
                    //get current time
                    int hh = DateTime.Now.Hour;
                    int mm = DateTime.Now.Minute;
                    int ss = DateTime.Now.Second;

                    //time
                    string time = "";

                    //padding leading zero
                    if (hh < 10)
                    {
                        time += "0" + hh;
                    }
                    else
                    {
                        time += hh;
                    }
                    time += ":";

                    if (mm < 10)
                    {
                        time += "0" + mm;
                    }
                    else
                    {
                        time += mm;
                    }
                    time += ":";

                    if (ss < 10)
                    {
                        time += "0" + ss;
                    }
                    else
                    {
                        time += ss;
                    }

                    //update label
                    lbltimer.Text = time;
                    String selected = tabControl1.SelectedTab.ImageKey;
                    String selected1 = tabControl2.SelectedTab.Text;
                    String selectedtpass = tabControl3.SelectedTab.Text;

                    if (selected == "rawanna (1).png" && (selected1 == "COMFIRM RAWANNA" || selected1 == "कन्फर्म रवाना"))
                    {
                        #region Confirm Rawanna

                        var finalweight = string.Format("{0:0.000}", Convert.ToDouble(uc.richTextBox1.Text == "" ? "0" : uc.richTextBox1.Text) / 1000);
                        txtgrossweight.Text = finalweight;
                        #endregion
                    }
                    if (selected == "rawanna (1).png" && (selected1 == "UNCONFIRM RAWANNA" || selected1 == "अन्कन्फर्म्ड रवाना"))
                    {
                        #region Unconfirm Rawanna
                        var finalweight = string.Format("{0:0.000}", Convert.ToDouble(uc.richTextBox1.Text == "" ? "0" : uc.richTextBox1.Text) / 1000);
                        txtunconfirmgross.Text = finalweight;

                        #endregion
                    }

                    if (selected == "tpass.png" && (selectedtpass == "CONFIRM TRANSIT PASS" || selectedtpass == "कन्फर्म  ट्रैन्ज़िट पास"))
                    {
                        #region Confirm T Pass
                        var finalweight = string.Format("{0:0.000}", Convert.ToDouble(uc.richTextBox1.Text == "" ? "0" : uc.richTextBox1.Text) / 1000);
                        CTtxtgrossweight.Text = finalweight;
                        #endregion
                    }
                    if (selected == "tpass.png" && (selectedtpass == "UNCONFIRM TRANSIT PASS" || selectedtpass == "अन्कन्फर्म्ड ट्रैन्ज़िट पास"))
                    {
                        #region UnConfirm T Pass
                        var finalweight = string.Format("{0:0.000}", Convert.ToDouble(uc.richTextBox1.Text == "" ? "0" : uc.richTextBox1.Text) / 1000);
                        UCTtxtgrossweight.Text = finalweight;
                        #endregion
                    }
                    if (selected == "wslip.png")
                    {
                        var finalweight = string.Format("{0:0.000}", Convert.ToDouble(uc.richTextBox1.Text == "" ? "0" : uc.richTextBox1.Text) / 1000);
                        txtwghtgross.Text = finalweight;
                    }
                }
                else
                {

                    DialogResult d = System.Windows.Forms.MessageBox.Show("Internet May Not be Available", "Internet", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    if (d == DialogResult.OK)
                    {
                        System.Windows.Forms.Application.Exit();
                        System.Windows.Forms.Application.ExitThread();
                        Process currentProcess = Process.GetCurrentProcess();
                        Process[] processItems = Process.GetProcessesByName(currentProcess.ProcessName);
                        currentProcess.Kill();
                        Application.Exit();
                    }
                    else
                    {

                    }

                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "OnTimerEvent");

            }
        }
        public static bool IsInternetAvailable()
        {
            int description;
            return InternetGetConnectedState(out description, 0);
        }
        public void BindGetSetting()
        {
            try
            {
                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/Getweightbridgesetting/";
                var ressettingModal = WebAPI.Postweightbridgesetting(_settingModal.PostUrl, _settingModal).Result;
                if (ressettingModal != null)
                {

                    _settingModal.WBCompanyName = ressettingModal.WBCompanyName;
                    _settingModal.WBMobileNumber = ressettingModal.WBMobileNumber;
                    _settingModal.WBAddress = ressettingModal.WBAddress;
                    _settingModal.WBBridgeNumber = ressettingModal.WBBridgeNumber;
                    _settingModal.WBEmailId = ressettingModal.WBEmailId;
                    _settingModal.CameraFrontUrl = ressettingModal.CameraFrontUrl;
                    _settingModal.CameraRearUrl = ressettingModal.CameraRearUrl;
                    _settingModal.CameraIPAddress = ressettingModal.CameraIPAddress;
                    _settingModal.CameraUserName = ressettingModal.CameraUserName;
                    _settingModal.CameraUserPassword = ressettingModal.CameraUserPassword;
                    _settingModal.RatesBaud = ressettingModal.RatesBaud;
                    _settingModal.DataBits = ressettingModal.DataBits;
                    _settingModal.ParityNew = ressettingModal.ParityNew;
                    _settingModal.Parity = ressettingModal.Parity;
                    _settingModal.StopBits = ressettingModal.StopBits;
                    _settingModal.StopBitsNew = ressettingModal.StopBitsNew;
                    _settingModal.IsReversed = ressettingModal.IsReversed;
                    _settingModal.PortName = ressettingModal.PortName;
                    _settingModal.ReaderCode = ressettingModal.ReaderCode;
                    _settingModal.SytemType = ressettingModal.SytemType;
                    WebAPIModelResponse.baudrate = Convert.ToString(_settingModal.RatesBaud);
                    WebAPIModelResponse.CombPortName = Convert.ToString(_settingModal.PortName);
                    WebAPIModelResponse.Parity = Convert.ToString(_settingModal.ParityNew);
                    WebAPIModelResponse.DataBits = Convert.ToString(_settingModal.DataBits);
                    WebAPIModelResponse.StopBits = Convert.ToString(_settingModal.StopBitsNew);
                    WebAPIModelResponse.Isreversed = Convert.ToString(_settingModal.IsReversed);
                    WebAPIModelResponse.ReaderCode = Convert.ToString(_settingModal.ReaderCode);
                    WebAPIModelResponse.SytemType = Convert.ToString(_settingModal.SytemType);
                    WebAPIModelResponse.CameraRearUrl = ressettingModal.CameraRearUrl;
                    WebAPIModelResponse.CameraFrontUrl = ressettingModal.CameraFrontUrl;

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "BindGetSetting");

            }

        }


        #region Confirm Rawanna
        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.A)
                MessageBox.Show("A pressed");
            else if (e.Modifiers == Keys.Alt && e.KeyCode == Keys.F1)
                MessageBox.Show("Combination of ALt and F1 pressed");
        }
        protected override void OnKeyDown(KeyEventArgs e)
        {
            // check for Ctrl.X
            if (e.KeyCode == Keys.X && Control.ModifierKeys == Keys.Control)
            {
                // your code to handle Ctrl.X

                e.Handled = true; // Decide whether or not focused control shall receive keystroke.
            }
        }


        string GetInvoiceNumber()
        {
            var strresult = string.Empty;
            try
            {
                DataTable dt = new DataTable();
                SettingModel settingModal = new SettingModel();
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.PostUrl = "/Api/ErawaanaAPI/GetInvoiceNumberdtl/";
                dt = WebAPI.PostInvoiceNumberdtl(settingModal.PostUrl, settingModal).Result;
                if (dt != null && dt.Rows.Count > 0)
                {
                    strresult = Convert.ToString("000" + dt.Rows[0]["INVOICENO"]);
                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "GetInvoiceNumber");
            }
            return strresult;

        }




        /// <summary>
        /// COMMON FUNCTION >> On page close dispose the socket info.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            _spManager.Dispose();



        }

        public void BindMineraluserforCombo()
        {
            try
            {
                cmbmineraluserfor.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDown;
                cmbmineraluserfor.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                cmbmineraluserfor.AutoCompleteSource = AutoCompleteSource.ListItems;
                List<Mineraluserfor> MineraluserforList = new List<Mineraluserfor>();
                MineraluserforList.Add(new Mineraluserfor { Id = 0, name = "Sell" });
                MineraluserforList.Add(new Mineraluserfor { Id = 1, name = "Captive" });
                MineraluserforList.Add(new Mineraluserfor { Id = 2, name = "Dealer" });


                cmbmineraluserfor.DisplayMember = "name";
                cmbmineraluserfor.ValueMember = "Id";
                cmbmineraluserfor.DataSource = MineraluserforList;
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "BindMineraluserforCombo");

            }
        }
        public void BindTransporttypeCombo()
        {
            try
            {
                cmbtransportmode.Text = "Road";
                cmbtransportmode.Enabled = false;
                CTcmbtransportmode.Text = "Road";
                CTcmbtransportmode.Enabled = false;
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "BindMineraluserforCombo");

            }
        }

        public async void BindLeaseListCombo()
        {
            var newcomboresult = string.Empty;
            try
            {

                Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                var result = string.Empty;
                dtMlno = await minesmart.Helper.Cls_PostMines.LeaseListdetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_leaseDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                try
                {
                    if (dtMlno != null && dtMlno.Rows.Count > 0)
                    {
                        if (dtMlno.Rows.Count == 1)
                        {
                            cmbmlno.DisplayMember = "LeaseNo";
                            cmbmlno.ValueMember = "LeaseId";
                            cmbmlno.DataSource = dtMlno;

                            if (cmbmlno.Text != "")
                            {
                                cmbconsigneename.Text = string.Empty;
                                cmbconsigneename.ResetText();
                                cmbconsigneename.AutoCompleteCustomSource.Clear();
                                cmbconsigneeaddress.Text = string.Empty;
                                cmbconsigneeaddress.ResetText();
                                cmbconsigneeaddress.AutoCompleteCustomSource.Clear();
                                cmbmineral.Text = string.Empty;
                                cmbmineral.ResetText();
                                cmbmineral.AutoCompleteCustomSource.Clear();
                                if (dtMlno.Rows.Count > 0)
                                {
                                    DataTable dtnew = new DataTable();
                                    DataView dvData = new DataView(dtMlno);
                                    dvData.RowFilter = " LeaseNo='" + cmbmlno.Text.Trim() + "'";
                                    dtnew = dvData.ToTable();
                                    if (dtnew.Rows.Count > 0)
                                        leasenoId = Convert.ToInt64(dtnew.Rows[0]["LeaseId"].ToString());
                                    if (cmbmlno.Text != null && cmbmlno.Text != "")
                                    {
                                        if (Convert.ToInt32(leasenoId) > 0)
                                        {
                                            GetconsigneeDetails(Convert.ToInt32(leasenoId));
                                            WebAPIModelResponse.mineralNameuserfor = Convert.ToString(cmbmineraluserfor.SelectedValue);
                                            comboleasenovalue = Convert.ToInt32(leasenoId);
                                            GetMineralDetails(Convert.ToInt32(leasenoId));

                                        }
                                    }
                                }
                                else
                                {
                                    ClearAllData();
                                }
                            }
                            else
                            {
                                ClearAllData();
                            }


                        }
                        else
                        {
                            DataRow row = dtMlno.NewRow();
                            row["LeaseNo"] = "Select";
                            row["LeaseId"] = "0";
                            dtMlno.Rows.InsertAt(row, 0);
                            cmbmlno.DataSource = dtMlno;
                            cmbmlno.DisplayMember = "LeaseNo";
                            cmbmlno.ValueMember = "LeaseId";
                        }
                    }
                    else
                        GetOnlineBlankResul();

                }
                catch (Exception ex)
                {
                    ErrorModel errormdl = new ErrorModel();
                    if (ex.Message.ToString().Contains("Status"))
                    {
                        var parsed = JObject.Parse(ex.Message.ToString());
                        errormdl.DateLog = DateTime.Now.ToString();
                        //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                        errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }
                    else
                    {
                        errormdl.DateLog = DateTime.Now.ToString();
                        errormdl.Exp = ex;
                        errormdl.Message = ex.Message;
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }
                    MessageBox.Show(ex.Message, "BindLeaseListComboin");

                }

            }
            catch (Exception ex)
            {

                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "BindLeaseListCombo1");

            }
        }
        public async void GetconsigneeDetails(int selectedText)
        {
            try
            {
                JObject returnJOBJECT = new JObject();
                DataTable dtconsigneenme = new DataTable();
                DataTable dt = new DataTable();
                long ConsigneeId = 0;
                ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
                if (cmbmlno.Text != "" && cmbmlno.Text != null)
                {
                    txtconsigneegst.Text = string.Empty;
                    selectedText = Convert.ToInt32(WebAPIModelResponse.mineralNameuserfor);
                    var newcomboresult = string.Empty;
                    try
                    {
                        if (selectedText == 1)
                        {
                            newcomboresult = "C";
                        }
                        if (selectedText == 0)
                        {
                            newcomboresult = "S";
                        }
                        if (selectedText == 2)
                        {
                            newcomboresult = "D";
                        }
                        Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                        datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                        datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                        datacollection.Add("leaseId", Convert.ToString(leasenoId));
                        datacollection.Add("mineralUsedFor", newcomboresult);
                        var result = string.Empty;

                        dtConsignee = await minesmart.Helper.Cls_PostMines.getconsigneeDetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_GetConsigneeDetails, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                        if (dtConsignee != null)
                        {
                            if (dtConsignee.Rows.Count > 0)
                            {
                                if (dtConsignee.Rows.Count == 1)
                                {
                                    try
                                    {
                                        if (dtConsignee.Rows[0]["Status"].ToString() != "301")
                                        {
                                            cmbconsigneename.Text = string.Empty;
                                            cmbconsigneename.ResetText();
                                            cmbconsigneename.AutoCompleteCustomSource.Clear();
                                            cmbconsigneeaddress.Text = string.Empty;
                                            cmbconsigneeaddress.ResetText();
                                            cmbconsigneeaddress.AutoCompleteCustomSource.Clear();
                                            DataTable dtconsadd = new DataTable();

                                            dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                                            dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                                            DataRow rowconadd = dtconsadd.NewRow();
                                            rowconadd["FULLADDRESSES"] = "Select";
                                            rowconadd["ADDRESSID"] = "0";
                                            dtconsadd.Rows.InsertAt(rowconadd, 0);
                                            cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                                            cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                            cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                            cmbconsigneename.Text = dtConsignee.Rows[0]["ConsigneeName"].ToString();
                                            if (cmbconsigneename.Text != null && cmbconsigneename.Text != "")
                                            {
                                                if (cmbconsigneename.Text.ToString().Contains("("))
                                                {
                                                    ConsigneeId = Convert.ToInt64(dtConsignee.Rows[0]["ConsigneeId"].ToString());
                                                    if (cmbmlno.Text != null && cmbmlno.Text != "")
                                                    {
                                                        if (Convert.ToInt32(ConsigneeId) > 0)
                                                        {
                                                            var consigneenameregst = cmbconsigneename.Text.ToString();
                                                            if (consigneenameregst.Contains("("))
                                                            {
                                                                string[] consigneegst = consigneenameregst.Split('(');
                                                                txtconsigneegst.Text = consigneegst[1].ToString().Replace("  ", "");
                                                                txtconsigneegst.Text = txtconsigneegst.Text.Replace(")", "");
                                                                cmbconsigneename.Text = consigneenameregst.ToString().Replace("  ", "");
                                                                txtconsigneegst.ReadOnly = true;

                                                            }
                                                            else
                                                            {
                                                                string[] consigneegst = consigneenameregst.Split('(');
                                                                txtconsigneegst.Text = consigneegst[1].ToString().Replace("  ", "");
                                                                txtconsigneegst.Text = txtconsigneegst.Text.Replace(")", "");
                                                                cmbconsigneename.Text = consigneenameregst.ToString().Replace("  ", "");
                                                                txtconsigneegst.ReadOnly = true;

                                                            }
                                                        }
                                                    }


                                                    //var comboconsigneetext = cmbconsigneename.Text.ToString();
                                                    GetconsigneeAddressDetails(ConsigneeId);


                                                }
                                                else
                                                {
                                                    txtconsigneegst.ReadOnly = true;
                                                    cmbconsigneename.Text = dtConsignee.Rows[0]["ConsigneeName"].ToString();
                                                    ConsigneeId = Convert.ToInt64(dtConsignee.Rows[0]["ConsigneeId"].ToString());
                                                    GetconsigneeAddressDetails(ConsigneeId);
                                                }

                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show(dtConsignee.Rows[0]["MessageDiscription"].ToString(), "GetconsigneeDetails");
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorModel errormdl = new ErrorModel();
                                        if (ex.Message.ToString().Contains("Status"))
                                        {
                                            var parsed = JObject.Parse(ex.Message.ToString());
                                            errormdl.DateLog = DateTime.Now.ToString();
                                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                        }
                                        else
                                        {
                                            errormdl.DateLog = DateTime.Now.ToString();
                                            errormdl.Exp = ex;
                                            errormdl.Message = ex.Message;
                                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                        }
                                        MessageBox.Show(ex.Message, "GetconsigneeDetails");

                                    }

                                }
                                else
                                {
                                    cmbconsigneename.Text = string.Empty;
                                    cmbconsigneename.ResetText();
                                    cmbconsigneename.AutoCompleteCustomSource.Clear();
                                    cmbconsigneeaddress.Text = string.Empty;
                                    cmbconsigneeaddress.ResetText();
                                    cmbconsigneeaddress.AutoCompleteCustomSource.Clear();
                                    DataTable dtconsadd = new DataTable();
                                    dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                                    dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                                    DataRow rowconadd = dtconsadd.NewRow();
                                    rowconadd["FULLADDRESSES"] = "Select";
                                    rowconadd["ADDRESSID"] = "0";
                                    dtconsadd.Rows.InsertAt(rowconadd, 0);
                                    cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                                    cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                    cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                    for (int i = 0; i < dtConsignee.Rows.Count; i++)
                                    {
                                        collCons.Add(dtConsignee.Rows[i]["ConsigneeName"].ToString());
                                    }
                                    cmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                    cmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                    // cmbconsigneename.AutoCompleteCustomSource = collCons;
                                }
                            }
                            else
                            {
                                collCons.Clear();
                                cmbconsigneename.Text = string.Empty;
                                cmbconsigneename.ResetText();
                                cmbconsigneename.AutoCompleteCustomSource.Clear();
                            }
                        }
                        else
                        {
                            collCons.Clear();
                            cmbconsigneename.Text = string.Empty;
                            cmbconsigneename.ResetText();
                            cmbconsigneename.AutoCompleteCustomSource.Clear();
                        }

                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "GetconsigneeDetails");
                    }

                }
                else
                {
                    GetOnlineBlankResul();
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "GetconsigneeDetails");
            }

        }
        private void cmbmlno_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        public async void GetMineralDetails(int leaseselectedText)
        {
            try
            {

                JObject returnJOBJECT = new JObject();
                dtMineral = new DataTable();
                DataTable dt = new DataTable();
                ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
                if (leaseselectedText > 0)
                {

                    //MessageBox.Show(leasenoId.ToString());
                    //leaseselectedText = Convert.ToInt32(WebAPIModelResponse.mineralNameuserfor);
                    //MessageBox.Show(leaseselectedText.ToString());
                    var newcomboresult = string.Empty;
                    try
                    {

                        Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                        datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                        datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                        datacollection.Add("leaseId", Convert.ToString(leaseselectedText));
                        var result = string.Empty;
                        try
                        {

                            if (WebAPIModelResponse.Authtoken.ToString() != "")
                            {
                                dtMineral = await minesmart.Helper.Cls_PostMines.getMineralDetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_MineralList, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                                if (dtMineral != null)
                                {
                                    if (dtMineral.Rows.Count > 0)
                                    {
                                        if (dtMineral.Rows.Count == 1)
                                        {
                                            cmbmineral.DataSource = dtMineral.DefaultView;
                                            cmbmineral.DisplayMember = "mineralName";
                                            cmbmineral.ValueMember = "mineralId";
                                        }
                                        else
                                        {
                                            // dtMineral.Columns.Add("mineralId", typeof(System.Int32));
                                            // dtMineral.Columns.Add("mineralName", typeof(System.String));
                                            DataRow row = dtMineral.NewRow();
                                            row["mineralName"] = "Select";
                                            row["mineralId"] = "0";
                                            dtMineral.Rows.InsertAt(row, 0);
                                            cmbmineral.DataSource = dtMineral.DefaultView;
                                            cmbmineral.DisplayMember = "mineralName";
                                            cmbmineral.ValueMember = "mineralId";
                                        }

                                    }
                                }
                                else
                                {
                                    DataTable dtMineral = new DataTable();
                                    dtMineral.Columns.Add("mineralId", typeof(System.Int32));
                                    dtMineral.Columns.Add("mineralName", typeof(System.String));
                                    DataRow row = dtMineral.NewRow();
                                    row["mineralName"] = "Select";
                                    row["mineralId"] = "0";
                                    dtMineral.Rows.InsertAt(row, 0);
                                    cmbmineral.DataSource = dtMineral.DefaultView;
                                    cmbmineral.DisplayMember = "mineralName";
                                    cmbmineral.ValueMember = "mineralId";
                                }
                            }
                            else
                            {
                                MessageBox.Show("Error Occured durning this process.Please Try again.", "Auth token", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Error Occured durning this process.Please Try again.");
                            }
                        }
                        catch (Exception ex)
                        {
                            ErrorModel errormdl = new ErrorModel();
                            if (ex.Message.ToString().Contains("Status"))
                            {
                                var parsed = JObject.Parse(ex.Message.ToString());
                                errormdl.DateLog = DateTime.Now.ToString();
                                //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            else
                            {
                                errormdl.DateLog = DateTime.Now.ToString();
                                errormdl.Exp = ex;
                                errormdl.Message = ex.Message;
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            MessageBox.Show(ex.Message, "GetconsigneeDetails");
                        }

                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "GetconsigneeDetails");

                    }
                }
                else
                {
                    cmbconsigneename.AutoCompleteCustomSource = null;
                    cmbconsigneename.AutoCompleteCustomSource = null;
                    cmbmlno.AutoCompleteCustomSource = null;

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "GetconsigneeDetails");

            }

        }

        public async void GetOnlineBlankResul()
        {
            try
            {
                DataTable dtmineral = new DataTable();
                dtmineral.Columns.Add("mineralId", typeof(System.Int32));
                dtmineral.Columns.Add("mineralName", typeof(System.String));
                DataRow row = dtmineral.NewRow();
                row["mineralName"] = "Select";
                row["mineralId"] = "0";
                dtmineral.Rows.InsertAt(row, 0);
                cmbmineral.DataSource = dtmineral.DefaultView;
                cmbmineral.DisplayMember = "mineralName";
                cmbmineral.ValueMember = "mineralId";

                DataTable dtconsadd = new DataTable();
                dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                DataRow rowconadd = dtconsadd.NewRow();
                rowconadd["FULLADDRESSES"] = "Select";
                rowconadd["ADDRESSID"] = "0";
                dtconsadd.Rows.InsertAt(rowconadd, 0);
                cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                cmbconsigneeaddress.ValueMember = "ADDRESSID";
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "GetOnlineBlankResul");
            }
        }
        private void cmbmineraluserfor_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbmineraluserfor.Text != "minesmart.ViewModels.Mineraluserfor" && cmbmineraluserfor.Text != "Select" && cmbmineraluserfor.Text != "")
                {
                    //GetconsigneeDetails(Convert.ToInt32(cmbmineraluserfor.SelectedValue));
                    WebAPIModelResponse.mineralNameuserfor = Convert.ToString(cmbmineraluserfor.SelectedValue);
                    GetconsigneeDetails(Convert.ToInt16(WebAPIModelResponse.mineralNameuserfor));


                }
                else
                {
                    if (cmbmlno.Text != null && cmbmlno.Text != "")
                    {
                        MessageBox.Show("Please Select the M L Number", "M L Number");

                    }

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbmineraluserfor_SelectedIndexChanged");

            }
        }
        public async void GetconsigneeAddressDetails(long comboconsigneevalue)
        {
            JObject returnJOBJECT = new JObject();
            DataTable dtconsigneeadrs = new DataTable();
            DataTable dtaddress = new DataTable();
            DataTable dt = new DataTable();
            ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
            var newcomboresult = string.Empty;
            try
            {
                if (Convert.ToInt64(comboconsigneevalue) > 0)
                {

                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    datacollection.Add("leaseId", Convert.ToString(leasenoId));
                    datacollection.Add("consigneeId", Convert.ToString(comboconsigneevalue));
                    var result = string.Empty;
                    try
                    {
                        if (WebAPIModelResponse.Authtoken.ToString() != "")
                        {
                            dtconsigneeadrs = await minesmart.Helper.Cls_PostMines.getconsigneeAddressDetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_GetconsigneeAddressDetails, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));

                            if (dtconsigneeadrs != null)
                            {
                                if (dtconsigneeadrs.Rows.Count > 0)
                                {
                                    if (dtconsigneeadrs.Rows[0]["Status"].ToString() != "200")
                                    {
                                        if (dtconsigneeadrs.Rows.Count == 1)
                                        {
                                            cmbconsigneeaddress.DataSource = dtconsigneeadrs.DefaultView;
                                            cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                            cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                            cmbconsigneeaddress.DataSource = dtconsigneeadrs.DefaultView;
                                            var Consigneenamegst = cmbconsigneeaddress.Text;
                                        }
                                        else
                                        {
                                            DataRow row = dtconsigneeadrs.NewRow();
                                            row["FULLADDRESSES"] = "Select";
                                            row["ADDRESSID"] = "0";
                                            dtconsigneeadrs.Rows.InsertAt(row, 0);
                                            cmbconsigneeaddress.DataSource = dtconsigneeadrs.DefaultView;
                                            cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                            cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                            cmbconsigneeaddress.DataSource = dtconsigneeadrs.DefaultView;
                                        }
                                    }
                                    else
                                    {
                                        DataTable dtconsadd = new DataTable();
                                        dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                                        dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                                        DataRow rowconadd = dtconsadd.NewRow();
                                        rowconadd["FULLADDRESSES"] = "Select";
                                        rowconadd["ADDRESSID"] = "0";
                                        dtconsadd.Rows.InsertAt(rowconadd, 0);
                                        cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                                        cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                        cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                    }

                                }
                                else
                                {
                                    DataTable dtconsadd = new DataTable();
                                    dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                                    dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                                    DataRow rowconadd = dtconsadd.NewRow();
                                    rowconadd["FULLADDRESSES"] = "Select";
                                    rowconadd["ADDRESSID"] = "0";
                                    dtconsadd.Rows.InsertAt(rowconadd, 0);
                                    cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                                    cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                    cmbconsigneeaddress.ValueMember = "ADDRESSID";
                                }
                            }
                            else
                            {
                                DataTable dtconsadd = new DataTable();
                                dtconsadd.Columns.Add("ADDRESSID", typeof(System.Int32));
                                dtconsadd.Columns.Add("FULLADDRESSES", typeof(System.String));
                                DataRow rowconadd = dtconsadd.NewRow();
                                rowconadd["FULLADDRESSES"] = "Select";
                                rowconadd["ADDRESSID"] = "0";
                                dtconsadd.Rows.InsertAt(rowconadd, 0);
                                cmbconsigneeaddress.DataSource = dtconsadd.DefaultView;
                                cmbconsigneeaddress.DisplayMember = "FULLADDRESSES";
                                cmbconsigneeaddress.ValueMember = "ADDRESSID";
                            }
                        }


                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "GetconsigneeAddressDetails");
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "GetconsigneeAddressDetails");

            }
        }

        private async void btnSave_Click(object sender, EventArgs e)
        {
            ////MineralDtl md = new MineralDtl();
            ////md.ShowDialog();
            //var str = "Ml No.:-'" + cmbmlno.Text + "'\n'";
            //str += "Mineral:-'" + cmbmineral.Text.ToString().Trim() + "'\n";
            //str += "Consignee Name:-'" + cmbconsigneename.Text + "'\n'";
            //str += "Consignee Address:-'" + cmbmineraluserfor.Text + "'\n";
            //str += "Vehicle no:-'" + txtVehicle.Text + "'\n'";
            //str += "Driver Name:-'" + txtdrivername.Text + "'\n'";
            //str += "Driver Mobile:-'" + txtmobileno.Text + "'\n'";
            //str += "Tare Weight:-'" + txttareweight.Text + "'\n";
            //str += "Gross Weight:-'" + txtgrossweight.Text + "'\n'";
            //str += "Net Weight:-'" + txtnetweight.Text + "'\n";
            //str += "PLEASE CHECK INFROMATION BEFORE YES .ONCE CONFIRM RAWANNA GENERATE NOT CANCELED BY DGMS.";
            //string message = str;
            //string title = "Confirmation Window";
            //MessageBoxButtons buttons = MessageBoxButtons.YesNo;
            //DialogResult result = MessageBox.Show(message, title, buttons);
            //if (result == DialogResult.Yes)
            //{
            GenerateConfirmRawanna();
            //}
            //else
            //{
            //    ClearAllData();
            //}



        }
        private async void GenerateConfirmRawanna()
        {
            try
            {
                this.btnSave.Text = "LOADING......";
                this.btnSave.Enabled = false;
                Cursor.Current = Cursors.WaitCursor;
                SettingModel ssmdl = new SettingModel();
                ConfirmERawannaModel _conmdl = new ConfirmERawannaModel();
                WebAPIModelResponse webAPImdl = new WebAPIModelResponse();
                DataTable dtccrawanna = new DataTable();
                var FCameraurl1 = string.Empty;
                var FCameraurl2 = string.Empty;
                var input_strfrnt = string.Empty;
                var input_strbck = string.Empty;

                DataTable dtcdtl = new DataTable();
                ssmdl.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
                ssmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                ssmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
                ssmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
                ssmdl = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, ssmdl).Result;
                if (ssmdl.Success == "200")
                {

                    rtsp1 = WebAPIModelResponse.CameraRearUrl;
                    rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                    frontCameraImage = string.Empty;
                    rearCameraImage = string.Empty;
                    if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                    {
                        // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                        frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);
                        rearCameraImage = frontCameraImage;
                    }
                    else
                    {

                        // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                        frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);

                        // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                        rearCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl2, CameraImageQuality.Good);
                    }

                }
                try
                {
                    if (cmbmlno.Text != null && cmbmlno.Text != "")
                    {
                        if (cmbmineral.Text != "System.Data.DataRowView" && cmbmineral.Text != null && cmbmineral.Text != "")
                        {
                            if (cmbconsigneename.Text != null && cmbconsigneename.Text != "")
                            {
                                if (cmbmineral.Text != "System.Data.DataRowView" && cmbconsigneeaddress.Text != null && cmbconsigneeaddress.Text != "")
                                {

                                    if (txtVehicle.Text != "")
                                    {
                                        var finalerrorResult = true;
                                        var finalerrormsg = string.Empty;
                                        var IsResult = string.Empty;
                                        var newmineraluserfor = string.Empty;
                                        int s = 0;
                                        int mineraluserforId = 0;
                                        mineraluserforId = Convert.ToInt32(WebAPIModelResponse.mineralNameuserfor);
                                        if (mineraluserforId == 1)
                                        {
                                            newmineraluserfor = "C";
                                        }
                                        if (mineraluserforId == 0)
                                        {
                                            newmineraluserfor = "S";
                                        }
                                        if (mineraluserforId == 2)
                                        {
                                            newmineraluserfor = "D";
                                        }
                                        if (finalerrorResult)
                                        {

                                            _conmdl.SSOID = WebAPIModelResponse.SsoId.ToString().Trim();
                                            _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                            _conmdl.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                                            _conmdl.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                                            _conmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                                            _conmdl.WeightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                                            _conmdl.MLNoId = Convert.ToInt64(leasenoId);
                                            _conmdl.MLNo = cmbmlno.Text.ToString().Trim();
                                            _conmdl.MineralName = cmbmineral.Text.ToString().Trim();
                                            _conmdl.MineralId = Convert.ToInt64(cmbmineral.SelectedValue);
                                            _conmdl.MineralUserFor = cmbmineraluserfor.SelectedValue.ToString().Trim();
                                            _conmdl.RoyaltySchedule = txtroyaltyschrate.Text.ToString().Trim();
                                            _conmdl.RoyaltyScheduleRate = combroyalityschedule.Text.ToString().Trim();
                                            _conmdl.CollectionThrough = combroyalityschedule.Text.ToString().Trim();
                                            _conmdl.ConsigneeName = cmbconsigneename.Text;
                                            _conmdl.ConsigneeId = Convert.ToInt64(ConsigneeId);
                                            _conmdl.ConsigneeAddress = cmbconsigneeaddress.Text;
                                            _conmdl.ConsigneeAddressId = Convert.ToInt64(cmbconsigneeaddress.SelectedValue);
                                            _conmdl.ConsigneeGSTNo = txtconsigneegst.Text;
                                            _conmdl.TransportDetails = "Road";
                                            _conmdl.Vechicle = txtVehicle.Text;
                                            //_conmdl.VechicleId = Convert.ToInt64(txtVehicle.Text);
                                            //_conmdl.Unit = txttonnes.Text.Trim();
                                            _conmdl.ApproximateTime = txtapproxtime.Text.Trim();
                                            //_conmdl.Vechicleweight = txtwehicleweight.Text.Trim();
                                            _conmdl.VechicleRegistration = txtVehicle.Text.Trim();
                                            _conmdl.DriverMobileNo = txtmobileno.Text.Trim();
                                            _conmdl.DriverName = txtdrivername.Text.Trim();
                                            _conmdl.TareWeight = Convert.ToString(txttareweight.Text);
                                            _conmdl.GrossWeight = Convert.ToString(txtgrossweight.Text);
                                            //_conmdl.TotalWeight = Convert.ToString(txttonnes.Text);
                                            _conmdl.Comment = txtremark.Text.Trim();
                                            _conmdl.FirstCameraImageurl = frontCameraImage;// "<Record>" + frontCameraImage + "</Record>";
                                            _conmdl.SecondCameraImage = rearCameraImage;
                                            _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                            _conmdl.IpAddress = checkcon.GetMacAddress();
                                            _conmdl.Isactive = true;
                                            Dictionary<string, string> datacollection = new Dictionary<string, string>(27);
                                            datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId.ToString().Trim()));
                                            datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                                            datacollection.Add("mineralId", Convert.ToInt64(cmbmineral.SelectedValue).ToString());//Convert.ToInt64(combomineral.SelectedValue).ToString()
                                            datacollection.Add("mineralUsedFor", newmineraluserfor);
                                            datacollection.Add("tranportMode", Convert.ToString("L").ToString());// combtransportmode.Text
                                            datacollection.Add("leaseId", Convert.ToInt64(leasenoId).ToString());//Convert.ToInt64(comboleaseno.SelectedValue).ToString()
                                            datacollection.Add("approxTime", txtapproxtime.Text);
                                            datacollection.Add("vehicleNo", txtVehicle.Text);//cmbvechicle.Text
                                            datacollection.Add("driverMobNo", txtmobileno.Text.Trim());//txtdmobileNo.Text;
                                            datacollection.Add("driverName", txtdrivername.Text.Trim());//txtvdrivername.Text.Trim()
                                            datacollection.Add("grossWeight", txtgrossweight.Text.Trim());
                                            datacollection.Add("additionalComment", txtremark.Text.Trim());
                                            datacollection.Add("consigneeId", Convert.ToString(ConsigneeId));//Convert.ToInt64(Combconsigneename.SelectedValue).ToString()
                                            datacollection.Add("consigneeName", "");//cmbconsigneename.Text);//Combconsigneename.Text
                                            datacollection.Add("consigneeAddress", "");// Convert.ToString(cmbconsigneeaddress.Text));// combconsigneeAddress.Text
                                            datacollection.Add("consigneeGSTIN", "");// txtconsigneegst.Text);//txtconsigneegst.Text
                                            datacollection.Add("consigneeDistance", "");//txtgrossweight.Text.Trim());
                                            datacollection.Add("tareWeight", "");// txttareweight.Text.Trim());//txttareweight.Text.Trim()
                                            datacollection.Add("vehMaxCapacity", "");//txttonnes.Text.Trim());
                                            datacollection.Add("frontImage", frontCameraImage);// "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qcpxv71z+UaivrX9qr9mXWfgR4qlvtLgudQ+HWvXM83h7Vgskx0wlg7aFq8oXEV7bB8Ws0h26haqJ42M0d1Db/JVfiWZZbjMpxtfL8fRlQxOHm4Tg9mt41Kctp0qkWp05x0lFprsfzrjcFicuxVXB4um6VejJxnF7NbxnB7ShNWlCS0lFpoKKKK4TlCiiigD9mP+CZttMvw9+Il20ZFvN4vsYI5Mrh5rfSIpJkAB3AolzAxJAB8wYJwcfphXyB+w14Im8F/s9eGJbqIwXvjC81HxjcxldpEWptFaaXJnqwuNG07TbkEgECYJj5efr+v654MwtTB8LZJQqpqf1GnWlFqzj9ZcsSotdHGNVJp6ppp6n9F8MUJ4bIMqpTTUvqkKjTVmvbuVdJro0qiTW91qFFFBIAJJwBySegHqa+nPdCivjf43/tsfCv4QT3mhac8njzxjakxy6LoVzEmnWFwOsOr66UuLa2kUhklt7ODUbyCVRHc20G4NXqP7P/x78L/H3waniHRQmna1YmO28TeGnuPPutEvpA5jxIY4WurC8WN5bG9WJUlVZInEdxBPFH41DiHJcTmU8ow+ZYatmNOE5yw9OfO17N2qQVRJ0pVYaudGM3VhGMpSglGTXmUs5yuvjpZbRxtCpjYQlOVGEuZ2i7SippezlUjvKlGbqRinJxSjJr3eiiivZPTCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAFXqPqP50UL1H1H86KABup+p/nSUrdT9T/ADpKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKp6jqFnpOn32qahPHa2Gm2lzfXtzKdsdvaWkLz3E0jdkiijd2PYKauV8i/tw+NJPBv7PHi1LaYwXviy407whauGKkpqszT6pFgDLCbRLHU4SMqAJN5JClW8/NcfDK8tx+Y1EnHBYSvieVu3PKlTlKEL96k1GC85I48wxccBgcXjZq8cLh6tflbtzOnByjC/eckorzZ892v8AwU08Jf2leQah8Mdeh0yK7uIrS9sNesb27ubSOXbb3Etjc6fp0VtNNFmSS3W+uFhbCLPMCXHv/gv9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TK+hf2i/hzc+EPiZqB06ynk0rxU0mu6UIIZHUTXUjtqVlGEUrvtr3zXWGMfurWe14AZa5jwp8Cfil4weI6d4T1CztJCudR1qM6PZLGw/1yvfCKa5jGcE2cNy2cgKdrY/xmzLw74twfFuccHYPI81zfNsozPEZdUo5bl+KxcqqpVGqOJjGhTqcmHxNB0sVTqTcYewqwqSko6l3Vr9DyGvafhR8D/F3xSvIpbW3k0rw1HLtvvEV3EwtgEYCWDT0ba1/eYJAjiPkxMB9omhBXd9e/Dn9kbwzoLwal45vR4o1GMrIul26yW+hQyDnEu/bd6iFYZHmfZIHXKy2sgNfXVraWtjbw2dlbQWlpbxrFBbW0UcEEMSDCxxQxKscaKAAFVQAOgr+o/Cz6I+a46ths48Tan9l5fCUKsOGcFiIVcyxiTUlTzLG4ec6GX0JLSpRwtSvjJxcoOrgakVJw59vvOR8A/D/wAN/DjQYdB8N2ghhXEl5eS4e91K72hZLu9mwC8j4wqKFhgTEUMccaha7aiiv7/y3LMvybAYTK8qweHy/LsBQhhsHgsJSjRw+HoU1ywp0qcEoxSWre8pNyk3JtvMKKKK7gCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBV6j6j+dFC9R9R/OigAbqfqf50lK3U/U/zpKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACq93aW9/a3NleQx3FpeW81rcwSqHjmt7iNopopEYEMkkbsjKQQVJBqxRSaTTTSaaaaaumno009Gmt0DSaaauno09muzPxB8Rf8E8fjFceNfENp4YPhm28IjWLw+H9W1nW2i8zR5ZmlsvPtrO31LUEmt4HSCcPbbnmidkDIysfoH4cf8ABNfwvpstvffE7xle+I3jZZJND8OQHSNNYj70Fzqlw0+oXUD9S1rBpUw6CQV+ntFfCYTw34TwuIniXgamKlKpKpCli686lClzSclCFGCpU5QjfljGsqvupXcnqfJYfgjh6hWlWeFniJOcpxhiKsp0YXk3yxpQVOEoRvZRqqppvd6nG+CPh54J+G+kR6F4H8NaV4b01Au+LTrZUmuXQFVmvrxy95qFxtODc3txPORwZCABXZUUV9xSo0qFOFGhSp0aVOKjTpUoRp04RW0YQgoxjFdFFJI+qp06dGEaVKnClTglGFOnGMIQitoxhFKMUuiSSCiiitCwooooAKKKKAPy9/4KnX3l/Cb4e6ZukH2rx+19sGPKb7B4f1WDc/OfMT+0cR8H5Xl5HRvwx/pX7Pf8FW7/AMvQ/gzpnmOPtmqeM73yh/q3/s+18Owb2P8AejGo4QdxIx7V+MNfyB4tVfacc5nG9/Y4fLaXpfAYetbf/p75enV/q/C0OXJsO/56lef/AJVlH/20Of8AP+f8/hyDI79+McY/+v70daK/Nj6D17979vJH9Vn7O14t/wDAT4MXImedn+F3gWOaWTeXe4g8NabBclzIA7sLiOQFzkORvVmVgx9kr52/ZKupLz9m74OSyCMMngrTLUCMEL5dkJLOI/MzHe0cCGQ5wXLEKowo+ia/vPIqntckyer/AM/Mqy+p1+3hKMurb69W35n4jjI8mLxUf5cRWX3VJIQqpxlQcdMgHGeuM9M0tFFepZXvZXe76nMFFFFMAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigBV6j6j+dFC9R9R/OigAbqfqf50lK3U/U/wA6SgAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD8XP8Agq1fCXxF8HNN8xmNno/i298og7I/t95okAkBxgtL/ZxVgGO0RISBkE/klX6ff8FTb/zPi/4A0vzSTafDuO+8nbhU/tDxHrkHmB9vzGX+zdpXcdoiU4G/J/MH/P8Aniv4w8SqvteOOIJXvy4nD0v/AATgcLRtu9uS3r0Wx+u8OwcMmwKtvTnNdvfq1JL7+bt83pcooor4Y9pbK23T06H9Lv7DN3Hefsr/AAnmjDqq2HiG2IkADb7Pxfr9pIRhmBQyQMUJIJQqWVWJUfWdfEv/AAT0vTdfsteCIDMsg07VPF1mqDZm3EnifVL/AMp9oBLMb0zjflgsyjO0KB9tV/c3CFT2vCnDU975FlSey1jgaEZaJu2sX19dT8XzVcuZ5gu2MxNvT2s7b+QUUUV9EcAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAKvUfUfzooXqPqP50UADdT9T/ADpKVup+p/nSUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAfz+/8ABTO/+2ftE2Vv5vmf2X8PPDtjs2bfI8zUte1Hys7F8wH7f52/dJjzSm4bNifnjX29/wAFDr/7X+1H4yt/NEn9maR4RsggUKYPM8N6dqHlEhV35+3ecGJc4l2bsKFX4h/z/n/P9K/iDjer7bi/iSd72zjG0/8AwTWlRtu9vZ23+S2X7LksVHKcuj3wlGX/AIHBT8v5v+H3Ciiivlj0z+g//gmtdm4/ZvSEptFj448SWobdnzA8Ol3m8jA24N2YwozwgbOSQP0Br81f+CXN4svwJ8X2Zld5bT4o6tL5bbisUF14Y8J+WEJG0BpYLhyinhiWYDeCf0qr+2eAantODOHJdssoU+n/AC65qXT/AAevfW5+OZ5HlzfHr/qIlJ77ySl19Qooor688oKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAFXqPqP50UL1H1H86KABup+p/nSUrdT9T/ADpKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP5nf239Q/tL9qX4s3HmLL5eq6PY7lXYF/szwzouneWRgZMX2Xyy2PnKb8ndk/KNe/ftUX/9pftGfGW48xZfL+IHiKx3IAAP7MvpdO8sgfxR/ZfLcnkurGvAa/hDiOr7fiDPa2/tc4zOpfe/Pja0r313vfd+rP2zL4qGAwUduXCYaPTpRgraJdkvkgoooHP/ANevGOtPzv6+Wj6LqfuF/wAErrt3+G3xLsTs8u38Z2F0uP8AWb7vRoYnLfMfkK2UYT5Qch+Txj9Tq/If/glFdo+l/GuyCsJLe+8C3LMcbGW7g8VRIq4OdymzctkYwyYJ5A/Xiv7M8ManteBshle9qOLp9/4WYYulbptyW8vPc/I+I48udY5d50pf+B4elL9f+GCiiivvDxAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAVeo+o/nRQvUfUfzooAG6n6n+dJSt1P1P86SgAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkJwCfQE/lS0yQ4jc+iMfyBoA/lB+Nt7/AGn8ZPixqO9JPt/xH8bXnmRf6uT7T4k1KYyR442Pv3KR2IrzCug8W3/9qeKvEupb0k/tDXtXvfMiyYn+03882+I5P7tt+U5PykcnrXPj6Y/z7V/AGMqe2xmKrXv7XE16l97+0qzlf8T9zoR5KNGG3JSpwtp0hFW7/lsFB9uKKK5jX8P6+Z+uX/BKS8Ka78ZbDzlUXOleDrs2+V3SGzu/EEIlAPz4h+3FCQQuZxu3Hbt/Z6vw6/4JX3ZT4m/EiwCZFx4HtroyEnKm01yyhCBcch/tjMWyMbBgHdkfuLX9feEtTn4HyyP/AD6xGY0+v/QdXqf+5L6aa97n5TxTG2dYl/zU8PL7qFOP/tvUKKKK/Sj50KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK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RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAKvUfUfzooXqPqP50UADdT9T/ADpKVup+p/nSUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAq9R9R/Oiheo+o/nRQBPRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQB//Z");
                                            datacollection.Add("rearImage", rearCameraImage); //"");
                                                                                              //datacollection.Add("frontImage", "");
                                                                                              //datacollection.Add("rearImage", "
                                            datacollection.Add("usedInNH", "N");
                                            datacollection.Add("collectionAgainst", "0");
                                            datacollection.Add("royaltyScheduleId", "0");
                                            datacollection.Add("stockLocId", "0");
                                            datacollection.Add("mixtureType", "");
                                            datacollection.Add("addressId", "");
                                            // Live Database Update  Consignee Details
                                            //string urls = HttpService.localURL + "eravannal/generateConfirmRawanna";
                                            //var dtccrawannass = await ERawaana.Helper.DMGService.GenerateConfirmedRawanna(urls, datacollection, Convert.ToString(System.Windows.Application.Current.Properties["ACCESSKEY"]), Convert.ToString(System.Windows.Application.Current.Properties["WeightBridge"]));
                                            dtccrawanna = await minesmart.Helper.Cls_PostMines.generateconfirmrawannadetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_Generateconfirmrawanna, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                                            if (dtccrawanna != null && dtccrawanna.Rows.Count > 0)
                                            {
                                                if (dtccrawanna.Rows[0]["status"].ToString() == "301")
                                                {
                                                    this.btnSave.Text = "GENERATE";
                                                    this.btnSave.Enabled = true;
                                                    Cursor.Current = Cursors.Default;
                                                    MessageBox.Show(dtccrawanna.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                                                }
                                                else
                                                {
                                                    _conmdl.Authtoken = WebAPIModelResponse.Authtoken.ToString();
                                                    _conmdl.Rawannastatus = dtccrawanna.Rows[0]["status"].ToString();
                                                    _conmdl.ERawannaNo = dtccrawanna.Rows[0]["eRawannaNo"].ToString();
                                                    _conmdl.Royaltyamount = dtccrawanna.Rows[0]["Royaltyamount"].ToString();
                                                    _conmdl.RawannaCount = dtccrawanna.Rows[0]["rawannaCount"].ToString();
                                                    _conmdl.RawannaDate = Convert.ToDateTime(dtccrawanna.Rows[0]["rawannaDate"].ToString());
                                                    WebAPIModelResponse.eRawannaNo = dtccrawanna.Rows[0]["eRawannaNo"].ToString();
                                                    WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetConfirmERawanna/";
                                                    var responseDetails = WebAPI.PostinsertConfirmRawanna(WebAPIModelResponse.PostUrl, _conmdl).Result;
                                                    if (responseDetails.Status == "200")
                                                    {
                                                        //Save Invoice Comfirm E Rawanna
                                                        _conmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                                                        _conmdl.SSOID = Convert.ToString(WebAPIModelResponse.SsoId.ToString().Trim());
                                                        _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                                        _conmdl.WeightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                                                        _conmdl.ERawannaNo = dtccrawanna.Rows[0]["eRawannaNo"].ToString();
                                                        WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetConfirmERawannaInvoice/";
                                                        _conmdl = WebAPI.PostinsertConfirmRawannaInvoice(WebAPIModelResponse.PostUrl, _conmdl).Result;
                                                        if (_conmdl.success == "200")
                                                        {
                                                            ClearAllData();
                                                            if (chkdmgunconfirmprint.Checked)
                                                            {
                                                                //Print Dmg
                                                                var targetURLDMG = minesmart.Helper.HttpServiceUrl.DMGravannaStatusURL + dtccrawanna.Rows[0]["eRawannaNo"].ToString().Replace("\"", string.Empty).Trim().ToString();
                                                                var psi = new ProcessStartInfo
                                                                {
                                                                    FileName = targetURLDMG,
                                                                    UseShellExecute = true
                                                                };
                                                                Process.Start(psi);
                                                            }
                                                            if (chkunconfirmprint.Checked)
                                                            {
                                                                //Print
                                                                var targetURLLOCAL = minesmart.Helper.HttpServiceUrl.PrintCWebsiteUrl + Comman.EncryptData(dtccrawanna.Rows[0]["eRawannaNo"].ToString().Replace("\"", string.Empty).Trim().ToString());
                                                                var psilocal = new ProcessStartInfo
                                                                {
                                                                    FileName = targetURLLOCAL,
                                                                    UseShellExecute = true
                                                                };
                                                                Process.Start(psilocal);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            this.btnSave.Text = "GENERATE";
                                                            this.btnSave.Enabled = true;
                                                            Cursor.Current = Cursors.Default;
                                                            MessageBox.Show("Some Error Occured during process", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");
                                                        }

                                                    }
                                                    else
                                                    {
                                                        this.btnSave.Text = "GENERATE";
                                                        this.btnSave.Enabled = true;
                                                        Cursor.Current = Cursors.Default;
                                                        MessageBox.Show("Error Occured durning this Insert into table.Please Try again.", "Auth token", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Error Occured durning this process.Please Try again.");
                                                    }
                                                }

                                            }
                                            else
                                            {
                                                this.btnSave.Text = "GENERATE";
                                                this.btnSave.Enabled = true;
                                                Cursor.Current = Cursors.Default;

                                            }
                                        }
                                        else
                                        {
                                            this.btnSave.Text = "GENERATE";
                                            this.btnSave.Enabled = true;
                                            Cursor.Current = Cursors.Default;
                                            MessageBox.Show("Error Occured durning this process.Please Try again.", "Auth token", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Error Occured durning this process.Please Try again.");
                                        }
                                    }
                                    else
                                    {
                                        this.btnSave.Text = "GENERATE";
                                        this.btnSave.Enabled = true;
                                        Cursor.Current = Cursors.Default;
                                        MessageBox.Show("Please Select Vehicle Number", "Vehicle Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                    }
                                }
                                else
                                {
                                    this.btnSave.Text = "GENERATE";
                                    this.btnSave.Enabled = true;
                                    Cursor.Current = Cursors.Default;
                                    MessageBox.Show("Please Select Consignee Address", "Consignee Address", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            else
                            {
                                this.btnSave.Text = "GENERATE";
                                this.btnSave.Enabled = true;
                                Cursor.Current = Cursors.Default;
                                MessageBox.Show("Please Select Consignee Name", "Consignee Name", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }
                        }
                        else
                        {
                            this.btnSave.Text = "GENERATE";
                            this.btnSave.Enabled = true;
                            Cursor.Current = Cursors.Default;
                            MessageBox.Show("Please Select Mineral Details", "Mineral Details", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        this.btnSave.Text = "GENERATE";
                        this.btnSave.Enabled = true;
                        Cursor.Current = Cursors.Default;
                        MessageBox.Show("Please Select M L Number", "M L Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }

                }
                catch (Exception ex)
                {
                    this.btnSave.Text = "GENERATE";
                    this.btnSave.Enabled = true;
                    Cursor.Current = Cursors.Default;
                    ErrorModel errormdl = new ErrorModel();
                    if (ex.Message.ToString().Contains("Status"))
                    {
                        var parsed = JObject.Parse(ex.Message.ToString());
                        errormdl.DateLog = DateTime.Now.ToString();
                        //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                        errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }
                    else
                    {
                        errormdl.DateLog = DateTime.Now.ToString();
                        errormdl.Exp = ex;
                        errormdl.Message = ex.Message;
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }

                }
            }
            catch (Exception ex)
            {
                ClearAllData();
                this.btnSave.Text = "GENERATE";
                this.btnSave.Enabled = true;
                Cursor.Current = Cursors.Default;
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
            }
        }
        static internal Dictionary<string, string> GetDict(DataTable dt)
        {
            return dt.AsEnumerable()
              .ToDictionary<DataRow, string, string>(row => row.Field<string>(2),
                                        row => row.Field<string>(3));
        }
        static internal Dictionary<string, string> GetDictInvoice(DataTable dt)
        {
            return dt.AsEnumerable()
              .ToDictionary<DataRow, string, string>(row => row.Field<string>(0),
                                        row => row.Field<string>(1));
        }



        private void rtorder_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rtorder.Checked)
                {
                    // grporderdtl.Visible = true;
                    // rtdirect.Checked = false;
                    // txtorderno.Text = GetInvoiceNumber();
                    // BindProductItem();
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        private void rtdirect_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rtdirect.Checked)
                {
                    //grporderdtl.Visible = false;
                    rtdirect.Checked = true;
                    //txtorderno.Text = GetInvoiceNumber();
                    // BindProductItem();
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }

        }

        //private void cmbProduct_SelectedIndexChanged(object sender, EventArgs e)
        //{
        //    try
        //    {
        //        long productId = 0;
        //        if (cmbProduct.Text != "System.Data.DataRowView" && cmbProduct.Text != "Select")
        //        {
        //            productId = cmbProduct.SelectedValue.ToString() == "System.Data.DataRowView" ? 0 : Convert.ToInt64(cmbProduct.SelectedValue.ToString());
        //            //txtconsigneeId.Text = cmbconsigneename.SelectedValue.ToString();
        //            DataTable dtaddress = new DataTable();
        //            SettingModel stdtl = new SettingModel();
        //            stdtl.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
        //            stdtl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
        //            stdtl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
        //            stdtl.ProductId = productId.ToString();
        //            stdtl.PostUrl = "/Api/ErawaanaAPI/GetProductItemPricedtl/";
        //            dtaddress = WebAPI.PostGetProductItemPricedtl(stdtl.PostUrl, stdtl).Result;
        //            if (dtaddress.Rows.Count > 0)
        //                txtrate.Text = dtaddress.Rows[0]["PRICE"].ToString();
        //            else
        //                txtrate.Text = string.Empty;


        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        ErrorModel errormdl = new ErrorModel();
        //        if (ex.Message.ToString().Contains("Status"))
        //        {
        //            var parsed = JObject.Parse(ex.Message.ToString());
        //            errormdl.DateLog = DateTime.Now.ToString();
        //            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
        //            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
        //            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
        //        }
        //        else
        //        {
        //            errormdl.DateLog = DateTime.Now.ToString();
        //            errormdl.Exp = ex;
        //            errormdl.Message = ex.Message;
        //            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
        //        }
        //        MessageBox.Show(ex.Message);

        //    }
        //}



        private async void button1_Click(object sender, EventArgs e)
        {

        }

        private void cmbmineraluserfor_QueryAccessibilityHelp(object sender, QueryAccessibilityHelpEventArgs e)
        {

        }

        #endregion

        private void button6_Click(object sender, EventArgs e)
        {

        }

        #region Unconfirm Rawanna
        private async void btnsearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtsearch.Text.ToString() != "" && txtsearch.Text.ToString() != null)
                {
                    this.btnsearch.Text = "LOADING......";
                    this.btnsearch.Enabled = false;
                    JObject returnJOBJECT = new JObject();
                    DataTable dtresult = new DataTable();
                    var newcomboresult = string.Empty;
                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    //datacollection.Add("leaseId", "61265");
                    datacollection.Add("searchText", txtsearch.Text.ToString());
                    try
                    {

                        dtresult = await minesmart.Helper.Cls_PostMines.getsearchunconfirmrawanna(minesmart.Helper.HttpServiceUrl.localURL, SSL_SearchRawannaDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                        if (dtresult != null && dtresult.Rows.Count > 0)
                        {

                            txtcmbmlno.Text = dtresult.Rows[0]["leaseNo"].ToString().Replace("\\", "");
                            txteRawannaNo.Text = dtresult.Rows[0]["eRawannaNo"].ToString();
                            txtcmbmineral.Text = dtresult.Rows[0]["mineralName"].ToString();
                            txtcombroyalityschedule.Text = dtresult.Rows[0]["approxRoyalty"].ToString();
                            //cmbmineraluserfor.Text = dtresult.Rows[0][""].ToString();
                            //ombroyalityschedule.Text = dtresult.Rows[0][""].ToString();
                            txtrawannadate.Text = dtresult.Rows[0]["ravannaDate"].ToString();
                            txtstatus.Text = dtresult.Rows[0]["status"].ToString();
                            //txtlocation.Text = dtresult.Rows[0]["location"].ToString();
                            txtcombroyalityschedule.Text = dtresult.Rows[0]["approxRoyalty"].ToString();
                            // { "Status" :200,"rawannaDetail":{ "consigneeName":"test bhupenda","approxTotalAmount(in Rs.)":"200","approxNMET(in Rs.)":"0","ravannaDate":"24-Aug-2021 11:25:17 AM","status":"Unconfirm","location":null,"TransactionType":"eRawanna","leaseID":"93027","driverMobNo":"9887722520","approxWeight(in MT)":"1 Metric Ton","CollectionAgainst":"DeadRent Rawanna","approxDMFT(in Rs.)":"20","leaseNo":"ME\/JPR\/Minor\/ML\/14\/2021","vehicleName":" ","eRawannaNo":"FGCD1001430167","approxRSMET(in Rs.)":"4","transportMode":"Road","approxRoyalty(in Rs.)":"200","driverName":"ram","vehicleNo":"RDX112235","approxTime":"1 Hour","mineralName":"Marble","VEHICLEWEIGHT":"5.253"} }
                            txtuntareweight.Text = dtresult.Rows[0]["VEHICLEWEIGHT"].ToString();
                            txtunnetweight.Text = string.Format("{0:0.000}", (Convert.ToDouble(txtunconfirmgross.Text) - Convert.ToDouble(txtuntareweight.Text)));
                            txtcmbconsigneename.Text = dtresult.Rows[0]["consigneeName"].ToString();
                            //cmbconsigneeaddress.Text = dtresult.Rows[0][""].ToString();
                            // txtconsigneegst.Text = dtresult.Rows[0][""].ToString();
                            txttansporttype.Text = dtresult.Rows[0]["transportMode"].ToString();
                            txtvechilenumber.Text = dtresult.Rows[0]["vehicleNo"].ToString();
                            // txtcapcity.Text = dtresult.Rows[0]["approxWeight"].ToString();
                            txtunapproxtime.Text = dtresult.Rows[0]["approxTime"].ToString();
                            // txtvehicleweight.Text = dtresult.Rows[0]["VEHICLEWEIGHT"].ToString();
                            txtdrivemobile.Text = dtresult.Rows[0]["driverMobNo"].ToString();
                            txtundrivername.Text = dtresult.Rows[0]["driverName"].ToString();
                            //txttareweight.Text = dtresult.Rows[0][""].ToString();
                            txtunconfirmgross.Text = dtresult.Rows[0]["approxDMFT"].ToString();
                            WebAPIModelResponse.leaseID = dtresult.Rows[0]["leaseID"].ToString();
                            WebAPIModelResponse.leaseNo = dtresult.Rows[0]["leaseNo"].ToString();
                            this.btnsearch.Text = "SEARCH";
                            this.btnsearch.Enabled = true;
                            //txtnetweight.Text = dtresult.Rows[0][""].ToString();
                            //txtremark.Text = dtresult.Rows[0][""].ToString();
                        }
                        else
                        {
                            txtsearch.Text = string.Empty;
                            this.btnsearch.Text = "SEARCH";
                            this.btnsearch.Enabled = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        txtsearch.Text = string.Empty;
                        this.btnsearch.Text = "SEARCH";
                        this.btnsearch.Enabled = true;
                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");

                    }
                }
                else
                {
                    txtsearch.Text = string.Empty;
                    this.btnsearch.Text = "SEARCH";
                    this.btnsearch.Enabled = true;
                    System.Windows.Forms.MessageBox.Show("Please Enter the Search Text First", "Search", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Please Enter the Search Text First");
                }
            }
            catch (Exception ex)
            {
                ClearUnconfirmRawannadata();
                ErrorModel errormdl = new ErrorModel();
                errormdl.DateLog = DateTime.Now.ToString();
                errormdl.Exp = ex;
                errormdl.Message = ex.Message;
                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
               MessageBox.Show(ex.ToString(), "Search");

            }
        }



        private async void btnunconfirmrawanna_Click(object sender, EventArgs e)
        {
            try
            {

                if (txteRawannaNo.Text != "" && txteRawannaNo.Text != null)
                {
                    this.btnunconfirmrawanna.Text = "LOADING......";
                    this.btnunconfirmrawanna.Enabled = false;
                    JObject returnJOBJECT = new JObject();
                    SettingModel ssmdl = new SettingModel();
                    ConfirmERawannaModel _conmdl = new ConfirmERawannaModel();
                    WebAPIModelResponse webAPImdl = new WebAPIModelResponse();
                    DataTable dtresult = new DataTable();
                    var newcomboresult = string.Empty;
                    DataTable dtcdtl = new DataTable();
                    ssmdl.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
                    ssmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    ssmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
                    ssmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                    WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
                    ssmdl = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, ssmdl).Result;
                    if (ssmdl.Success == "200")
                    {
                        rtsp1 = WebAPIModelResponse.CameraRearUrl;
                        rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                        frontCameraImage = string.Empty;
                        rearCameraImage = string.Empty;
                        if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                        {
                            // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);
                            rearCameraImage = frontCameraImage;
                        }
                        else
                        {
                            // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);

                            // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            rearCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl2, CameraImageQuality.Good);
                        }

                    }
                    _conmdl.SSOID = WebAPIModelResponse.SsoId.ToString().Trim();
                    _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    _conmdl.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                    _conmdl.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                    _conmdl.WeightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                    _conmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                    _conmdl.MLNoId = Convert.ToInt64(0);
                    _conmdl.MLNo = txtcmbmlno.Text.ToString().Trim();
                    _conmdl.MineralName = txtcmbmineral.Text.ToString().Trim();
                    _conmdl.MineralId = Convert.ToInt64(0);
                    _conmdl.MineralUserFor = txtcmbmineraluserfor.Text.ToString().Trim();
                    _conmdl.RoyaltySchedule = txttxtroyaltyschrate.Text.ToString().Trim();
                    _conmdl.RoyaltyScheduleRate = txtcombroyalityschedule.Text.ToString().Trim();
                    _conmdl.CollectionThrough = combroyalityschedule.Text.ToString().Trim();
                    _conmdl.ConsigneeName = txtcmbconsigneename.Text;
                    _conmdl.ConsigneeId = Convert.ToInt64(0);
                    _conmdl.ConsigneeAddress = txtcmbconsigneeaddress.Text;
                    _conmdl.ConsigneeAddressId = Convert.ToInt64(0);
                    _conmdl.ConsigneeGSTNo = txtunconsigneegst.Text;
                    _conmdl.TransportDetails = txttansporttype.Text;
                    _conmdl.Vechicle = txtvechilenumber.Text;
                    //_conmdl.VechicleId = Convert.ToInt64(txtVehicle.Text);
                    //_conmdl.Unit = txtcapcity.Text.Trim();
                    _conmdl.ApproximateTime = txtunapproxtime.Text.Trim();
                    //_conmdl.Vechicleweight = txtwehicleweight.Text.Trim();
                    _conmdl.VechicleRegistration = txtvechilenumber.Text.Trim();
                    _conmdl.DriverMobileNo = txtdrivemobile.Text.Trim();
                    _conmdl.DriverName = txtundrivername.Text.Trim();
                    _conmdl.TareWeight = Convert.ToString(txtuntareweight.Text);
                    _conmdl.GrossWeight = Convert.ToString(txtunconfirmgross.Text);
                    _conmdl.TotalWeight = Convert.ToString(txtunnetweight.Text);//txtunnetweight
                    _conmdl.Comment = txtremarks.Text.Trim();
                    _conmdl.FirstCameraImageurl = frontCameraImage;
                    _conmdl.SecondCameraImage = rearCameraImage;
                    _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    _conmdl.IpAddress = checkcon.GetMacAddress();
                    _conmdl.Isactive = true;
                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    datacollection.Add("rawannaNo", Convert.ToString(txteRawannaNo.Text.Trim()));
                    //datacollection.Add("weight", Convert.ToString(txtgrossweight.Text));
                    datacollection.Add("weight", Convert.ToString(txtunconfirmgross.Text));
                    datacollection.Add("leaseId", Convert.ToString(WebAPIModelResponse.leaseID));
                    datacollection.Add("frontImage", frontCameraImage);
                    datacollection.Add("rearImage", rearCameraImage);
                    try
                    {
                        dtresult = await minesmart.Helper.Cls_PostMines.generateRawannaDetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_GenerateRawanna, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                        if (dtresult != null && dtresult.Rows.Count > 0)
                        {
                            if (dtresult.Rows[0]["status"].ToString() == "301")
                            {
                                ClearUnconfirmRawannadata();
                                MessageBox.Show(dtresult.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                            }
                            else
                            {
                                _conmdl.Authtoken = WebAPIModelResponse.Authtoken.ToString();
                                _conmdl.Rawannastatus = dtresult.Rows[0]["status"].ToString();
                                _conmdl.ERawannaNo = dtresult.Rows[0]["eRawannaNo"].ToString();
                                _conmdl.Royaltyamount = dtresult.Rows[0]["Royaltyamount"].ToString();
                                // _conmdl.RawannaCount = dtresult.Rows[0]["rawannaCount"].ToString();
                                //_conmdl.RawannaDate = Convert.ToDateTime(dtresult.Rows[0]["rawannaDate"].ToString());
                                WebAPIModelResponse.eRawannaNo = dtresult.Rows[0]["eRawannaNo"].ToString();
                                WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetConfirmERawanna/";
                                var responseDetails = WebAPI.PostinsertConfirmRawanna(WebAPIModelResponse.PostUrl, _conmdl).Result;
                                if (responseDetails.Status != "204")
                                {

                                    ClearUnconfirmRawannadata();
                                    if (chkdmgunconfirmprint.Checked)
                                    {
                                        //Print Dmg
                                        var targetURLDMG = minesmart.Helper.HttpServiceUrl.DMGravannaStatusURL + dtresult.Rows[0]["eRawannaNo"].ToString().Replace("\"", string.Empty).Trim().ToString();
                                        var psi = new ProcessStartInfo
                                        {
                                            FileName = targetURLDMG,
                                            UseShellExecute = true
                                        };
                                        Process.Start(psi);
                                    }
                                    if (chkunconfirmprint.Checked)
                                    {
                                        //Print
                                        var targetURLLOCAL = minesmart.Helper.HttpServiceUrl.PrintCWebsiteUrl + Comman.EncryptData(dtresult.Rows[0]["eRawannaNo"].ToString().Replace("\"", string.Empty).Trim().ToString());
                                        var psilocal = new ProcessStartInfo
                                        {
                                            FileName = targetURLLOCAL,
                                            UseShellExecute = true
                                        };
                                        Process.Start(psilocal);
                                    }

                                }
                                else
                                {
                                    ClearUnconfirmRawannadata();
                                    MessageBox.Show("Error Occured durning this Insert into table.Please Try again.", "Auth token");
                                }
                            }

                        }
                        else
                        {
                            ClearUnconfirmRawannadata();
                            MessageBox.Show("Error Occured durning this Insert into table.Please Try again.", "Error");

                        }


                    }
                    catch (Exception ex)
                    {
                        ClearUnconfirmRawannadata();
                        ErrorModel errormdl = new ErrorModel();
                        errormdl.DateLog = DateTime.Now.ToString();
                        errormdl.Exp = ex;
                        errormdl.Message = ex.Message;
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        MessageBox.Show(ex.ToString(), "Search");

                    }
                }
                else
                {
                    ClearUnconfirmRawannadata();
                    MessageBox.Show("Please Search the Rawanna Number.", "Search");
                }

            }
            catch (Exception ex)
            {
                ClearUnconfirmRawannadata();
                ErrorModel errormdl = new ErrorModel();
                errormdl.DateLog = DateTime.Now.ToString();
                errormdl.Exp = ex;
                errormdl.Message = ex.Message;
                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                MessageBox.Show(ex.ToString(), "Search");

            }
        }
        #endregion

        #region Invoice

        public void BindInvoicenumber()
        {
            DataTable dtn = new DataTable();
            SettingModel settingModal = new SettingModel();
            try
            {
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.PostUrl = "/Api/ErawaanaAPI/getinvoicenumber/";
                wb = WebAPI.PostGetInvoiceNumber(settingModal.PostUrl, settingModal).Result;
                if (WebAPIModelResponse.success == "200")
                {
                    txtinvoicenumber.Text = WebAPIModelResponse.InvoiceNo;

                }
            }
            catch (Exception ex)
            {
                // minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                System.Windows.Forms.MessageBox.Show(ex.Message);
                System.Windows.Forms.MessageBox.Show(ex.StackTrace);
                System.Windows.Forms.MessageBox.Show(ex.InnerException.ToString());
                //System.Windows.Forms.MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void BindInvoiceConsigneeName()
        {
            DataTable dtn = new DataTable();
            SettingModel settingModal = new SettingModel();
            try
            {
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.PostUrl = "/Api/ErawaanaAPI/getInvoiceConsigneeName/";
                dtn = WebAPI.PostGetInvoiceConsigneeName(settingModal.PostUrl, settingModal).Result;
                if (dtn != null && dtn.Rows.Count > 0)
                {
                    if (dtn.Rows[0]["Status"].ToString() == "210")
                    {
                        dtn = new DataTable();
                        dtn.Columns.Add("ConsigneeId", typeof(System.Int32));
                        dtn.Columns.Add("ConsigneeName", typeof(System.String));
                        DataRow row = dtn.NewRow();
                        row["ConsigneeId"] = "0";
                        row["ConsigneeName"] = "Select";
                        dtn.Rows.InsertAt(row, 0);
                        cmbconsigneeinov.DataSource = dtn.DefaultView;
                        cmbconsigneeinov.DisplayMember = "ConsigneeName";
                        cmbconsigneeinov.ValueMember = "ConsigneeId";
                    }
                    else
                    {
                        DataRow row = dtn.NewRow();
                        row["ConsigneeName"] = "Select";
                        dtn.Rows.InsertAt(row, 0);
                        cmbconsigneeinov.DataSource = dtn.DefaultView;
                        cmbconsigneeinov.DisplayMember = "ConsigneeName";
                        cmbconsigneeinov.ValueMember = "ConsigneeId";
                    }

                }
                else
                {

                    dtn.Columns.Add("ConsigneeId", typeof(System.Int32));
                    dtn.Columns.Add("ConsigneeName", typeof(System.String));
                    DataRow row = dtn.NewRow();
                    row["ConsigneeId"] = "0";
                    row["ConsigneeName"] = "Select";
                    dtn.Rows.InsertAt(row, 0);
                    cmbconsigneeinov.DataSource = dtn.DefaultView;
                    cmbconsigneeinov.DisplayMember = "ConsigneeName";
                    cmbconsigneeinov.ValueMember = "ConsigneeId";
                }

            }
            catch (Exception ex)
            {
                // minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                System.Windows.Forms.MessageBox.Show(ex.Message);
                System.Windows.Forms.MessageBox.Show(ex.StackTrace);
                System.Windows.Forms.MessageBox.Show(ex.InnerException.ToString());
                //System.Windows.Forms.MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        public async void BindTaxSlabCombo()
        {
            JObject returnJOBJECT = new JObject();
            DataTable dtslabList = new DataTable();
            SettingModel settingModal = new SettingModel();
            var newcomboresult = string.Empty;
            try
            {
                settingModal.PostUrl = "/Api/ErawaanaAPI/gettaxslab/";
                dtslabList = WebAPI.PostGettaxslab(settingModal.PostUrl, settingModal).Result;
                try
                {
                    if (dtslabList != null && dtslabList.Rows.Count > 0)
                    {
                        DataRow row = dtslabList.NewRow();
                        row["Tax_Slab"] = "Select";
                        dtslabList.Rows.InsertAt(row, 0);
                        cmbgstslab.DataSource = dtslabList.DefaultView;
                        cmbgstslab.DisplayMember = "Tax_Slab";
                        cmbgstslab.ValueMember = "TaxslabId";
                    }
                    else
                    {
                        DataRow row = dtslabList.NewRow();
                        row["Tax_Slab"] = "Select";
                        dtslabList.Rows.InsertAt(row, 0);
                        cmbgstslab.DataSource = dtslabList.DefaultView;
                        cmbgstslab.DisplayMember = "Tax_Slab";
                        cmbgstslab.ValueMember = "TaxslabId";
                    }
                }
                catch (Exception ex)
                {
                    ErrorModel errormdl = new ErrorModel();
                    if (ex.Message.ToString().Contains("Status"))
                    {
                        var parsed = JObject.Parse(ex.Message.ToString());
                        errormdl.DateLog = DateTime.Now.ToString();
                        //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                        errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }
                    else
                    {
                        errormdl.DateLog = DateTime.Now.ToString();
                        errormdl.Exp = ex;
                        errormdl.Message = ex.Message;
                        minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                    }
                    MessageBox.Show(ex.Message);

                }
            }
            catch (Exception ex)
            {

                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        private void txtitemqtys_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void txtitemamount_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }
        public static DataTable UDF_Convert_DataGridView_To_Datatable(DataGridView ImpGrd)
        {
            DataTable ExportDataTable = new DataTable();
            foreach (DataGridViewColumn col in ImpGrd.Columns)
            {
                ExportDataTable.Columns.Add(col.Name);
            }

            foreach (DataGridViewRow row in ImpGrd.Rows)
            {
                DataRow dRow = ExportDataTable.NewRow();
                foreach (DataGridViewCell cell in row.Cells)
                {
                    dRow[cell.ColumnIndex] = cell.Value;
                }
                ExportDataTable.Rows.Add(dRow);
            }

            return ExportDataTable;
        }



        private void dataGridView1_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            e.Control.KeyPress -= new KeyPressEventHandler(Column1_KeyPress);
            if (dataGridView1.CurrentCell.ColumnIndex == 3) //Desired Column
            {
                TextBox tb = e.Control as TextBox;
                if (tb != null)
                {
                    tb.KeyPress += new KeyPressEventHandler(Column1_KeyPress);
                }
            }
            if (dataGridView1.CurrentCell.ColumnIndex == 2) //Desired Column
            {
                TextBox tb = e.Control as TextBox;
                if (tb != null)
                {
                    tb.KeyPress += new KeyPressEventHandler(Column1_KeyPress);
                }
            }
        }
        private void Column1_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allowed only numeric value  ex.10
            //if (!char.IsControl(e.KeyChar)
            //    && !char.IsDigit(e.KeyChar))
            //{
            //    e.Handled = true;
            //}

            // allowed numeric and one dot  ex. 10.23
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar)
                 && e.KeyChar != '.')
            {
                e.Handled = true;
            }

            // only allow one decimal point
            if (e.KeyChar == '.'
                && (sender as TextBox).Text.IndexOf('.') > -1)
            {
                e.Handled = true;
            }
        }

        private void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            double price, quantity, total;

            if (dataGridView1.Rows[e.RowIndex].Cells[2].Value != null)
            {
                if (!double.TryParse(dataGridView1.Rows[e.RowIndex].Cells[2].Value.ToString(), out quantity))
                {
                    quantity = 0;
                }
            }
            else
            {
                quantity = 0;
            }
            if (dataGridView1.Rows[e.RowIndex].Cells[3].Value != null)
            {
                if (!double.TryParse(dataGridView1.Rows[e.RowIndex].Cells[3].Value.ToString(), out price))
                {
                    price = 0;
                }
            }
            else
            {
                price = 0;
            }


            total = quantity * price;
            dataGridView1.Rows[e.RowIndex].Cells["AMOUNT"].ReadOnly = true;
            dataGridView1.Rows[e.RowIndex].Cells["AMOUNT"].Value = string.Format("{0:0.000}", total);
            autosum();
        }

        private void dataGridView1_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView1_DefaultValuesNeeded(object sender, DataGridViewRowEventArgs e)
        {

        }

        private void dataGridView1_SelectionChanged(object sender, EventArgs e)
        {

        }
        private void autosum()
        {
            double sum = 0.00;
            var gstper = 0;
            for (int i = 0; i < dataGridView1.Rows.Count; ++i)
            {
                sum += Convert.ToDouble(dataGridView1.Rows[i].Cells[5].Value);
            }
            if (cmbgstslab.Text != "System.Data.DataRowView" && cmbgstslab.Text != "Select" && cmbgstslab.Text != "")
            {
                gstslabId = Convert.ToString(cmbgstslab.SelectedValue.ToString() == "System.Data.DataRowView" ? 0 : Convert.ToInt64(cmbgstslab.SelectedValue.ToString()));
                if (txtgistnumber.Text != "")
                {
                    var firmgstnumber = Convert.ToString(WebAPIModelResponse.FirmGSTNumber).Substring(0, 2);
                    var buyergstnumber = Convert.ToString(txtgistnumber.Text).Substring(0, 2);
                    if (buyergstnumber.ToString() != firmgstnumber.ToString())
                    {
                        lblcgsttax.Text = "CGST 0%";
                        lblsgsttax.Text = "SGST 0%";
                        if (gstslabId == "0")
                        {
                            gstper = 0;
                            lblIgst.Text = "IGST 0%";
                            lbligstamt.Text = "0.000";
                        }
                        else if (gstslabId == "1")
                        {
                            gstper = 0;
                            lblIgst.Text = "IGST 0%";
                            lbligstamt.Text = "0.000";
                        }
                        else if (gstslabId == "2")
                        {
                            gstper = 5;
                            lblIgst.Text = "IGST 5%";
                            lbligstamt.Text = "0.000";
                        }
                        else if (gstslabId == "3")
                        {
                            gstper = 12;
                            lblIgst.Text = "IGST 12%";
                            lbligstamt.Text = "0.000";
                        }
                        else if (gstslabId == "4")
                        {
                            gstper = 18;
                            lblIgst.Text = "IGST 18%";
                            lbligstamt.Text = "0.000";
                        }
                        else if (gstslabId == "5")
                        {
                            gstper = 28;
                            lblIgst.Text = "IGST 28%";
                            lbligstamt.Text = "0.000";
                        }
                        else
                        {

                        }
                        lblIgst.Visible = true;
                        lbligstamt.Visible = true;
                        lblsubtotalamt.Text = string.Format("{0:0.000}", sum);
                        lblcgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(0.000)));
                        lblsgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(0.000)));
                        lbligstamt.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum) * gstper / 100)).ToString();
                        lblfinaltotal.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum)) + (Convert.ToDouble(lbligstamt.Text)));
                    }
                    else
                    {
                        if (gstslabId == "0")
                        {
                            gstper = 0;
                            lblcgsttax.Text = "CGST 0%";
                            lblsgsttax.Text = "SGST 0%";
                        }
                        else if (gstslabId == "1")
                        {
                            gstper = 0;
                            lblcgsttax.Text = "CGST 0%";
                            lblsgsttax.Text = "SGST 0%";
                        }
                        else if (gstslabId == "2")
                        {
                            gstper = 5 / 2;
                            lblcgsttax.Text = "CGST 2.50%";
                            lblsgsttax.Text = "SGST 2.50%";
                        }
                        else if (gstslabId == "3")
                        {
                            gstper = 12 / 2;
                            lblcgsttax.Text = "CGST 6.0%";
                            lblsgsttax.Text = "SGST 6.0%";
                        }
                        else if (gstslabId == "4")
                        {
                            gstper = 18 / 2;
                            lblcgsttax.Text = "CGST 9.0%";
                            lblsgsttax.Text = "SGST 9.0%";
                        }
                        else if (gstslabId == "5")
                        {
                            gstper = 28 / 2;
                            lblcgsttax.Text = "CGST 14.0%";
                            lblsgsttax.Text = "SGST 14.0%";
                        }
                        else
                        {

                        }
                        lblsubtotalamt.Text = string.Format("{0:0.000}", sum);
                        lblcgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum) * gstper / 100));
                        lblsgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum) * gstper / 100)).ToString();
                        lblfinaltotal.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum)) + (Convert.ToDouble(lblcgst.Text) + Convert.ToDouble(lblsgst.Text)));
                    }
                }


                else
                {
                    if (gstslabId == "0")
                    {
                        gstper = 0;
                        lblcRemainBalance.Text = "CGST 0%";
                        lblsgsttax.Text = "SGST 0%";
                    }
                    else if (gstslabId == "1")
                    {
                        gstper = 0;
                        lblcRemainBalance.Text = "CGST 0%";
                        lblsgsttax.Text = "SGST 0%";
                    }
                    else if (gstslabId == "2")
                    {
                        gstper = 5 / 2;
                        lblcRemainBalance.Text = "CGST 2.50%";
                        lblsgsttax.Text = "SGST 2.50%";
                    }
                    else if (gstslabId == "3")
                    {
                        gstper = 12 / 2;
                        lblcRemainBalance.Text = "CGST 6.0%";
                        lblsgsttax.Text = "SGST 6.0%";
                    }
                    else if (gstslabId == "4")
                    {
                        gstper = 18 / 2;
                        lblcRemainBalance.Text = "CGST 9.0%";
                        lblsgsttax.Text = "SGST 9.0%";
                    }
                    else if (gstslabId == "5")
                    {
                        gstper = 28 / 2;
                        lblcRemainBalance.Text = "CGST 14.0%";
                        lblsgsttax.Text = "SGST 14.0%";
                    }
                    else
                    {

                    }
                    lblsubtotalamt.Text = string.Format("{0:0.000}", sum);
                    lblcgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum) * gstper / 100));
                    lblsgst.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum) * gstper / 100)).ToString();
                    lblfinaltotal.Text = string.Format("{0:0.000}", (Convert.ToDouble(sum)) + (Convert.ToDouble(lblcgst.Text) + Convert.ToDouble(lblsgst.Text)));
                }

            }
            else
            {
                lblIgst.Visible = false;
                lbligstamt.Visible = false;
            }


        }

        private void txtgistnumber_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtgistnumber.Text != "")
                {
                    if (WebAPIModelResponse.FirmGSTNumber != null && WebAPIModelResponse.FirmGSTNumber != "")
                    {

                        if (txtgistnumber.Text.Length > 2)
                        {
                            var firmgstnumber = Convert.ToString(WebAPIModelResponse.FirmGSTNumber).Substring(0, 2);
                            var buyergstnumber = Convert.ToString(txtgistnumber.Text).Substring(0, 2);
                            if (buyergstnumber.ToString() != firmgstnumber.ToString())
                            {

                                lblIgst.Visible = true;
                                lbligstamt.Visible = true;
                                autosum();
                            }
                            else
                            {
                                lblIgst.Visible = false;
                                lbligstamt.Visible = false;
                                autosum();
                            }
                        }
                    }


                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }

        }

        private void cmbgstslab_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                autosum();
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }
        private void btninvoicesubmit_Click(object sender, EventArgs e)
        {
            InvoiceModel invmdl = new InvoiceModel();
            DataTable dtresult = new DataTable();
            invmdl.TaxslabId = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
            invmdl.TaxslabName = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
            invmdl.TaxslabPer = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
            try
            {
                DataTable dtnew = new DataTable();
                dtnew.Columns.Add("InvoiceNo", typeof(string));
                dtnew.Columns.Add("Amount", typeof(string));
                this.btnSave.Text = "LOADING......";
                this.btnSave.Enabled = false;
                if (cmbgstslab.Text != "System.Data.DataRowView" && cmbgstslab.Text != "Select" && cmbgstslab.Text != "")
                {
                    if (txterawannanumber.Text != "")
                    {
                        if (txtdespatchthrough.Text != "")
                        {
                            if (txtvehiclenumber.Text != "")
                            {
                                if (cmbconsigneeinov.Text != "System.Data.DataRowView" && cmbconsigneeinov.Text != "Select" && cmbconsigneeinov.Text != "")
                                {

                                    if (txtgistnumber.Text != "")
                                    {
                                        DataTable dtinvoicdetail = UDF_Convert_DataGridView_To_Datatable(dataGridView1);
                                        invmdl.InvoiceDetail = dtinvoicdetail;
                                        invmdl.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                                        invmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                                        invmdl.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                                        invmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                                        invmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                        //invmdl.FirmName = txtname.Text;
                                        //invmdl.FirmAddress = txtaddress.Text;
                                        invmdl.InvoiceNumber = txtinvoicenumber.Text;
                                        invmdl.InvoiceDate = txtinvoicedate.Text;
                                        invmdl.ErawannaNumber = txterawannanumber.Text;
                                        invmdl.Dispatchthrough = txtdespatchthrough.Text;
                                        invmdl.Destination = txtdestination.Text;
                                        invmdl.VehicleNumber = txtvehiclenumber.Text;
                                        invmdl.BuyerName = cmbconsigneeinov.Text;
                                        invmdl.BuyerGSTNo = txtgistnumber.Text;
                                        invmdl.TaxslabId = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
                                        invmdl.TaxslabName = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
                                        invmdl.TaxslabPer = cmbgstslab.Text == "Nil" ? "0" : cmbgstslab.Text;
                                        invmdl.IGSTAmt = lbligstamt.Text;
                                        invmdl.CGSTAmt = lblcgst.Text;
                                        invmdl.SGSTAmt = lblsgst.Text;
                                        invmdl.SubtotalAmt = lblsubtotalamt.Text;
                                        invmdl.FinaltotalAmt = lblfinaltotal.Text;
                                        WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetInvoicedata/";
                                        dtresult = WebAPI.PostSetInvoicedata(WebAPIModelResponse.PostUrl, invmdl).Result;
                                        if (dtresult != null)
                                        {
                                            ClearRecordInvoice();
                                            DataRow row = dtnew.NewRow();
                                            row["InvoiceNo"] = dtresult.Rows[0]["INVOICEID"].ToString();
                                            row["Amount"] = dtresult.Rows[0]["TOTALAMOUNT"].ToString();
                                            dtnew.Rows.Add(row);
                                            this.btnSave.Text = "GENERATE";
                                            this.btnSave.Enabled = true;
                                            Cursor.Current = Cursors.Default;
                                            if (chkdmgtpass.Checked)
                                            {
                                                //Print Dmg
                                                var targetURLDMG = minesmart.Helper.HttpServiceUrl.PrintWebsiteInvoiceUrl + Comman.EncryptData(dtresult.Rows[0]["INVOICEID"].ToString());
                                                var psi = new ProcessStartInfo
                                                {
                                                    FileName = targetURLDMG,
                                                    UseShellExecute = true
                                                };
                                                Process.Start(psi);
                                            }
                                            //minesmart.Helper.Comman.handleShare(GetDictInvoice(dtnew), "Print Invoice");
                                        }
                                        else
                                        {
                                            this.btnSave.Text = "GENERATE";
                                            this.btnSave.Enabled = true;
                                            Cursor.Current = Cursors.Default;
                                            MessageBox.Show("Some error occure this process please try again.", "Error");
                                        }
                                    }
                                    else
                                    {
                                        this.btnSave.Text = "GENERATE";
                                        this.btnSave.Enabled = true;
                                        Cursor.Current = Cursors.Default;
                                        MessageBox.Show("Please Enter Buyer GST Number", "Buyer GST Number");
                                    }

                                }
                                else
                                {
                                    this.btnSave.Text = "GENERATE";
                                    this.btnSave.Enabled = true;
                                    Cursor.Current = Cursors.Default;
                                    MessageBox.Show("Please Enter Buyer Name", "Buyer Name");
                                }
                            }
                            else
                            {
                                this.btnSave.Text = "GENERATE";
                                this.btnSave.Enabled = true;
                                Cursor.Current = Cursors.Default;
                                MessageBox.Show("Please Enter Vehicle Number", "Vehicle Number");
                            }
                        }
                        else
                        {
                            this.btnSave.Text = "GENERATE";
                            this.btnSave.Enabled = true;
                            Cursor.Current = Cursors.Default;
                            MessageBox.Show("Please Enter Despatch Through", "Despatch Through");
                        }
                    }
                    else
                    {
                        this.btnSave.Text = "GENERATE";
                        this.btnSave.Enabled = true;
                        Cursor.Current = Cursors.Default;
                        MessageBox.Show("Please Enter Rawanna Number", "Rawanna Number");
                    }
                }
                else
                {
                    this.btnSave.Text = "GENERATE";
                    this.btnSave.Enabled = true;
                    Cursor.Current = Cursors.Default;
                    MessageBox.Show("Please Select Tax Details", "Tax Details");
                }
            }
            catch (Exception ex)
            {
                this.btnSave.Text = "GENERATE";
                this.btnSave.Enabled = true;
                Cursor.Current = Cursors.Default;
                this.btnSave.Enabled = true;
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }

            }
        }

        #endregion

        #region Weight
        public void BindProductItem()
        {
            try
            {
                DataTable dtvehi = new DataTable();
                DataTable dtvehilast = new DataTable();
                var strresult = string.Empty;
                SettingModel settingModal = new SettingModel();
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.PostUrl = "/Api/ErawaanaAPI/GetMineraltl/";
                dtvehi = WebAPI.PostGetProductItemdtl(settingModal.PostUrl, settingModal).Result;
                if (dtvehi != null)
                {

                    if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "200")
                    {
                        DataRow row = dtvehi.NewRow();
                        row["MINERALNAME"] = "Select";
                        dtvehi.Rows.InsertAt(row, 0);
                        cmbmineralws.DisplayMember = "MINERALNAME";
                        cmbmineralws.DataSource = dtvehi;
                    }
                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);
            }
        }

        public void BindProductItem1()
        {
            try
            {
                DataTable dtvehi = new DataTable();
                DataTable dtvehilast = new DataTable();
                var strresult = string.Empty;
                SettingModel settingModal = new SettingModel();
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.PostUrl = "/Api/ErawaanaAPI/GetMineraltl/";
                dtvehi = WebAPI.PostGetProductItemdtl(settingModal.PostUrl, settingModal).Result;
                if (dtvehi != null)
                {

                    if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "200")
                    {
                        DataRow row = dtvehi.NewRow();
                        row["MINERALNAME"] = "Select";
                        dtvehi.Rows.InsertAt(row, 0);
                        cmbmineralws.DisplayMember = "MINERALNAME";
                        cmbmineralws.DataSource = dtvehi;
                        cmbmineralws.Text = Convert.ToString(Properties.Settings.Default["cmbproductname"]);

                    }
                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);
            }
        }

        void Bindweightslip()
        {
            DataTable dt = new DataTable();

            var strresult = string.Empty;
            SettingModel settingModal = new SettingModel();
            settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
            settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
            settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
            settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
            settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
            settingModal.PostUrl = "/Api/ErawaanaAPI/GetLatestWeightSlip/";
            dt = WebAPI.PostGetLatestWeightSlip(settingModal.PostUrl, settingModal).Result;
            if (dt != null && dt.Rows.Count > 0)
            {
                dataGridView4.Columns.Clear();
                dataGridView4.DataSource = dt.DefaultView;
                dataGridView4.Columns[0].Width = 80;// The id column 
                dataGridView4.Columns[1].Width = 100;
                dataGridView4.Columns[2].Width = 80;
                dataGridView4.Columns.Add(cmdbtn);
                cmdbtn.HeaderText = "Print";
                cmdbtn.Text = "Print";
                cmdbtn.Name = "Button";
                cmdbtn.UseColumnTextForButtonValue = true;

            }
        }
        void LoadTicketNumber()
        {
            DataTable dt = new DataTable();
            var strresult = string.Empty;
            SettingModel settingModal = new SettingModel();
            settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
            settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
            settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
            settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
            settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
            settingModal.PostUrl = "/Api/ErawaanaAPI/GetTicketNumber/";
            dt = WebAPI.PostGetTicketNumber(settingModal.PostUrl, settingModal).Result;
            if (dt != null && dt.Rows.Count > 0)
            {
                if (dt.Rows.Count > 0)
                {
                    txtticketnumber.Text = dt.Rows[0]["TicketNumber"].ToString();
                    txtticketnumber.ReadOnly = true;
                    txtticketnumber.Enabled = false;
                }
            }
        }
        private void btnSaveWeightSlip_Click(object sender, EventArgs e)
        {
            this.btnSaveWeightSlip.Text = "Loading ......";
            this.btnSaveWeightSlip.Enabled = false;
            SettingModel settingModal = new SettingModel();
            string finalerrormsg = string.Empty;
            bool finalerrorResult = true;
            settingModal.TicketNumber = txtticketnumber.Text;
            settingModal.WSDate = txtwsdate.Text;
            settingModal.Vehicleweight = this.txtVehicleNows.Text;
            settingModal.MineralId = this.cmbmineralws.Text;
            settingModal.MineralName = this.cmbmineralws.Text;
            settingModal.DriverName = this.txtdrivernamws.Text;
            settingModal.DriverMobile = this.txtdrivemobilenows.Text;
            settingModal.TareWeight = this.txtwghttareweight.Text;
            settingModal.GrossWeight = this.txtwghtgross.Text;
            settingModal.TotalWeight = this.txtwghtnetweight.Text;
            settingModal.Remark = this.txtremarkweightslip.Text;
            settingModal.VehicleNo = txtVehicleNows.Text;
            try
            {
                if (!chkissaved.Checked)
                {
                    if (cmbmineralws.Text == "Select")
                    {
                        finalerrormsg = "Please Select Mineral Details";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.Vehicleweight))
                    {
                        finalerrormsg = "Please Enter Vehicle Weight Details Front";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.DriverName))
                    {
                        finalerrormsg = "Please Enter Driver Details Name";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.DriverMobile))
                    {
                        finalerrormsg = "Please Enter Driver Mobile Number";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.TareWeight))
                    {
                        finalerrormsg = "Please Enter Tere Weight";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.GrossWeight))
                    {
                        finalerrormsg = "Please Enter Gross Weight";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (settingModal.GrossWeight.Contains("-"))
                    {
                        finalerrormsg = "Negative weight Not Allow";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    if (finalerrorResult)
                    {
                        var input_strfrnt = string.Empty;
                        var input_strbck = string.Empty;

                        DataTable dtcdtl = new DataTable();
                        dtcdtl.Columns.Add("TicketNumber", typeof(string));
                        dtcdtl.Columns.Add("VehicleNo", typeof(string));
                        settingModal.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
                        settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
                        settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                        WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
                        settingModal = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, settingModal).Result;
                        if (settingModal.Success == "200")
                        {

                            rtsp1 = WebAPIModelResponse.CameraRearUrl;
                            rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                            if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                            {
                                Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                frontCameraImage = minesmart.Helper.CaptureImage.ToBase64(frontImage);
                                rearCameraImage = frontCameraImage;
                            }
                            else
                            {
                                //frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image(uc.streamPlayerControl1, CameraImageQuality.Good);
                                frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);

                                // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                rearCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl2, CameraImageQuality.Good);

                                //Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                // frontCameraImage = minesmart.Helper.CaptureImage.ToBase64(frontImage);

                                // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                //rearCameraImage = minesmart.Helper.CaptureImage.ToBase64(rearImage);
                            }
                        }
                        string isprintdtl = "No";
                        if (chkprintdtl.Checked)
                        {
                            isprintdtl = "Yes";
                        }
                        else
                        {
                            isprintdtl = "No";
                        }
                        settingModal.CameraFrontUrl = frontCameraImage;
                        settingModal.CameraRearUrl = rearCameraImage;
                        // settingModal. = Convert.ToString(txtVehicleNows.Text);
                        settingModal.VehicleNo = Convert.ToString(txtVehicleNows.Text);
                        settingModal.MineralId = Convert.ToString(cmbmineralws.SelectedValue);
                        settingModal.MineralName = Convert.ToString(cmbmineralws.Text);
                        settingModal.DriverMobile = Convert.ToString(txtdrivemobilenows.Text);
                        settingModal.DriverName = Convert.ToString(txtdrivernamws.Text);
                        settingModal.TareWeight = Convert.ToString(txtwghttareweight.Text);
                        settingModal.GrossWeight = Convert.ToString(txtwghtgross.Text);
                        settingModal.TotalWeight = Convert.ToString(txtwghtnetweight.Text);
                        settingModal.Remark = Convert.ToString(txtremarkweightslip.Text);
                        settingModal.WSDate = Convert.ToString(txtwsdate.Text);
                        settingModal.PrintDetails = Convert.ToString(isprintdtl);
                        settingModal.TicketNumber = Convert.ToString(txtticketnumber.Text);
                        settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                        settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                        settingModal.weightbridge = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                        settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                        settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                        settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                        settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        settingModal.PostUrl = "/Api/ErawaanaAPI/SetTempWeightSlipSetting/";
                        settingModal = WebAPI.PostSetTempWeightSlipSetting(settingModal.PostUrl, settingModal).Result;
                        if (settingModal.Success == "200")
                        {

                            DataRow dr = dtcdtl.NewRow();
                            dr = dtcdtl.NewRow();
                            dr["TicketNumber"] = Convert.ToString(txtticketnumber.Text);
                            dr["VehicleNo"] = Convert.ToString("TempWeightSlip");
                            dtcdtl.Rows.Add(dr);

                            var targetURL = minesmart.Helper.HttpServiceUrl.PrintTempWeightSlipWebsiteUrl + Comman.EncryptData(Convert.ToString(txtticketnumber.Text).Replace("\"", string.Empty).Trim().ToString()) + "&UId=" + Comman.EncryptData(WebAPIModelResponse.UserCredtentialId);
                            var psi = new ProcessStartInfo
                            {
                                FileName = targetURL,
                                UseShellExecute = true
                            };
                            Process.Start(psi);
                            ClearAllDataWeightSlip();
                            //minesmart.Helper.Comman.handleShare(GetDictInvoice(dtcdtl), "TempWeightSlip");
                        }
                        else
                        {
                            this.btnSaveWeightSlip.Text = "PRINT";
                            this.btnSaveWeightSlip.Enabled = true;
                            System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                        }
                    }
                }
                else
                {
                    if (cmbmineralws.Text == "Select")
                    {
                        finalerrormsg = "Please Select Mineral Details";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.Vehicleweight))
                    {
                        finalerrormsg = "Please Enter Vehicle Weight Details Front";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.DriverName))
                    {
                        finalerrormsg = "Please Enter Driver Details Name";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.DriverMobile))
                    {
                        finalerrormsg = "Please Enter Driver Mobile Number";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.TareWeight))
                    {
                        finalerrormsg = "Please Enter Tere Weight";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.GrossWeight))
                    {
                        finalerrormsg = "Please Enter Gross Weight";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (settingModal.GrossWeight.Contains("-"))
                    {
                        finalerrormsg = "Negative weight Not Allow";
                        finalerrorResult = false;
                        this.btnSaveWeightSlip.Text = "PRINT";
                        this.btnSaveWeightSlip.Enabled = true;
                        System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    if (finalerrorResult)
                    {
                        var input_strfrnt = string.Empty;
                        var input_strbck = string.Empty;

                        DataTable dtcdtl = new DataTable();
                        dtcdtl.Columns.Add("TicketNumber", typeof(string));
                        dtcdtl.Columns.Add("VehicleNo", typeof(string));
                        settingModal.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
                        settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
                        settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                        WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
                        settingModal = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, settingModal).Result;
                        if (settingModal.Success == "200")
                        {

                            rtsp1 = WebAPIModelResponse.CameraRearUrl;
                            rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                            if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                            {
                                Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                frontCameraImage = minesmart.Helper.CaptureImage.ToBase64(frontImage);
                                rearCameraImage = frontCameraImage;
                            }
                            else
                            {
                                Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                frontCameraImage = minesmart.Helper.CaptureImage.ToBase64(frontImage);

                                Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                                rearCameraImage = minesmart.Helper.CaptureImage.ToBase64(rearImage);
                            }
                        }
                        string isprintdtl = "No";
                        if (chkprintdtl.Checked)
                        {
                            isprintdtl = "Yes";
                        }
                        else
                        {
                            isprintdtl = "No";
                        }
                        settingModal.CameraFrontUrl = frontCameraImage;
                        settingModal.CameraRearUrl = rearCameraImage;
                        // settingModal. = Convert.ToString(txtVehicleNows.Text);
                        settingModal.VehicleNo = Convert.ToString(txtVehicleNows.Text);
                        settingModal.MineralId = Convert.ToString(cmbmineralws.SelectedValue);
                        settingModal.MineralName = Convert.ToString(cmbmineralws.Text);
                        settingModal.DriverMobile = Convert.ToString(txtdrivemobilenows.Text);
                        settingModal.DriverName = Convert.ToString(txtdrivernamws.Text);
                        settingModal.TareWeight = Convert.ToString(txtwghttareweight.Text);
                        settingModal.GrossWeight = Convert.ToString(txtwghtgross.Text);
                        settingModal.TotalWeight = Convert.ToString(txtwghtnetweight.Text);
                        settingModal.Remark = Convert.ToString(txtremarkweightslip.Text);
                        settingModal.WSDate = Convert.ToString(txtwsdate.Text);
                        settingModal.PrintDetails = Convert.ToString(isprintdtl);
                        settingModal.TicketNumber = Convert.ToString(txtticketnumber.Text);
                        settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                        settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                        settingModal.weightbridge = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                        settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                        settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                        settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                        settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        settingModal.PostUrl = "/Api/ErawaanaAPI/SetWeightSlipSetting/";
                        settingModal = WebAPI.PostSetWeightSlipSetting(settingModal.PostUrl, settingModal).Result;
                        if (settingModal.Success == "200")
                        {

                            DataRow dr = dtcdtl.NewRow();
                            dr = dtcdtl.NewRow();
                            dr["TicketNumber"] = Convert.ToString(txtticketnumber.Text);
                            dr["VehicleNo"] = Convert.ToString("WeightSlip");
                            dtcdtl.Rows.Add(dr);
                            var targetURL = minesmart.Helper.HttpServiceUrl.PrintWeightSlipWebsiteUrl + Comman.EncryptData(Convert.ToString(txtticketnumber.Text).Replace("\"", string.Empty).Trim().ToString()) + "&UId=" + Comman.EncryptData(WebAPIModelResponse.UserCredtentialId);
                            var psi = new ProcessStartInfo
                            {
                                FileName = targetURL,
                                UseShellExecute = true
                            };
                            Process.Start(psi);
                            ClearAllDataWeightSlip();

                            //minesmart.Helper.Comman.handleShare(GetDictInvoice(dtcdtl), "WeightSlip");
                        }
                        else
                        {
                            this.btnSaveWeightSlip.Text = "PRINT";
                            this.btnSaveWeightSlip.Enabled = true;
                            System.Windows.Forms.MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                this.btnSaveWeightSlip.Text = "PRINT";
                this.btnSaveWeightSlip.Enabled = true;
                // Display Message  
                System.Windows.Forms.MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");

            }
        }

        private void txtwghttareweight_TextChanged(object sender, EventArgs e)
        {
            if (txtwghttareweight.Text != "" && txtwghttareweight.Text != null)
            {
                var wgnet = string.Format("{0:0.000}", (Convert.ToDouble(txtwghtgross.Text == "" ? "0" : txtwghtgross.Text) - Convert.ToDouble(txtwghttareweight.Text == "" ? "0" : txtwghttareweight.Text)));
                if (wgnet.Contains("-"))
                    txtwghtnetweight.Text = "0.00";
                else
                    txtwghtnetweight.Text = wgnet;
                //txtwghtnetweight.ReadOnly = true;
            }
        }
        #endregion

        #region Setting
        public void BindDatabitCombo()
        {
            List<Databits> DatabitsList = new List<Databits>();
            DatabitsList.Add(new Databits { Id = 0, name = "None" });
            DatabitsList.Add(new Databits { Id = 1, name = "8" });
            DatabitsList.Add(new Databits { Id = 2, name = "16" });
            cmbdatabits.DataSource = DatabitsList;
            cmbdatabits.DisplayMember = "name";
            cmbdatabits.ValueMember = "Id";
        }
        public void BindIsReversedCombo()
        {
            List<IsReverseds> DataIsReversedsList = new List<IsReverseds>();
            DataIsReversedsList.Add(new IsReverseds { Id = 0, name = "Yes" });
            DataIsReversedsList.Add(new IsReverseds { Id = 1, name = "No" });
            cmbisreversed.DataSource = DataIsReversedsList;
            cmbisreversed.DisplayMember = "name";
            cmbisreversed.ValueMember = "Id";
        }

        public void BindStopBitsCombo()
        {
            List<StopBit> DataStopBitList = new List<StopBit>();
            DataStopBitList.Add(new StopBit { Id = 0, name = "None" });
            DataStopBitList.Add(new StopBit { Id = 1, name = "One" });
            DataStopBitList.Add(new StopBit { Id = 2, name = "Two" });
            DataStopBitList.Add(new StopBit { Id = 3, name = "OnePointFive" });
            cmbstopbits.DataSource = DataStopBitList;
            cmbstopbits.DisplayMember = "name";
            cmbstopbits.ValueMember = "Id";
        }
        public void bindsystemtypeData()
        {
            try
            {
                Dictionary<string, string> test = new Dictionary<string, string>();
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.PostUrl = "/Api/ErawaanaAPINew/Getsystemtypesetting/";
                dtn = WebAPI.Postsystemtypesetting(_settingModal.PostUrl, _settingModal).Result;
                //DataTable dt = AccessDatabase.GetData("SELECT COUNTRYID [Key],COUNTRYNAME Value FROM MST_COUNTRY WHERE ISACTIVE='1'");
                // test.Add("0", "Select");
                for (int i = 0; i < dtn.Rows.Count; i++)
                {
                    test.Add(dtn.Rows[i][0].ToString(), dtn.Rows[i][1].ToString());
                }
                cmbsystemtype.DataSource = new BindingSource(test, null);
                cmbsystemtype.DisplayMember = "Value";
                cmbsystemtype.ValueMember = "Key";
                cmbsystemtype.SelectedIndex = 0;
            }
            catch (Exception ex)
            {

            }
        }
        public void bindsystemmodelData(string stype)
        {
            try
            {
                //Getsystemmodelsetting
                Dictionary<string, string> test = new Dictionary<string, string>();
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.DeviceType = stype;
                _settingModal.PostUrl = "/Api/ErawaanaAPINew/Getsystemmodelsetting/";
                dtn = WebAPI.Postsystemmodelsetting(_settingModal.PostUrl, _settingModal).Result;
                for (int i = 0; i < dtn.Rows.Count; i++)
                {
                    test.Add(dtn.Rows[i][0].ToString(), dtn.Rows[i][1].ToString());
                }
                cmbsystemmodel.DataSource = new BindingSource(test, null);
                cmbsystemmodel.DisplayMember = "Value";
                cmbsystemmodel.ValueMember = "Key";
                cmbsystemmodel.SelectedIndex = 0;
            }
            catch (Exception ex)
            {

            }
        }

        public void bindsystemmodelData()
        {
            try
            {
                //Getsystemmodelsetting
                Dictionary<string, string> test = new Dictionary<string, string>();
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.PostUrl = "/Api/ErawaanaAPINew/Getsystemmodelallsetting/";
                dtn = WebAPI.PostGetsystemmodelallsetting(_settingModal.PostUrl, _settingModal).Result;
                for (int i = 0; i < dtn.Rows.Count; i++)
                {
                    test.Add(dtn.Rows[i][0].ToString(), dtn.Rows[i][1].ToString());
                }
                cmbsystemmodel.DataSource = new BindingSource(test, null);
                cmbsystemmodel.DisplayMember = "Value";
                cmbsystemmodel.ValueMember = "Key";
                cmbsystemmodel.SelectedIndex = 0;
            }
            catch (Exception ex)
            {

            }
        }
        public void BindParitysCombo()
        {
            List<Paritys> ParitysList = new List<Paritys>();
            ParitysList.Add(new Paritys { Id = 0, name = "None" });
            ParitysList.Add(new Paritys { Id = 1, name = "Even" });
            ParitysList.Add(new Paritys { Id = 2, name = "Odd" });
            ParitysList.Add(new Paritys { Id = 3, name = "Mark" });
            ParitysList.Add(new Paritys { Id = 4, name = "Space" });
            cmbparity.DataSource = ParitysList;
            cmbparity.DisplayMember = "name";
            cmbparity.ValueMember = "Id";
        }
        public void BindBaudRateCombo()
        {
            List<BaudRate> baudrateList = new List<BaudRate>();
            baudrateList.Add(new BaudRate { Id = 0, name = "None" });
            baudrateList.Add(new BaudRate { Id = 1, name = "1200" });
            baudrateList.Add(new BaudRate { Id = 2, name = "2400" });
            baudrateList.Add(new BaudRate { Id = 3, name = "4800" });
            baudrateList.Add(new BaudRate { Id = 4, name = "9600" });
            baudrateList.Add(new BaudRate { Id = 5, name = "14400" });
            baudrateList.Add(new BaudRate { Id = 6, name = "19200" });
            baudrateList.Add(new BaudRate { Id = 7, name = "38400" });
            baudrateList.Add(new BaudRate { Id = 8, name = "57600" });
            baudrateList.Add(new BaudRate { Id = 9, name = "115200" });
            baudrateList.Add(new BaudRate { Id = 10, name = "128000" });
            baudrateList.Add(new BaudRate { Id = 11, name = "256000" });
            combbaudrate.DataSource = baudrateList;
            combbaudrate.DisplayMember = "name";
            combbaudrate.ValueMember = "Id";
        }


        private void btnserialport_Click(object sender, EventArgs e)
        {
            SettingModel settingModal = new SettingModel();
            DataTable dtnew = new DataTable();
            try
            {
                //txtname = richTextBox4.Text;
                //richTextBox1.Text = serial_data(cmbportname.Text, Convert.ToInt16(combbaudrate.Text), Convert.ToInt16(cmbdatabits.Text));
                _spManager = new weightReader();
                SettingModel mySerialSettings = _spManager.CurrentSerialSettings;
                //serialSettingsBindingSource.DataSource = mySerialSettings;
                Properties.Settings.Default["weighBridgeReader"] = txtreadercode.Text;
                Properties.Settings.Default["isReversedDrop"] = cmbisreversed.Text;
                Properties.Settings.Default.Save();
                if (cmbstopbits.SelectedIndex.ToString() == "0")
                    _settingModal.StopBits = "None";
                else if (cmbstopbits.SelectedIndex.ToString() == "1")
                    _settingModal.StopBits = "One";
                else if (cmbstopbits.SelectedIndex.ToString() == "2")
                    _settingModal.StopBits = "Two";
                else
                    _settingModal.StopBits = "3";

                if (combbaudrate.SelectedIndex.ToString() == "0")
                    _settingModal.RatesBaud = "None";
                else if (combbaudrate.SelectedIndex.ToString() == "1")
                    _settingModal.RatesBaud = "1200";
                else if (combbaudrate.SelectedIndex.ToString() == "2")
                    _settingModal.RatesBaud = "2400";
                else if (combbaudrate.SelectedIndex.ToString() == "3")
                    _settingModal.RatesBaud = "4800";
                else if (combbaudrate.SelectedIndex.ToString() == "4")
                    _settingModal.RatesBaud = "9600";
                else if (combbaudrate.SelectedIndex.ToString() == "5")
                    _settingModal.RatesBaud = "14400";
                else if (combbaudrate.SelectedIndex.ToString() == "6")
                    _settingModal.RatesBaud = "19200";
                else if (combbaudrate.SelectedIndex.ToString() == "7")
                    _settingModal.RatesBaud = "38400";
                else if (combbaudrate.SelectedIndex.ToString() == "8")
                    _settingModal.RatesBaud = "57600";
                else if (combbaudrate.SelectedIndex.ToString() == "9")
                    _settingModal.RatesBaud = "115200";
                else if (combbaudrate.SelectedIndex.ToString() == "10")
                    _settingModal.RatesBaud = "128000";
                else
                    _settingModal.RatesBaud = "11";

                if (cmbdatabits.SelectedIndex.ToString() == "None")
                    _settingModal.DataBits = "0";
                else if (cmbdatabits.SelectedIndex.ToString() == "1")
                    _settingModal.DataBits = "8";
                else
                    _settingModal.DataBits = "16";

                if (cmbparity.SelectedIndex.ToString() == "0")
                    _settingModal.Parity = "None";
                else if (cmbparity.SelectedIndex.ToString() == "1")
                    _settingModal.Parity = "Even";
                else if (cmbparity.SelectedIndex.ToString() == "2")
                    _settingModal.Parity = "Odd";
                else if (cmbparity.SelectedIndex.ToString() == "3")
                    _settingModal.Parity = "Mark";
                else
                    _settingModal.Parity = "4";

                if (cmbisreversed.SelectedIndex.ToString() == "1")
                    _settingModal.IsReversed = "1";
                else
                    _settingModal.IsReversed = "0";
                mySerialSettings.RatesBaud = _settingModal.RatesBaud.ToString();
                mySerialSettings.DataBits = _settingModal.DataBits.ToString();
                mySerialSettings.Parity = _settingModal.Parity.ToString();
                mySerialSettings.StopBits = _settingModal.StopBits.ToString();
                mySerialSettings.IsReversed = cmbisreversed.SelectedIndex.ToString();
                mySerialSettings.ReaderCode = txtreadercode.Text;
                mySerialSettings.SytemType = txtsystemtype.Text;
                mySerialSettings.PortName = cmbportname.Text;

                try
                {

                    var finalerrorResult = true;
                    var finalerrormsg = string.Empty;
                    var IsResult = string.Empty;
                    // Initialization.  
                    // settingModal.DeviceMode = this.cmbdevicename.Text;
                    settingModal.Authtoken = checkcon.GetMacAddress();
                    settingModal.PortName = cmbportname.Text;
                    settingModal.BaudRate = combbaudrate.Text;
                    settingModal.DataBits = cmbdatabits.Text;
                    settingModal.Parity = cmbparity.Text;
                    settingModal.StopBits = cmbstopbits.Text;
                    settingModal.ReaderCode = txtreadercode.Text;
                    settingModal.SytemType = txtsystemtype.Text;
                    settingModal.DeviceType = cmbsystemtype.Text;
                    settingModal.DeviceMode = cmbsystemmodel.Text;
                    settingModal.IsReversed = mySerialSettings.IsReversed;
                    settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                    settingModal.weightbridge = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                    settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                    settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                    settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                    settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    // Verification.  
                    if (string.IsNullOrEmpty(settingModal.PortName))
                    {
                        finalerrormsg = "Please Enter Port Name";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.BaudRate))
                    {
                        finalerrormsg = "Please Enter Baud Rate";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.DataBits))
                    {
                        finalerrormsg = "Please Enter DataBites";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.Parity))
                    {
                        finalerrormsg = "Please Enter Parity";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.StopBits))
                    {
                        finalerrormsg = "Please Enter Stop Bits";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.ReaderCode))
                    {
                        finalerrormsg = "Please Enter Reader Code";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.SytemType))
                    {
                        finalerrormsg = "Please Enter System Type";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    else if (string.IsNullOrEmpty(settingModal.IsReversed))
                    {
                        finalerrormsg = "Please Enter Is Reversed";
                        finalerrorResult = false;
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    if (finalerrorResult)
                    {
                        try
                        {
                            settingModal.PostUrl = "/Api/ErawaanaAPI/SetSerialportsetting/";
                            var responseDetails = WebAPI.PostPortSetting(settingModal.PostUrl, settingModal).Result;
                            if (responseDetails.Success == "200")
                            {

                                WebAPIModelResponse.baudrate = Convert.ToString(responseDetails.RatesBaud);
                                WebAPIModelResponse.CombPortName = Convert.ToString(responseDetails.PortName);
                                WebAPIModelResponse.Parity = Convert.ToString(responseDetails.Parity);
                                WebAPIModelResponse.DataBits = Convert.ToString(responseDetails.DataBits);
                                WebAPIModelResponse.StopBits = Convert.ToString(responseDetails.StopBits);
                                WebAPIModelResponse.Isreversed = Convert.ToString(responseDetails.IsReversed);
                                WebAPIModelResponse.ReaderCode = Convert.ToString(responseDetails.ReaderCode);
                                WebAPIModelResponse.SytemType = Convert.ToString(txtsystemtype.Text);
                                _spManager.Dispose();
                                _spManager._serialPortType = Convert.ToInt32(WebAPIModelResponse.SytemType);
                                _spManager.StartListening();
                                uc.Refresh();
                                MessageBox.Show("Record Added Sucessfully.", "Success", MessageBoxButtons.OK);
                            }
                            else
                            {
                                MessageBox.Show("Some Error occured this process", "Error", MessageBoxButtons.OK);
                                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Some Error occured this process");
                            }
                            CheckAllreadysetting();
                        }
                        catch (Exception ex)
                        {

                            // Display Message  
                            MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");
                        }
                    }
                    else
                    {
                        MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", finalerrormsg);
                    }

                }
                catch (Exception ex)
                {
                    // Display Message  
                    MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");

                }
            }
            catch (Exception ex)
            {
                // Display Message 
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");

            }
        }
        private void btnCompanydtl_Click(object sender, EventArgs e)
        {
            DataTable dtnew = new DataTable();
            SettingModel settingModal = new SettingModel();
            string finalerrormsg = string.Empty;
            bool finalerrorResult = true;
            settingModal.WBCompanyName = this.txtcompanyname.Text;
            settingModal.WBMobileNumber = this.txtmobile.Text;
            settingModal.WBAddress = this.txtaddress.Text;
            settingModal.WBBridgeNumber = this.txtbridgenumber.Text;
            settingModal.WBEmailId = this.txtemailaddress.Text;
            try
            {

                if (string.IsNullOrEmpty(settingModal.WBCompanyName))
                {
                    finalerrormsg = "Please Enter Company Name";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (string.IsNullOrEmpty(settingModal.WBEmailId))
                {
                    finalerrormsg = "Please Enter Company Email Id";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (string.IsNullOrEmpty(settingModal.WBMobileNumber))
                {
                    finalerrormsg = "Please Enter Company Mobile Number";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (string.IsNullOrEmpty(settingModal.WBBridgeNumber))
                {
                    finalerrormsg = "Please Enter Company Bridge  Number";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (string.IsNullOrEmpty(settingModal.WBAddress))
                {
                    finalerrormsg = "Please Enter Company Address";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (finalerrorResult)
                {
                    settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                    settingModal.weightbridge = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                    settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                    settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                    settingModal.WBAddress = txtaddress.Text;
                    settingModal.WBBridgeNumber = txtbridgenumber.Text;
                    settingModal.WBCompanyName = txtcompanyname.Text;
                    settingModal.WBEmailId = txtemailaddress.Text;
                    settingModal.WBMobileNumber = txtmobile.Text;
                    settingModal.PostUrl = "/Api/ErawaanaAPI/Setcompanydetailsetting/";
                    dtnew = WebAPI.PostCompanydetailsetting(settingModal.PostUrl, settingModal).Result;
                    if (dtnew.Rows[0]["Status"].ToString() == "200")
                        MessageBox.Show("Record Added Sucessfully.", "Success", MessageBoxButtons.OK);
                    else
                    {
                        MessageBox.Show("Some Error occured during process .", "Error", MessageBoxButtons.OK);
                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");
                    }

                }
                else
                {
                    MessageBox.Show("Some Error occured during process .", "Error", MessageBoxButtons.OK);
                    minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");
                }
                GetCompanySetting();
                CheckAllreadysetting();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later.");

            }
        }

        private void btncameradtl_Click(object sender, EventArgs e)
        {
            SettingModel settingModal = new SettingModel();
            string finalerrormsg = string.Empty;
            bool finalerrorResult = true;
            settingModal.CameraRearUrl = this.txtrearcameraurl.Text;
            settingModal.CameraFrontUrl = this.txtfronturl.Text;
            try
            {
                if (string.IsNullOrEmpty(settingModal.CameraFrontUrl))
                {
                    finalerrormsg = "Please Enter Camera Details Front";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (string.IsNullOrEmpty(settingModal.CameraRearUrl))
                {
                    finalerrormsg = "Please Enter Camera Details Rear";
                    finalerrorResult = false;
                    MessageBox.Show(finalerrormsg, "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                if (finalerrorResult)
                {
                    settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                    settingModal.weightbridge = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                    settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                    settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                    settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                    settingModal.CameraFrontUrl = txtfronturl.Text;
                    settingModal.CameraRearUrl = txtrearcameraurl.Text;
                    settingModal.CameraIPAddress = txtfrontcameraipaddress.Text;
                    settingModal.CameraUserName = txtfrontusername.Text;
                    settingModal.CameraUserPassword = txtfrontpassword.Text;
                    settingModal.CamerabackIPAddress = txtbackcameraIp.Text;
                    settingModal.CamerabackUserName = txtbackusername.Text;
                    settingModal.CamerabackUserPassword = txtbackpassword.Text;
                    settingModal.PostUrl = "/Api/ErawaanaAPI/SetCammeraSetting/";
                    settingModal = WebAPI.PostCameraSetting(settingModal.PostUrl, settingModal).Result;
                    if (settingModal.Success == "200")
                    {
                        MessageBox.Show("Record Successfully Added", "Success", MessageBoxButtons.OK, MessageBoxIcon.None);
                    }
                    else
                    {
                        MessageBox.Show("Some Error occured this Process Please try Again", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", finalerrormsg);
                    }
                }
                GetCamerasetting();
                //CheckAllreadysetting();
                // this.Refresh();

            }
            catch (Exception ex)
            {
                // Display Message  
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", finalerrormsg);

            }
        }

        public void GetCompanySetting()
        {
            try
            {
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                _settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetCompanysetting/";
                dtn = WebAPI.PostCompanySetting(_settingModal.PostUrl, _settingModal).Result;
                if (dtn.Rows[0]["Status"].ToString() == "200")
                {

                    txtaddress.Text = dtn.Rows[0]["Address"].ToString();
                    txtaddress.Enabled = false;
                    txtaddress.ReadOnly = true;
                    txtbridgenumber.Text = dtn.Rows[0]["WeighBridgeNo"].ToString();
                    txtbridgenumber.Enabled = false;
                    txtbridgenumber.ReadOnly = true;
                    txtemailaddress.Text = dtn.Rows[0]["EmailId"].ToString();
                    txtemailaddress.Enabled = false;
                    txtemailaddress.ReadOnly = true;
                    txtmobile.Text = dtn.Rows[0]["MobileNo"].ToString();
                    txtmobile.Enabled = false;
                    txtmobile.ReadOnly = true;
                    txtcompanyname.Text = dtn.Rows[0]["Title"].ToString();
                    txtcompanyname.Enabled = false;
                    txtcompanyname.ReadOnly = true;

                }
                else
                {
                    txtaddress.Text = string.Empty;
                    txtbridgenumber.Text = string.Empty;
                    txtemailaddress.Text = string.Empty;
                    txtmobile.Text = string.Empty;
                    txtcompanyname.Text = string.Empty;
                    txtmobile.Text = string.Empty;
                }
            }
            catch (Exception ex)
            {
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                // Display Message  
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);


            }
        }
        public void GetCamerasetting()
        {
            try
            {
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                _settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/Getsettingcamera/";
                dtn = WebAPI.PostGetsettingcamera(_settingModal.PostUrl, _settingModal).Result;
                if (dtn.Rows[0]["Status"].ToString() == "200")
                {
                    txtfronturl.Text = dtn.Rows[0]["CameraFrontUrl"].ToString();
                    txtrearcameraurl.Text = dtn.Rows[0]["CameraRearUrl"].ToString();
                    txtfrontcameraipaddress.Text = dtn.Rows[0]["CameraIPaddress"].ToString();
                    txtfrontusername.Text = dtn.Rows[0]["FrontCamerausername"].ToString();
                    txtfrontpassword.Text = dtn.Rows[0]["FrontCameraPassword"].ToString();
                    txtbackcameraIp.Text = dtn.Rows[0]["FrontCameraIPaddress"].ToString();
                    txtbackusername.Text = dtn.Rows[0]["Camerausername"].ToString();
                    txtbackpassword.Text = dtn.Rows[0]["CameraPassword"].ToString();
                    WebAPIModelResponse.CameraFrontUrl = Convert.ToString(dtn.Rows[0]["CameraFrontUrl"].ToString());
                    WebAPIModelResponse.CameraRearUrl = Convert.ToString(dtn.Rows[0]["CameraRearUrl"].ToString());

                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                // Display Message  
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);


            }
        }
        #endregion

        private void tabControl1_TabIndexChanged(object sender, EventArgs e)
        {
            String selected = tabControl1.SelectedTab.Text;
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                String selected = tabControl1.SelectedTab.ImageKey;
                lblloginusername.Text = WebAPIModelResponse.LoginUserEmailId;
                //lblssoid.Text = WebAPIModelResponse.FirmName;
                if (selected == "rawanna (1).png")
                {
                    #region Rawanna 
                    ClearAllData();
                    PageResourceFile();
                    BindMineraluserforCombo();
                    BindTransporttypeCombo();
                    BindLeaseListCombo();
                    GetOnlineBlankResul();
                    rtsp1 = WebAPIModelResponse.CameraRearUrl;
                    rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                    //streamPlayerControl2.StartPlay(new Uri(rtsp1));
                    //streamPlayerControl1.StartPlay(new Uri(rtsp2));
                    txttareweight.ReadOnly = true;
                    txtgrossweight.ReadOnly = true;
                    txtnetweight.ReadOnly = true;
                    txttareweight.Enabled = false;
                    txtgrossweight.Enabled = false;
                    txtnetweight.Enabled = false;
                    txttareweight.Text = "0.00";
                    txtgrossweight.Text = uc.richTextBox1.Text;
                    txtnetweight.Text = "0.00";

                    #endregion
                }
                else if (selected == "smlogo.png")
                {
                    PageResourceFile();
                    tabPage1.Hide();
                    tabPage12.Show();
                    this.tabControl1.SelectedTab = this.tabPage12;
                    // dataGridView3.DataSource = LoadCollectionData();
                }
                else if (selected == "dashboard.png")
                {
                    PageResourceFile();
                    this.tabControl1.SelectedTab = this.tabPage12;

                }
                else if (selected == "logout.png")
                {
                    DialogResult d = System.Windows.Forms.MessageBox.Show("Are You Sure to Logout", "Logout", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    if (d == DialogResult.OK)
                    {
                        DataTable dt = new DataTable();
                        SettingModel settingModal = new SettingModel();
                        settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                        settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                        settingModal.PostUrl = "/Api/ErawaanaAPI/GetUserLogout/";
                        dt = WebAPI.PostLogoutUser(settingModal.PostUrl, settingModal).Result;
                        if (dt != null && dt.Rows.Count > 0)
                        {
                            Properties.Settings.Default.SettingsKey = string.Empty;
                            Properties.Settings.Default.UserSSOID = string.Empty;
                            Properties.Settings.Default.Password = string.Empty;
                            Properties.Settings.Default.FirstName = string.Empty;
                            Properties.Settings.Default.Reset();
                            //this.Close();
                            System.Windows.Forms.Application.Exit();
                            System.Windows.Forms.Application.ExitThread();
                        }
                    }
                    else
                    {
                    }
                }
                else if (selected == "tpass.png")
                {
                    #region Confirm T Pass

                    BindTransporttypeCombo();
                    CTBindDealerDetail();
                    PageResourceFile();
                    CTClearAllData();
                    CTtxtnetweight.ReadOnly = true;
                    //CTtxttonnes.Enabled = false;
                    CTtxttareweight.Enabled = false;
                    CTtxtgrossweight.Enabled = false;
                    CTtxtnetweight.Enabled = false;
                    CTtxttareweight.Text = "0.00";
                    CTtxtgrossweight.Text = uc.richTextBox1.Text;
                    CTtxtnetweight.Text = "0.00";
                    //CTtxttonnes.Text = "0.00";
                    #endregion
                }
                else if (selected == "wslip.png")
                {
                    #region Weight Slip
                    PageResourceFile();
                    Properties.Settings.Default["cmbproductname"] = string.Empty;
                    Properties.Settings.Default.Save();
                    BindProductItem();
                    Bindweightslip();
                    LoadTicketNumber();

                    #endregion
                }
                else if (selected == "settings.png")
                {
                    #region Setting
                    PageResourceFile();
                    BindDatabitCombo();
                    BindIsReversedCombo();
                    BindStopBitsCombo();
                    BindParitysCombo();
                    BindBaudRateCombo();
                    GetCompanySetting();
                    CheckAllreadysetting();

                    #endregion
                }
                else if (selected == "invoice.png")
                {
                    #region Invoice
                    PageResourceFile();
                    txterawannanumber.Focus();
                    txterawannanumber.AcceptsTab = true;
                    dataGridView1.Columns[0].Width = 200;
                    dataGridView1.Columns[1].Width = 100;
                    dataGridView1.Columns[2].Width = 90;
                    dataGridView1.Columns[3].Width = 90;
                    dataGridView1.Columns[4].Width = 90;
                    dataGridView1.Columns[5].Width = 90;
                    Loaddatabind();
                    BindTaxSlabCombo();
                    BindInvoicenumber();
                    BindInvoiceConsigneeName();
                    ///txtname.Focus();
                    #endregion
                }
                else if (selected == "reports.png")
                {
                    #region Report
                    PageResourceFile();
                    BindConfirmrawanna("1");
                    #endregion
                }
                else if (selected == "help.png")
                {
                    #region Report
                    PageResourceFile();
                    // BindMLList();
                    #endregion
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "tabControl1_SelectedIndexChanged");

            }
        }
        public void CheckAllreadysetting()
        {
            try
            {
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/Getweightbridgesetting/";
                var ressettingModal = WebAPI.Postweightbridgesetting(_settingModal.PostUrl, _settingModal).Result;
                if (ressettingModal != null)
                {
                    if (ressettingModal.Message == "SSoId Not Exist")
                    {
                        BindDatabitCombo();
                        BindIsReversedCombo();
                        BindStopBitsCombo();
                        BindParitysCombo();
                        BindBaudRateCombo();
                        bindsystemtypeData();
                        //cmbbaudrate.SelectedIndex = 0;
                        combbaudrate.SelectedIndex = 0;
                        cmbparity.SelectedIndex = 0;
                        cmbstopbits.SelectedIndex = 0;
                        cmbisreversed.SelectedIndex = 0;
                        string[] portNames = SerialPort.GetPortNames();
                        foreach (var portName in portNames)
                        {
                            cmbportname.Items.Add(portName);
                        }
                        cmbportname.SelectedIndex = 0;
                    }
                    else
                    {
                        _settingModal.CameraFrontUrl = ressettingModal.CameraFrontUrl;
                        _settingModal.CameraRearUrl = ressettingModal.CameraRearUrl;

                        _settingModal.CameraIPAddress = ressettingModal.CameraIPAddress;
                        _settingModal.CameraUserName = ressettingModal.CameraUserName;
                        _settingModal.CameraUserPassword = ressettingModal.CameraUserPassword;
                        _settingModal.RatesBaud = ressettingModal.RatesBaud;
                        _settingModal.DataBits = ressettingModal.DataBits;
                        _settingModal.ParityNew = ressettingModal.ParityNew;

                        _settingModal.Parity = ressettingModal.Parity;
                        _settingModal.StopBits = ressettingModal.StopBits;
                        _settingModal.StopBitsNew = ressettingModal.StopBitsNew;
                        _settingModal.IsReversed = ressettingModal.IsReversed;
                        _settingModal.PortName = ressettingModal.PortName;
                        _settingModal.ReaderCode = ressettingModal.ReaderCode;
                        _settingModal.SytemType = ressettingModal.SytemType;
                        if (ressettingModal.DeviceType.ToString() != "0")
                            _settingModal.DeviceType = ressettingModal.DeviceType;
                        if (ressettingModal.DeviceMode.ToString() != "0")
                            _settingModal.DeviceMode = ressettingModal.DeviceMode;

                        bindsystemtypeData();
                        bindsystemmodelData();

                        WebAPIModelResponse.baudrate = Convert.ToString(_settingModal.RatesBaud);
                        WebAPIModelResponse.CombPortName = Convert.ToString(_settingModal.PortName);
                        WebAPIModelResponse.Parity = Convert.ToString(_settingModal.ParityNew);
                        WebAPIModelResponse.DataBits = Convert.ToString(_settingModal.DataBits);
                        WebAPIModelResponse.StopBits = Convert.ToString(_settingModal.StopBitsNew);
                        WebAPIModelResponse.Isreversed = Convert.ToString(_settingModal.IsReversed);
                        WebAPIModelResponse.ReaderCode = Convert.ToString(_settingModal.ReaderCode);
                        WebAPIModelResponse.SytemType = Convert.ToString(_settingModal.SytemType);
                        cmbportname.Items.Clear();
                        cmbportname.ResetText();
                        cmbportname.AutoCompleteCustomSource.Clear();
                        List<string> tList = new List<string>();
                        string[] portNames = SerialPort.GetPortNames();
                        foreach (var portName in portNames)
                        {
                            tList.Add(portName);
                        }
                        if (tList.Contains(WebAPIModelResponse.CombPortName))
                        {
                            cmbportname.Items.Add(WebAPIModelResponse.CombPortName);
                        }
                        else
                        {
                            string[] portNamesNew = SerialPort.GetPortNames();
                            foreach (var portName in portNamesNew)
                            {
                                cmbportname.Items.Add(portName);
                            }
                        }

                        if (_settingModal.StopBits == "None")
                            _settingModal.StopBits = "0";
                        else if (_settingModal.StopBits == "One")
                            _settingModal.StopBits = "1";
                        else if (_settingModal.StopBits == "Two")
                            _settingModal.StopBits = "2";
                        else
                            _settingModal.StopBits = "3";

                        if (_settingModal.RatesBaud == "None")
                            _settingModal.RatesBaud = "0";
                        else if (_settingModal.RatesBaud == "1200")
                            _settingModal.RatesBaud = "1";
                        else if (_settingModal.RatesBaud == "2400")
                            _settingModal.RatesBaud = "2";
                        else if (_settingModal.RatesBaud == "4800")
                            _settingModal.RatesBaud = "3";
                        else if (_settingModal.RatesBaud == "9600")
                            _settingModal.RatesBaud = "4";
                        else if (_settingModal.RatesBaud == "14400")
                            _settingModal.RatesBaud = "5";
                        else if (_settingModal.RatesBaud == "19200")
                            _settingModal.RatesBaud = "6";
                        else if (_settingModal.RatesBaud == "38400")
                            _settingModal.RatesBaud = "7";
                        else if (_settingModal.RatesBaud == "57600")
                            _settingModal.RatesBaud = "8";
                        else if (_settingModal.RatesBaud == "115200")
                            _settingModal.RatesBaud = "9";
                        else if (_settingModal.RatesBaud == "128000")
                            _settingModal.RatesBaud = "10";
                        else
                            _settingModal.RatesBaud = "11";

                        if (_settingModal.DataBits == "None")
                            _settingModal.DataBits = "0";
                        else if (_settingModal.DataBits == "8")
                            _settingModal.DataBits = "1";
                        else
                            _settingModal.DataBits = "2";

                        if (_settingModal.Parity == "None")
                            _settingModal.Parity = "0";
                        else if (_settingModal.Parity == "Even")
                            _settingModal.Parity = "1";
                        else if (_settingModal.Parity == "Odd")
                            _settingModal.Parity = "2";
                        else if (_settingModal.Parity == "Mark")
                            _settingModal.Parity = "3";
                        else
                            _settingModal.Parity = "4";

                        if (_settingModal.IsReversed == "0")
                            _settingModal.IsReversed = "Yes";
                        else
                            _settingModal.IsReversed = "No";

                        combbaudrate.SelectedIndex = Convert.ToInt32(_settingModal.RatesBaud);
                        cmbdatabits.SelectedIndex = Convert.ToInt32(_settingModal.DataBits);
                        cmbparity.SelectedIndex = Convert.ToInt32(_settingModal.Parity);
                        cmbstopbits.SelectedIndex = Convert.ToInt32(_settingModal.StopBits);
                        cmbisreversed.SelectedIndex = Convert.ToInt32(_settingModal.IsReversed == "No" ? 1 : 0);
                        txtreadercode.Text = Convert.ToString(_settingModal.ReaderCode);
                        txtreadercode.Text = _settingModal.ReaderCode;
                        txtsystemtype.Text = _settingModal.SytemType;
                        cmbportname.Text = _settingModal.PortName;
                        if (ressettingModal.DeviceType.ToString() != "0")
                            cmbsystemtype.SelectedItem = Convert.ToString(_settingModal.DeviceType);
                        if (ressettingModal.DeviceMode.ToString() != "0")
                            cmbsystemmodel.SelectedItem = Convert.ToString(_settingModal.DeviceMode);

                        //cmbportname.SelectedIndex = 1;
                        txtfronturl.Text = _settingModal.CameraFrontUrl;
                        txtrearcameraurl.Text = _settingModal.CameraRearUrl;
                        txtfrontcameraipaddress.Text = _settingModal.CameraIPAddress;
                        txtfrontusername.Text = _settingModal.CameraUserName;
                        txtfrontpassword.Text = _settingModal.CameraUserPassword;
                        txtbackcameraIp.Text = _settingModal.CameraIPAddress;
                        txtbackusername.Text = _settingModal.CameraUserName;
                        txtbackpassword.Text = _settingModal.CameraUserPassword;
                        if (ressettingModal.DeviceType.ToString() != "0")
                            cmbsystemmodel.Enabled = false;
                        if (ressettingModal.DeviceMode.ToString() != "0")
                            cmbsystemtype.Enabled = false;

                        WebAPIModelResponse.CameraFrontUrl = Convert.ToString(_settingModal.CameraFrontUrl);
                        WebAPIModelResponse.CameraRearUrl = Convert.ToString(_settingModal.CameraRearUrl);
                    }
                }
                else
                {
                    BindDatabitCombo();
                    BindIsReversedCombo();
                    BindStopBitsCombo();
                    BindParitysCombo();
                    BindBaudRateCombo();

                    //cmbbaudrate.SelectedIndex = 0;
                    combbaudrate.SelectedIndex = 0;
                    cmbparity.SelectedIndex = 0;
                    cmbstopbits.SelectedIndex = 0;
                    cmbisreversed.SelectedIndex = 0;
                    string[] portNames = SerialPort.GetPortNames();
                    foreach (var portName in portNames)
                    {
                        cmbportname.Items.Add(portName);
                    }
                    cmbportname.SelectedIndex = 0;
                    //MessageBox.Show(string.Join(", ", portNames));
                }
            }
            catch (Exception ex)
            {
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                // Display Message  
                MessageBox.Show("Something goes wrong, Please try again later.", "CheckAllreadysetting", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #region Confirm T Pass

        public async void CTBindDealerDetail()
        {
            ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
            DataTable dt = new DataTable();
            dt.Columns.Add("Id", typeof(Int32));
            dt.Columns.Add("Name", typeof(string));
            JObject returnJOBJECT = new JObject();
            Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
            datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
            datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
            //datacollection.Add("leaseId", Convert.ToString(WebAPIModelResponse.leaseID));
            //datacollection.Add("mineralUsedFor", "C");
            try
            {
                if (WebAPIModelResponse.Authtoken.ToString() != "")
                {
                    dtdelare = await minesmart.Helper.Cls_PostMines.TPdealerDetails(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPallInfo, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                    DataRow rowMin = dt.NewRow();
                    rowMin["Name"] = "Select";
                    rowMin["Id"] = "0";
                    dt.Rows.InsertAt(rowMin, 0);
                    CTcmbmineral.DataSource = dt;
                    CTcmbmineral.DisplayMember = "Name";
                    CTcmbmineral.ValueMember = "Id";

                    // DataView dvDatadel = new DataView(dtdelare);
                    // dvDatadel.RowFilter = "Type = 'dealer'";
                    //CTcmbdealername.DataSource = dvDatadel;
                    //CTcmbdealername.DisplayMember = "FirmName";
                    //CTcmbdealername.ValueMember = "Id";
                    try
                    {
                        CTtxtVehicle.Text = string.Empty;
                        CTtxtmobileno.Text = string.Empty;
                        CTtxtdrivername.Text = string.Empty;
                        colldealer.Clear();
                        CTcmbdealername.ResetText();
                        CTcmbdealername.AutoCompleteCustomSource.Clear();
                        CTcmbconsigneename.ResetText();
                        CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                        CTcmbconsigneeaddress.ResetText();
                        CTcmbconsigneeaddress.AutoCompleteCustomSource.Clear();
                        DataTable dtnew = new DataTable();
                        DataView dvData = new DataView(dtdelare);
                        dvData.RowFilter = "Type = 'dealer'";
                        dtnew = dvData.ToTable();
                        if (dtnew.Rows.Count == 1)
                        {
                            cmbdealername = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                            CTcmbdealername.DisplayMember = "FirmName";
                            CTcmbdealername.ValueMember = "Id";
                            CTcmbdealername.DataSource = dtnew;
                            CTGetLocationDetails(Convert.ToInt32(cmbdealername));
                            CTGetConsigneeDetails(Convert.ToInt32(cmbdealername));
                        }
                        else
                        {
                            DataRow row = dtnew.NewRow();
                            row["FirmName"] = "Select";
                            row["ID"] = "0";
                            dtnew.Rows.InsertAt(row, 0);
                            CTcmbdealername.DataSource = dtnew;
                            CTcmbdealername.DisplayMember = "FirmName";
                            CTcmbdealername.ValueMember = "ID";

                            dt = new DataTable();
                            dt.Columns.Add("Id", typeof(Int32));
                            dt.Columns.Add("Name", typeof(string));
                            DataRow rowConsAdd = dt.NewRow();
                            rowConsAdd["Name"] = "Select";
                            rowConsAdd["Id"] = "0";
                            dt.Rows.InsertAt(rowConsAdd, 0);
                            CTcmbconsigneeaddress.DataSource = dt;
                            CTcmbconsigneeaddress.DisplayMember = "Name";
                            CTcmbconsigneeaddress.ValueMember = "Id";

                            dt = new DataTable();
                            dt.Columns.Add("Id", typeof(Int32));
                            dt.Columns.Add("Name", typeof(string));
                            DataRow rowLoc = dt.NewRow();
                            rowLoc["Name"] = "Select";
                            rowLoc["Id"] = "0";
                            dt.Rows.InsertAt(rowLoc, 0);
                            CTcmblocation.DataSource = dt;
                            CTcmblocation.DisplayMember = "Name";
                            CTcmblocation.ValueMember = "Id";

                            dt = new DataTable();
                            dt.Columns.Add("Id", typeof(Int32));
                            dt.Columns.Add("Name", typeof(string));
                            DataRow rowmin = dt.NewRow();
                            rowmin["Name"] = "Select";
                            rowmin["Id"] = "0";
                            dt.Rows.InsertAt(rowmin, 0);
                            CTcmbmineral.DataSource = dt;
                            CTcmbmineral.DisplayMember = "Name";
                            CTcmbmineral.ValueMember = "Id";

                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message);

                    }
                }

            }
            catch (Exception ex)
            {
                returnJOBJECT["Error"] = (JToken)"true";
                returnJOBJECT["result"] = (JToken)ex.Message;
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "CTBindDealerDetail", returnJOBJECT["result"].ToString());
                MessageBox.Show("Something goes wrong, Please try again later.", "CTBindDealerDetail");
            }
        }
        public async void CTGetMineralDetails(int cmbstocklocationId)
        {
            try
            {
                JObject returnJOBJECT = new JObject();
                DataTable dtconsigneenme = new DataTable();
                DataTable dt = new DataTable();
                ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
                if (cmbstocklocationId > 0)
                {
                    //leaseselectedText = Convert.ToInt32(WebAPIModelResponse.mineralNameuserfor);
                    //MessageBox.Show(leaseselectedText.ToString());
                    var newcomboresult = string.Empty;
                    try
                    {
                        DataTable dtnew = new DataTable();
                        DataView dvData = new DataView(dtdelare);
                        dvData.RowFilter = "Type = 'mineralList' AND OtherId='" + cmbstocklocationId + "'";
                        dtnew = dvData.ToTable();
                        if (dtnew.Rows.Count == 1)
                        {
                            CTcmbmineral.DisplayMember = "Name";
                            CTcmbmineral.ValueMember = "Id";
                            CTcmbmineral.DataSource = dtnew;
                        }
                        else
                        {
                            DataRow row = dtnew.NewRow();
                            row["Name"] = "Select";
                            row["Id"] = "0";
                            dtnew.Rows.InsertAt(row, 0);
                            CTcmbmineral.DataSource = dtnew;
                            CTcmbmineral.DisplayMember = "Name";
                            CTcmbmineral.ValueMember = "Id";
                        }

                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "CTGetMineralDetailsInner");

                    }
                }
                else
                {
                    collCTcons.Clear();
                    CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTGetMineralDetailsOuter");

            }

        }
        public async void CTGetConsigneeDetails(int cmbdealernameId)
        {
            try
            {
                if (cmbdealernameId > 0)
                {
                    var newcomboresult = string.Empty;
                    try
                    {
                        collCTcons.Clear();
                        CTcmbconsigneename.ResetText();
                        CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                        DataTable dtnew = new DataTable();
                        DataView dvData = new DataView(dtdelare);
                        dvData.RowFilter = "Type = 'consignee' AND OtherId='" + cmbdealernameId + "'";
                        dtnew = dvData.ToTable();
                        if (dtnew.Rows.Count == 1)
                        {
                            CTcmbconsigneename.Text = dtnew.Rows[0]["Name"].ToString();
                            try
                            {
                                if (dtdelare != null)
                                {
                                    if (CTcmbconsigneename.Text != null && CTcmbconsigneename.Text != "")
                                    {
                                        if (CTcmbconsigneename.Text.ToString().Contains("("))
                                        {
                                            DataTable dtnew1 = new DataTable();
                                            DataView dvData1 = new DataView(dtdelare);
                                            dvData1.RowFilter = " Name='" + CTcmbconsigneename.Text.Trim() + "'";
                                            dtnew1 = dvData1.ToTable();
                                            if (dtnew1.Rows.Count > 0)
                                                ConsigneeId = Convert.ToInt64(dtnew1.Rows[0]["OtherId"].ToString());
                                            if (CTcmbdealername.Text != null && CTcmbdealername.Text != "")
                                            {
                                                if (Convert.ToInt32(ConsigneeId) > 0)
                                                {
                                                    var consigneenameregst = CTcmbdealername.Text.ToString();
                                                    if (consigneenameregst.Contains("("))
                                                    {
                                                        string[] consigneegst = consigneenameregst.Split('(');
                                                        CTtxtconsigneegst.Text = consigneegst[1].ToString().Replace("  ", "");
                                                        CTtxtconsigneegst.Text = consigneegst[1].ToString().Replace(")", "");
                                                        cmbconsigneename.Text = consigneenameregst.ToString().Replace("  ", "");
                                                        CTtxtconsigneegst.ReadOnly = true;
                                                        CTtxtconsigneegst.ReadOnly = true;
                                                    }
                                                    else
                                                    {
                                                        CTtxtconsigneegst.Text = string.Empty;
                                                        CTtxtconsigneegst.ReadOnly = true;
                                                    }
                                                }
                                            }

                                            CTGetConsigneeaddressDetails(ConsigneeId);


                                        }
                                        else
                                        {
                                            txtconsigneegst.Text = string.Empty;
                                            txtconsigneegst.ReadOnly = true;
                                            txtconsigneegst.Text = string.Empty;
                                        }

                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorModel errormdl = new ErrorModel();
                                if (ex.Message.ToString().Contains("Status"))
                                {
                                    var parsed = JObject.Parse(ex.Message.ToString());
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                else
                                {
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    errormdl.Exp = ex;
                                    errormdl.Message = ex.Message;
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                MessageBox.Show(ex.Message);

                            }
                        }
                        else
                        {
                            for (int i = 0; i < dtnew.Rows.Count; i++)
                            {
                                if (dtnew.Rows[i]["Name"].ToString() != "")
                                {
                                    collCTcons.Add(dtnew.Rows[i]["Name"].ToString());
                                }
                            }
                            CTcmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                            CTcmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                            //CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "CTGetConsigneeDetailsInner");

                    }
                }
                else
                {
                    cmbconsigneename.AutoCompleteCustomSource = null;
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTGetConsigneeDetailsOuter");

            }

        }
        public async void CTGetLocationDetails(int cmbdealernameId)
        {
            try
            {
                if (cmbdealernameId > 0)
                {
                    var newcomboresult = string.Empty;
                    try
                    {
                        DataTable dtnew = new DataTable();
                        DataView dvData = new DataView(dtdelare);
                        dvData.RowFilter = "Type = 'stockList' AND OtherId='" + cmbdealernameId + "'";
                        dtnew = dvData.ToTable();
                        if (dtnew.Rows.Count > 0)
                            cmblocation = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                        if (Convert.ToInt32(cmblocation) > 0)
                        {
                            if (dtnew.Rows.Count == 1)
                            {
                                CTcmblocation.DataSource = dtnew;
                                CTcmblocation.DisplayMember = "Name";
                                CTcmblocation.ValueMember = "Id";
                                CTGetMineralDetails(Convert.ToInt32(cmblocation));
                            }
                            else
                            {
                                DataRow row = dtnew.NewRow();
                                row["Name"] = "Select";
                                row["Id"] = "0";
                                dtnew.Rows.InsertAt(row, 0);
                                CTcmblocation.DataSource = dtnew;
                                CTcmblocation.DisplayMember = "Name";
                                CTcmblocation.ValueMember = "Id";
                            }
                        }


                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "CTGetLocationDetailsInner");

                    }
                }
                else
                {
                    cmbconsigneename.AutoCompleteCustomSource = null;
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTGetLocationDetailsOuter");

            }

        }

        private void CTcmblocation_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                CTcmblocation.DroppedDown = true;
                if (char.IsControl(e.KeyChar))
                {
                    return;
                }
                string str = CTcmblocation.Text.Substring(0, CTcmblocation.SelectionStart) + e.KeyChar;
                Int32 index = CTcmblocation.FindString(str);
                if (index == -1)
                {
                    index = CTcmblocation.FindString(str);
                }
                this.CTcmblocation.SelectedIndex = index;
                this.CTcmblocation.SelectionStart = str.Length;
                this.CTcmblocation.SelectionLength = this.CTcmblocation.Text.Length - this.CTcmblocation.SelectionStart;
                e.Handled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "CTcmblocation_KeyPress");

            }
        }

        private void CTcmbmineral_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                CTcmbmineral.DroppedDown = true;
                if (char.IsControl(e.KeyChar))
                {
                    return;
                }
                string str = CTcmbmineral.Text.Substring(0, CTcmbmineral.SelectionStart) + e.KeyChar;
                Int32 index = CTcmbmineral.FindString(str);
                if (index == -1)
                {
                    index = CTcmbmineral.FindString(str);
                }
                this.CTcmbmineral.SelectedIndex = index;
                this.CTcmbmineral.SelectionStart = str.Length;
                this.CTcmbmineral.SelectionLength = this.CTcmbmineral.Text.Length - this.CTcmbmineral.SelectionStart;
                e.Handled = true;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "CTcmbmineral_KeyPress");

            }
        }

        private void CTcmblocation_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (CTcmblocation.Text != "System.Data.DataRowView" && CTcmblocation.Text != "Select" && CTcmblocation.Text != "")
                {
                    if (Convert.ToInt32(CTcmblocation.SelectedValue) > 0)
                    {
                        CTGetMineralDetails(Convert.ToInt32(CTcmblocation.SelectedValue));
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmblocation_SelectedIndexChanged");
            }

        }

        public async void CTGetConsigneeaddressDetails(long cmbconsigneeId)
        {
            try
            {
                if (cmbconsigneeId > 0)
                {
                    if (checkBox3.Checked)
                    {
                        var newcomboresult = string.Empty;
                        try
                        {
                            DataTable dtnew = new DataTable();
                            DataView dvData = new DataView(dtdelare);
                            dvData.RowFilter = "Type = 'addressList' AND OtherId='" + cmbconsigneeId + "'";
                            dtnew = dvData.ToTable();
                            if (dtnew.Rows.Count == 1)
                            {
                                CTcmbconsigneeaddress.Text = dtnew.Rows[0]["Name"].ToString();
                                CTcmbAddress = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                            }
                            else
                            {
                                DataRow row = dtnew.NewRow();
                                row["Name"] = "Select";
                                row["Id"] = "0";
                                dtnew.Rows.InsertAt(row, 0);
                                CTcmbconsigneeaddress.DataSource = dtnew;
                                CTcmbconsigneeaddress.DisplayMember = "Name";
                                CTcmbconsigneeaddress.ValueMember = "Id";

                            }

                        }
                        catch (Exception ex)
                        {
                            ErrorModel errormdl = new ErrorModel();
                            if (ex.Message.ToString().Contains("Status"))
                            {
                                var parsed = JObject.Parse(ex.Message.ToString());
                                errormdl.DateLog = DateTime.Now.ToString();
                                //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            else
                            {
                                errormdl.DateLog = DateTime.Now.ToString();
                                errormdl.Exp = ex;
                                errormdl.Message = ex.Message;
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            MessageBox.Show(ex.Message, "CTGetConsigneeaddressDetailsInner");

                        }
                    }
                    else
                    {
                        try
                        {
                            DataTable dtnew = new DataTable();
                            DataView dvData = new DataView(dtConsigneeaddress);
                            dvData.RowFilter = " firmName='" + CTcmbconsigneename.Text.Trim() + "'";
                            dtnew = dvData.ToTable();
                            if (dtnew.Rows.Count > 0)
                            {
                                if (dtnew.Rows.Count == 1)
                                {
                                    CTcmbconsigneeaddress.Text = dtnew.Rows[0]["stockLocName"].ToString();
                                    CTcmbAddress = Convert.ToInt16(dtnew.Rows[0]["stockLocId"].ToString());
                                }
                                else
                                {
                                    DataRow row = dtnew.NewRow();
                                    row["stockLocName"] = "Select";
                                    row["stockLocId"] = "0";
                                    dtnew.Rows.InsertAt(row, 0);
                                    CTcmbconsigneeaddress.DataSource = dtnew;
                                    CTcmbconsigneeaddress.DisplayMember = "stockLocName";
                                    CTcmbconsigneeaddress.ValueMember = "stockLocId";

                                }
                            }

                        }
                        catch (Exception ex)
                        {
                            ErrorModel errormdl = new ErrorModel();
                            if (ex.Message.ToString().Contains("Status"))
                            {
                                var parsed = JObject.Parse(ex.Message.ToString());
                                errormdl.DateLog = DateTime.Now.ToString();
                                //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            else
                            {
                                errormdl.DateLog = DateTime.Now.ToString();
                                errormdl.Exp = ex;
                                errormdl.Message = ex.Message;
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            MessageBox.Show(ex.Message, "CTGetConsigneeaddressDetailselseinnner");

                        }
                    }

                }
                else
                {
                    CTcmbconsigneeaddress.DataSource = null;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "CTGetConsigneeaddressDetails");

            }

        }

        private void CTbtnSave_Click(object sender, EventArgs e)
        {
            try
            {
                GenerateTransitPass();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "CTbtnSave_Click");
            }
        }
        private async void GenerateTransitPass()
        {
            this.CTbtnSave.Text = "LOADING......";
            this.CTbtnSave.Enabled = false;
            SettingModel ssmdl = new SettingModel();
            ConfirmERawannaModel _conmdl = new ConfirmERawannaModel();
            WebAPIModelResponse webAPImdl = new WebAPIModelResponse();
            DataTable dtccrawanna = new DataTable();
            var FCameraurl1 = string.Empty;
            var FCameraurl2 = string.Empty;
            var input_strfrnt = string.Empty;
            var input_strbck = string.Empty;

            DataTable dtcdtl = new DataTable();
            ssmdl.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
            ssmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
            ssmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
            ssmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
            WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
            ssmdl = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, ssmdl).Result;
            if (ssmdl.Success == "200")
            {
                frontCameraImage = string.Empty;
                rearCameraImage = string.Empty;
                if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                {
                    // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                    frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);
                    rearCameraImage = frontCameraImage;
                }
                else
                {
                    // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                    frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);

                    // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                    rearCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl2, CameraImageQuality.Good);
                }

            }
            try
            {
                var finalerrorResult = true;
                var finalerrormsg = string.Empty;
                var IsResult = string.Empty;
                var newcomboresult = string.Empty;
                int s = 0;

                dtcdtl.Columns.Add("TransitPassNumber", typeof(string));
                dtcdtl.Columns.Add("Message", typeof(string));
                if (CTcmbmineral.Text != "System.Data.DataRowView" && CTcmbmineral.Text != "Select" && CTcmbmineral.Text != "")
                {
                    if (CTcmbconsigneename.Text != null && CTcmbconsigneename.Text != "")
                    {
                        //if (txtaddessconsignee.Text != "")
                        //{

                        if (CTtxtVehicle.Text != "")
                        {
                            if (checkBox3.Checked)
                                WebAPIModelResponse.mineralNameuserfor = "R";
                            else
                                WebAPIModelResponse.mineralNameuserfor = "S";
                            if (finalerrorResult)
                            {
                                _conmdl.SSOID = WebAPIModelResponse.SsoId.ToString().Trim().ToUpper();
                                _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                _conmdl.WeightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                                _conmdl.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                                _conmdl.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                                _conmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                                _conmdl.dealerName = CTcmbdealername.Text.ToString().Trim();
                                _conmdl.dealerId = Convert.ToInt64(cmbdealername);
                                _conmdl.MineralName = CTcmbmineral.Text.ToString().Trim();
                                _conmdl.MineralId = Convert.ToInt64(CTcmbmineral.SelectedValue);
                                _conmdl.Location = CTcmblocation.Text.ToString().Trim();
                                _conmdl.LocationId = Convert.ToString(CTcmblocation.SelectedValue);
                                _conmdl.MineralUserFor = Convert.ToString(WebAPIModelResponse.mineralNameuserfor);
                                _conmdl.ConsigneeName = CTcmbconsigneename.Text;
                                _conmdl.ConsigneeId = Convert.ToInt64(CTConsigneeId);
                                _conmdl.ConsigneeAddress = CTcmbconsigneeaddress.Text;
                                _conmdl.Approximatedistance = CTtxtapproxdistance.Text;
                                _conmdl.ConsigneeAddressId = 0; //"0"Convert.ToInt64(CTcmbAddress);
                                _conmdl.ConsigneeGSTNo = CTtxtconsigneegst.Text;
                                _conmdl.ApproximateTime = CTtxtapproxtime.Text.Trim();
                                _conmdl.VechicleRegistration = CTtxtVehicle.Text.Trim();
                                _conmdl.DriverMobileNo = CTtxtmobileno.Text.Trim();
                                _conmdl.DriverName = CTtxtdrivername.Text.Trim();
                                _conmdl.TareWeight = CTtxttareweight.Text.Trim();
                                _conmdl.GrossWeight = CTtxtgrossweight.Text.Trim();
                                _conmdl.TotalWeight = CTtxtnetweight.Text.Trim();
                                _conmdl.Comment = CTtxtremark.Text.Trim();
                                _conmdl.FirstCameraImageurl = frontCameraImage;
                                _conmdl.SecondCameraImage = rearCameraImage;
                                _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                                _conmdl.IpAddress = checkcon.GetMacAddress();
                                _conmdl.Isactive = true;
                                Dictionary<string, string> datacollection = new Dictionary<string, string>(27);
                                datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId.ToString().Trim().ToUpper()));
                                datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                                datacollection.Add("dealerEnrolId", Convert.ToString(cmbdealername));
                                datacollection.Add("stockLocId", Convert.ToInt64(CTcmblocation.SelectedValue).ToString());
                                datacollection.Add("mineralId", Convert.ToInt64(CTcmbmineral.SelectedValue).ToString());//Convert.ToInt64(combomineral.SelectedValue).ToString()
                                datacollection.Add("grossWeight", Convert.ToString(CTtxtgrossweight.Text).ToString());
                                datacollection.Add("consigneeId", Convert.ToString(CTConsigneeId));//Convert.ToInt64(Combconsigneename.SelectedValue).ToString()
                                datacollection.Add("consigneeName", "");//Combconsigneename.Text
                                if (checkBox2.Checked)
                                    datacollection.Add("consigneeAddressId", "0");// combconsigneeAddress.TextConvert.ToInt64(CTcmbAddress).ToString()

                                else
                                    datacollection.Add("consigneeAddressId", Convert.ToInt64(CTcmbAddress).ToString());

                                datacollection.Add("consigneeDistance", "");
                                datacollection.Add("consigneegstNo", "");//txtconsigneegst.Text
                                datacollection.Add("approxDistance", "0");
                                datacollection.Add("approxTime", CTtxtapproxtime.Text.Trim());
                                datacollection.Add("vehicleId", Convert.ToString(CTtxtVehicle.Text).ToString());
                                datacollection.Add("vehicleRegNo", "");
                                datacollection.Add("tareWeight", "");
                                // datacollection.Add("tranportMode", Convert.ToString("L").ToString());// combtransportmode.Text
                                datacollection.Add("vehicleTypeId", "");
                                datacollection.Add("vehicleMaxCapicity", "");
                                datacollection.Add("driverName", CTtxtdrivername.Text.Trim());
                                datacollection.Add("driverMobileNo", CTtxtmobileno.Text.Trim());
                                datacollection.Add("mineralUsedFor", Convert.ToString(WebAPIModelResponse.mineralNameuserfor));
                                datacollection.Add("frontImage", frontCameraImage);// "");
                                datacollection.Add("rearImage", rearCameraImage);// "");
                                datacollection.Add("usedInNH", "N");
                                datacollection.Add("additionalComment", CTtxtremark.Text.Trim());

                                // Live Database Update  Consignee Details
                                //string urls = HttpService.localURL + "TP/generateConfirmTransitPass";
                                //var dtccrawannass = await ERawaana.Helper.DMGService.GenerateConfirmedRawanna(urls, datacollection, Convert.ToString(System.Windows.Application.Current.Properties["ACCESSKEY"]), Convert.ToString(System.Windows.Application.Current.Properties["WeightBridge"]));
                                dtccrawanna = await minesmart.Helper.Cls_PostMines.generateTPassdetail(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPGenerateConfirmTransitPass, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                                if (dtccrawanna != null && dtccrawanna.Rows.Count > 0)
                                {
                                    if (dtccrawanna.Rows[0]["status"].ToString() == "301")
                                    {
                                        this.CTbtnSave.Text = "GENERATE";
                                        this.CTbtnSave.Enabled = true;
                                        MessageBox.Show(dtccrawanna.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                                    }
                                    else
                                    {
                                        _conmdl.TransitPassNumber = Convert.ToString(dtccrawanna.Rows[0]["TransitPassNumber"].ToString().Replace(@"\""", ""));
                                        _conmdl.MessageDiscription = Convert.ToString("Confirm Generate TP");
                                        WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetTransitPass/";
                                        var responseDetails = WebAPI.PostinsertTransitPass(WebAPIModelResponse.PostUrl, _conmdl).Result;
                                        if (responseDetails.Status != "204")
                                        {
                                            DataRow dr = dtcdtl.NewRow();
                                            dr = dtcdtl.NewRow();
                                            dr["TransitPassNumber"] = Convert.ToString(dtccrawanna.Rows[0]["TransitPassNumber"].ToString().Replace(@"\""", ""));
                                            dr["Message"] = Convert.ToString("Confirm Generate TP");
                                            dtcdtl.Rows.Add(dr);

                                            if (chkdmgtpass.Checked)
                                            {
                                                //Print Dmg
                                                var targetURLDMG = minesmart.Helper.HttpServiceUrl.DMGravannaStatusURL + Convert.ToString(dtccrawanna.Rows[0]["TransitPassNumber"].ToString().Replace("\"", string.Empty).Trim().ToString());
                                                var psi = new ProcessStartInfo
                                                {
                                                    FileName = targetURLDMG,
                                                    UseShellExecute = true
                                                };
                                                Process.Start(psi);
                                            }
                                            if (chkprinttpass.Checked)
                                            {
                                                //Print
                                                var targetURLLOCAL = minesmart.Helper.HttpServiceUrl.PrintCTPWebsiteUrl + Comman.EncryptData(Convert.ToString(dtccrawanna.Rows[0]["TransitPassNumber"].ToString()));
                                                var psilocal = new ProcessStartInfo
                                                {
                                                    FileName = targetURLLOCAL,
                                                    UseShellExecute = true
                                                };
                                                Process.Start(psilocal);
                                            }
                                            CTClearAllData();
                                            //minesmart.Helper.Comman.handleShare(GetDictInvoice(dtcdtl), "Generate TP");
                                        }
                                        else
                                        {
                                            MessageBox.Show("Error Occured durning this process.Please Try again.", "Confirm T Pass", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                            minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Error Occured durning this process.Please Try again.");
                                        }
                                    }
                                }
                            }
                            else
                            {
                                this.CTbtnSave.Text = "GENERATE";
                                this.CTbtnSave.Enabled = true;
                                MessageBox.Show("Error Occured durning this process.Please Try again.", "Confirm T Pass", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Error Occured durning this process.Please Try again.");
                            }
                        }
                        else
                        {
                            this.CTbtnSave.Text = "GENERATE";
                            this.CTbtnSave.Enabled = true;
                            MessageBox.Show("Please Select Vehicle Number", "Vehicle Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        //}
                        //else
                        //{
                        //    MessageBox.Show("Please Select Consignee Address", "Consignee Address", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        //}
                    }
                    else
                    {
                        this.CTbtnSave.Text = "GENERATE";
                        this.CTbtnSave.Enabled = true;
                        MessageBox.Show("Please Select Consignee Name", "Consignee Name", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    this.CTbtnSave.Text = "GENERATE";
                    this.CTbtnSave.Enabled = true;
                    MessageBox.Show("Please Select Mineral Details", "Mineral Details", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                this.CTbtnSave.Text = "GENERATE";
                this.CTbtnSave.Enabled = true;
                // Display Message  
                MessageBox.Show("Something goes wrong, Please try again later.", "Fail", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Something goes wrong, Please try again later");

            }
        }
        #endregion

        #region Unconfirm T Pass
        private async void UCTbtnsearch_Click(object sender, EventArgs e)
        {
            if (UCTtxtsearch.Text.ToString() != "" && UCTtxtsearch.Text.ToString() != null)
            {
                this.UCTbtnsearch.Text = "LOADING......";
                this.UCTbtnsearch.Enabled = false;
                JObject returnJOBJECT = new JObject();
                DataTable dtresult = new DataTable();
                var newcomboresult = string.Empty;
                Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                //datacollection.Add("leaseId", "61265");
                datacollection.Add("searchText", UCTtxtsearch.Text.ToString());
                try
                {
                    dtresult = await minesmart.Helper.Cls_PostMines.getsearchTransitPass(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPSearchDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                    if (dtresult != null && dtresult.Rows.Count > 0)
                    {
                        if (dtresult.Rows[0]["status"].ToString() == "300")
                        {
                            UCTClearAllData();
                            MessageBox.Show(dtresult.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                        }
                        else if (dtresult.Rows[0]["status"].ToString() == "301")
                        {
                            UCTClearAllData();
                            MessageBox.Show(dtresult.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                        }
                        else
                        {
                            UCTcmbdealername.Text = dtresult.Rows[0]["leaseNo"].ToString().Replace("\\", "");
                            UCTtxteRawannaNo.Text = dtresult.Rows[0]["eRawannaNo"].ToString();
                            UCTcmbmineral.Text = dtresult.Rows[0]["mineralName"].ToString();
                            UCTtxtapproxRoyalty.Text = dtresult.Rows[0]["approxRoyalty"].ToString();
                            //cmbmineraluserfor.Text = dtresult.Rows[0][""].ToString();
                            //ombroyalityschedule.Text = dtresult.Rows[0][""].ToString();
                            UCTtxtrawannadate.Text = dtresult.Rows[0]["ravannaDate"].ToString();
                            UCTtxtstatus1.Text = dtresult.Rows[0]["status"].ToString();
                            UCTtxttransactiontype.Text = dtresult.Rows[0]["TransactionType"].ToString();
                            UCTtxtLocation.Text = dtresult.Rows[0]["location"].ToString();
                            UCTtxtapproxRoyalty.Text = dtresult.Rows[0]["approxRoyalty"].ToString();
                            // { "Status" :200,"rawannaDetail":{ "consigneeName":"test bhupenda","approxTotalAmount(in Rs.)":"200","approxNMET(in Rs.)":"0","ravannaDate":"24-Aug-2021 11:25:17 AM","status":"Unconfirm","location":null,"TransactionType":"eRawanna","leaseID":"93027","driverMobNo":"9887722520","approxWeight(in MT)":"1 Metric Ton","CollectionAgainst":"DeadRent Rawanna","approxDMFT(in Rs.)":"20","leaseNo":"ME\/JPR\/Minor\/ML\/14\/2021","vehicleName":" ","eRawannaNo":"FGCD1001430167","approxRSMET(in Rs.)":"4","transportMode":"Road","approxRoyalty(in Rs.)":"200","driverName":"ram","vehicleNo":"RDX112235","approxTime":"1 Hour","mineralName":"Marble","VEHICLEWEIGHT":"5.253"} }
                            UCTtxttareweight.Text = dtresult.Rows[0]["VEHICLEWEIGHT"].ToString();
                            UCTtxtnetweight.Text = string.Format("{0:0.000}", (Convert.ToDouble(UCTtxtgrossweight.Text == "" ? "0.00" : UCTtxtgrossweight.Text) - Convert.ToDouble(UCTtxttareweight.Text)));
                            UCTcmbconsigneename.Text = dtresult.Rows[0]["consigneeName"].ToString();
                            //UCTtxtapproxweight.Text = dtresult.Rows[0]["approxWeight"].ToString();
                            //cmbconsigneeaddress.Text = dtresult.Rows[0][""].ToString();
                            // txtconsigneegst.Text = dtresult.Rows[0][""].ToString();
                            UCTcmbtransportmode.Text = dtresult.Rows[0]["transportMode"].ToString();
                            UCTtxtvechilenumber.Text = dtresult.Rows[0]["vehicleNo"].ToString();
                            //UCTtxtcapcity.Text = dtresult.Rows[0]["approxWeight"].ToString();
                            UCTtxtapproxtime.Text = dtresult.Rows[0]["approxTime"].ToString();
                            //UCTtxtvehicleweight.Text = dtresult.Rows[0]["VEHICLEWEIGHT"].ToString();
                            UCTtxtdrivemobile.Text = dtresult.Rows[0]["driverMobNo"].ToString();
                            UCTtxtdrivername.Text = dtresult.Rows[0]["driverName"].ToString();
                            //txttareweight.Text = dtresult.Rows[0][""].ToString();UCTtxtnetweight
                            // UCTtxtgrossweight.Text = dtresult.Rows[0]["approxDMFT"].ToString();
                            WebAPIModelResponse.leaseID = dtresult.Rows[0]["leaseID"].ToString();
                            WebAPIModelResponse.leaseNo = dtresult.Rows[0]["leaseNo"].ToString();
                            this.UCTbtnsearch.Text = "SEARCH";
                            this.UCTbtnsearch.Enabled = true;
                        }
                        //txtnetweight.Text = dtresult.Rows[0][""].ToString();
                        //txtremark.Text = dtresult.Rows[0][""].ToString();
                    }
                }
                catch (Exception ex)
                {
                    this.UCTbtnsearch.Text = "SEARCH";
                    this.UCTbtnsearch.Enabled = true;
                    minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");

                }
            }
            else
            {
                this.UCTbtnsearch.Text = "SEARCH";
                this.UCTbtnsearch.Enabled = true;
                System.Windows.Forms.MessageBox.Show("Please Enter the Search Text First", "Search", MessageBoxButtons.OK, MessageBoxIcon.Error);
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "Please Enter the Search Text First");
            }
        }


        private async void button2_Click(object sender, EventArgs e)
        {
            try
            {
                if (UCTtxteRawannaNo.Text != "" && UCTtxteRawannaNo.Text != null)
                {
                    this.button2.Text = "LOADING......";
                    this.button2.Enabled = false;
                    JObject returnJOBJECT = new JObject();
                    SettingModel ssmdl = new SettingModel();
                    ConfirmERawannaModel _conmdl = new ConfirmERawannaModel();
                    WebAPIModelResponse webAPImdl = new WebAPIModelResponse();
                    DataTable dtresult = new DataTable();
                    var newcomboresult = string.Empty;
                    DataTable dtcdtl = new DataTable();
                    ssmdl.SsoId = WebAPIModelResponse.SsoId.ToString().Trim();
                    ssmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    ssmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno.ToString().Trim());
                    ssmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                    WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/GetCamerasetting/";
                    ssmdl = WebAPI.PostGetCamerasetting(WebAPIModelResponse.PostUrl, ssmdl).Result;
                    if (ssmdl.Success == "200")
                    {

                        rtsp1 = WebAPIModelResponse.CameraRearUrl;
                        rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                        if (rtsp1.ToString().ToLower() == rtsp2.ToString().ToLower())
                        {
                            // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);
                            rearCameraImage = frontCameraImage;
                        }
                        else
                        {
                            // Bitmap frontImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl1.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            frontCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl1, CameraImageQuality.Good);

                            // Bitmap rearImage = minesmart.Helper.CaptureImage.ScaleImage(new Bitmap((System.Drawing.Image)uc.streamPlayerControl2.GetCurrentFrame(), new System.Drawing.Size(1280, 720)));
                            rearCameraImage = minesmart.Helper.CaptureImage.GetBase64Image2(uc.streamPlayerControl2, CameraImageQuality.Good);
                        }

                    }
                    _conmdl.SSOID = WebAPIModelResponse.SsoId.ToString().Trim();
                    _conmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                    _conmdl.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                    _conmdl.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                    _conmdl.WeightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                    _conmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId.ToString().Trim());
                    _conmdl.dealerId = Convert.ToInt64(0);
                    _conmdl.dealerName = UCTcmbdealername.Text.ToString().Trim();
                    _conmdl.MineralName = UCTcmbmineral.Text.ToString().Trim();
                    _conmdl.MineralId = Convert.ToInt64(0);
                    _conmdl.MineralUserFor = cmbmineraluserfor.Text.ToString().Trim();
                    //_conmdl.RoyaltySchedule = txtroyaltyschrate.Text.ToString().Trim();
                    //_conmdl.RoyaltyScheduleRate = combroyalityschedule.Text.ToString().Trim();
                    //_conmdl.CollectionThrough = combroyalityschedule.Text.ToString().Trim();
                    _conmdl.ConsigneeName = UCTcmbconsigneename.Text;
                    _conmdl.ConsigneeId = Convert.ToInt64(0);
                    _conmdl.ConsigneeAddress = UCTcmbconsigneeaddress.Text;
                    _conmdl.ConsigneeAddressId = Convert.ToInt64(0);
                    _conmdl.ConsigneeGSTNo = UCTtxtconsigneegst.Text;
                    _conmdl.TransportDetails = UCTtxttransactiontype.Text;
                    _conmdl.Vechicle = UCTtxtvechilenumber.Text;
                    //_conmdl.VechicleId = Convert.ToInt64(txtVehicle.Text);
                    //_conmdl.Unit = UCTtxtcapcity.Text.Trim();
                    _conmdl.ApproximateTime = UCTtxtapproxtime.Text.Trim();
                    //_conmdl.Vechicleweight = txtwehicleweight.Text.Trim();
                    _conmdl.VechicleRegistration = UCTtxtvechilenumber.Text.Trim();
                    _conmdl.DriverMobileNo = UCTtxtdrivemobile.Text.Trim();
                    _conmdl.DriverName = UCTtxtdrivername.Text.Trim();
                    _conmdl.TareWeight = Convert.ToString(UCTtxttareweight.Text);
                    _conmdl.GrossWeight = Convert.ToString(UCTtxtgrossweight.Text);
                    // _conmdl.TotalWeight = Convert.ToString(UCTtxtcapcity.Text);
                    _conmdl.Comment = UCTtxtremark.Text.Trim();
                    _conmdl.FirstCameraImageurl = frontCameraImage;
                    _conmdl.SecondCameraImage = rearCameraImage;
                    _conmdl.IpAddress = checkcon.GetMacAddress();
                    _conmdl.Isactive = true;
                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    datacollection.Add("rawannaNo", Convert.ToString(UCTtxteRawannaNo.Text.Trim()));
                    datacollection.Add("weight", Convert.ToString(UCTtxtgrossweight.Text));
                    datacollection.Add("leaseId", "");
                    datacollection.Add("frontImage", frontCameraImage);
                    datacollection.Add("rearImage", rearCameraImage);
                    try
                    {
                        dtresult = await minesmart.Helper.Cls_PostMines.TPgenerateTransitPass(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPTranistPass, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                        if (dtresult != null && dtresult.Rows.Count > 0)
                        {
                            if (dtresult.Rows[0]["status"].ToString() == "301")
                            {
                                UCTClearAllData();
                                MessageBox.Show(dtresult.Rows[0]["MessageDiscription"].ToString(), " DMG Response");
                            }
                            else
                            {
                                _conmdl.Authtoken = WebAPIModelResponse.Authtoken.ToString();
                                _conmdl.Rawannastatus = dtresult.Rows[0]["status"].ToString();
                                _conmdl.TransitPassNumber = dtresult.Rows[0]["eRawannaNo"].ToString();
                                //_conmdl.MessageDiscription = dtresult.Rows[0]["MessageDiscription"].ToString();
                                _conmdl.Royaltyamount = dtresult.Rows[0]["Royaltyamount"].ToString();
                                //_conmdl.RawannaDate = Convert.ToDateTime(dtresult.Rows[0]["rawannaDate"].ToString());
                                WebAPIModelResponse.eRawannaNo = dtresult.Rows[0]["eRawannaNo"].ToString();
                                WebAPIModelResponse.PostUrl = "/Api/ErawaanaAPI/SetTransitPass/";
                                var responseDetails = WebAPI.PostinsertTransitPass(WebAPIModelResponse.PostUrl, _conmdl).Result;
                                if (responseDetails.Status != "204")
                                {

                                    UCTClearAllData();
                                    if (chkdmguntpass.Checked)
                                    {
                                        //Print Dmg
                                        var targetURLDMG = minesmart.Helper.HttpServiceUrl.DMGravannaStatusURL + Convert.ToString(dtresult.Rows[0]["eRawannaNo"].ToString()).Replace("\"", string.Empty).Trim().ToString();
                                        var psi = new ProcessStartInfo
                                        {
                                            FileName = targetURLDMG,
                                            UseShellExecute = true
                                        };
                                        Process.Start(psi);
                                    }
                                    if (chkprintuntpass.Checked)
                                    {
                                        //Print
                                        var targetURLLOCAL = minesmart.Helper.HttpServiceUrl.PrintCTPWebsiteUrl + Comman.EncryptData(Convert.ToString(dtresult.Rows[0]["eRawannaNo"].ToString()).Replace("\"", string.Empty).Trim().ToString());
                                        var psilocal = new ProcessStartInfo
                                        {
                                            FileName = targetURLLOCAL,
                                            UseShellExecute = true
                                        };
                                        Process.Start(psilocal);
                                    }
                                    //minesmart.Helper.Comman.handleShare(GetDict(dtresult), "Confirm e-Rawanna");

                                }
                                else
                                {
                                    UCTClearAllData();
                                    MessageBox.Show("Error Occured durning this Insert into table.Please Try again.", "Auth token");
                                }
                            }
                        }
                        else
                        {
                            UCTClearAllData();
                        }
                    }
                    catch (Exception ex)
                    {
                        UCTClearAllData();
                        minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");

                    }
                }
                else
                {
                    UCTClearAllData();
                    MessageBox.Show("Please Search the Rawanna Number.", "Search");
                }

            }
            catch (Exception ex)
            {
                UCTClearAllData();
                minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");

            }
        }
        #endregion

        private void tabControl2_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                String selected = tabControl2.SelectedTab.Text;
                rtsp1 = WebAPIModelResponse.CameraRearUrl;
                rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                if (selected.ToString() == "COMFIRM RAWANNA")
                {
                    ClearAllData();
                    //streamPlayerControl2.StartPlay(new Uri(rtsp1));
                    //streamPlayerControl1.StartPlay(new Uri(rtsp2));
                }
                else
                {
                    ClearUnconfirmRawannadata();
                    //unconfirmcamerafront.StartPlay(new Uri(rtsp1));
                    //unconfirmcamerarear.StartPlay(new Uri(rtsp2));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "tabControl2_SelectedIndexChanged");
            }
        }

        private void tabControl3_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                String selected = tabControl3.SelectedTab.Text;
                rtsp1 = WebAPIModelResponse.CameraRearUrl;
                rtsp2 = WebAPIModelResponse.CameraFrontUrl;
                if (selected.ToString() == "CONFIRM TRANSIT PASS" || selected.ToString() == "कन्फर्म  ट्रैन्ज़िट पास")
                {
                    CTClearAllData();
                    ClearAllData();
                    //CTfront.StartPlay(new Uri(rtsp1));
                    //CTrear.StartPlay(new Uri(rtsp2));
                }
                else
                {
                    UCTClearAllData();
                    ClearUnconfirmRawannadata();
                    //UCTfront.StartPlay(new Uri(rtsp1));
                    //UCTrear.StartPlay(new Uri(rtsp2));
                }
                CTBindDealerDetail();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "tabControl3_SelectedIndexChanged");
            }
        }

        #region DashBoard
        private DataTable LoadCollectionData()
        {
            SettingModel ssmdl = new SettingModel();
            DataTable dtnew = new DataTable();
            ssmdl.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
            ssmdl.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
            ssmdl.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
            ssmdl.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
            ssmdl.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
            ssmdl.PostUrl = "/Api/ErawaanaAPI/getOrderDetail/";
            dtnew = WebAPI.PostOrderDetail(ssmdl.PostUrl, ssmdl).Result;
            return dtnew;
        }
        #endregion

        private void dataGridView2_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView2_SelectionChanged(object sender, EventArgs e)
        {
            if (dataGridView2.SelectedCells.Count > 0)
            {
                var rowsCount = dataGridView2.SelectedRows.Count;
                if (rowsCount == 0 || rowsCount > 1) return;
                int firstRowIndex = dataGridView2.SelectedRows.Count - 1;
                var row = dataGridView2.SelectedRows[0];
                if (row.Index == 0) return;
                if (row.Index != 0)
                {
                    string cell = dataGridView2.SelectedRows[0].Cells[1].Value.ToString();
                    string cell2 = dataGridView2.SelectedRows[firstRowIndex].Cells[1].Value.ToString();
                    WebAPIModelResponse.eRawannaNo = cell;
                    // MessageBox.Show("Last selected row at cell[0] value: " + cell + " First Selected row at cell[0] value: " + cell2);
                    //var cfraanna = new ConfirmERawanna();
                    //cfraanna.Show();
                }
                else
                {
                    string cell = dataGridView2.SelectedRows[0].Cells[1].Value.ToString();
                    string cell2 = dataGridView2.SelectedRows[firstRowIndex].Cells[1].Value.ToString();
                    //var mainForm = new Setting();
                    //mainForm.Show();
                }


            }
        }

        private void dataGridView3_CellClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void dataGridView3_SelectionChanged(object sender, EventArgs e)
        {
            try
            {
                if (dataGridView2.SelectedCells.Count > 0)
                {
                    var rowsCount = dataGridView2.SelectedRows.Count;
                    if (rowsCount == 0 || rowsCount > 1) return;
                    int firstRowIndex = dataGridView2.SelectedRows.Count - 1;
                    var row = dataGridView2.SelectedRows[0];
                    if (row.Index == 0) return;
                    if (row.Index != 0)
                    {
                        string cell = dataGridView2.SelectedRows[0].Cells[1].Value.ToString();
                        string cell2 = dataGridView2.SelectedRows[firstRowIndex].Cells[1].Value.ToString();
                        WebAPIModelResponse.eRawannaNo = cell;
                        // MessageBox.Show("Last selected row at cell[0] value: " + cell + " First Selected row at cell[0] value: " + cell2);
                        //var cfraanna = new ConfirmERawanna();
                        //cfraanna.Show();
                    }
                    else
                    {
                        string cell = dataGridView2.SelectedRows[0].Cells[1].Value.ToString();
                        string cell2 = dataGridView2.SelectedRows[firstRowIndex].Cells[1].Value.ToString();
                        //var mainForm = new Setting();
                        //mainForm.Show();
                    }


                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "dataGridView3_SelectionChanged");
            }
        }

        private void CTcmbmineraluserfor_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        public async void CTPGetConsigneeDetails(string dealerinfoIds, string mineralusefor)
        {
            try
            {

                JObject returnJOBJECT = new JObject();
                ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
                if (Convert.ToInt16(dealerinfoIds) > 0)
                {
                    if (checkBox2.Checked)
                    {
                        try
                        {
                            Dictionary<string, string> datacollection = new Dictionary<string, string>(4);
                            datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                            datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                            datacollection.Add("referenceId", Convert.ToString(cmbdealername));
                            datacollection.Add("mineralUsedFor", Convert.ToString(mineralusefor));
                            //datacollection.Add("searchText", Convert.ToString(searchtext));
                            var result = string.Empty;
                            try
                            {
                                if (WebAPIModelResponse.Authtoken.ToString() != "")
                                {
                                    dtConsigneeaddress = await minesmart.Helper.Cls_PostMines.getTPConsigneeDetails(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPConsigneeDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                                    if (dtConsigneeaddress != null && dtConsigneeaddress.Rows.Count > 0)
                                    {
                                        if (dtConsigneeaddress.Rows.Count == 1)
                                        {
                                            if (dtConsigneeaddress.Rows[0]["Status"].ToString() == "301")
                                            {
                                                MessageBox.Show(dtConsigneeaddress.Rows[0]["MessageDiscription"].ToString(), "CTPGetConsigneeDetails", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                return;
                                            }
                                            else
                                            {
                                                collCTcons.Clear();
                                                CTcmbconsigneename.ResetText();
                                                CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                                                if (dtConsigneeaddress.Rows.Count == 1)
                                                {
                                                    CTcmbconsigneename.Text = dtConsigneeaddress.Rows[0]["firmName"].ToString();
                                                }
                                                else
                                                {
                                                    collCTcons.Clear();
                                                    for (int i = 0; i < dtConsigneeaddress.Rows.Count; i++)
                                                    {
                                                        if (dtConsigneeaddress.Rows[i]["firmName"].ToString() != "")
                                                        {
                                                            collCTcons.Add(dtConsigneeaddress.Rows[i]["firmName"].ToString());
                                                        }
                                                    }
                                                    CTcmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                                    CTcmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                                    //CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            collCTcons.Clear();
                                            CTcmbconsigneename.ResetText();
                                            CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                                            if (dtConsigneeaddress.Rows.Count == 1)
                                            {
                                                CTcmbconsigneename.Text = dtConsigneeaddress.Rows[0]["firmName"].ToString();
                                            }
                                            else
                                            {
                                                collCTcons.Clear();
                                                for (int i = 0; i < dtConsigneeaddress.Rows.Count; i++)
                                                {
                                                    if (dtConsigneeaddress.Rows[i]["firmName"].ToString() != "")
                                                    {
                                                        collCTcons.Add(dtConsigneeaddress.Rows[i]["firmName"].ToString());
                                                    }
                                                }
                                                CTcmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                                CTcmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                                //CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                                            }
                                        }
                                    }


                                }
                                else
                                {
                                    MessageBox.Show("Error Occured durning this process.Please Try again.", "CTPGetConsigneeDetails", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorModel errormdl = new ErrorModel();
                                if (ex.Message.ToString().Contains("Status"))
                                {
                                    var parsed = JObject.Parse(ex.Message.ToString());
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                else
                                {
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    errormdl.Exp = ex;
                                    errormdl.Message = ex.Message;
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                MessageBox.Show(ex.Message, "CTPGetConsigneeDetails1");
                            }

                        }
                        catch (Exception ex)
                        {
                            ErrorModel errormdl = new ErrorModel();
                            if (ex.Message.ToString().Contains("Status"))
                            {
                                var parsed = JObject.Parse(ex.Message.ToString());
                                errormdl.DateLog = DateTime.Now.ToString();
                                //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            else
                            {
                                errormdl.DateLog = DateTime.Now.ToString();
                                errormdl.Exp = ex;
                                errormdl.Message = ex.Message;
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            MessageBox.Show(ex.Message, "CTPGetConsigneeDetail2");

                        }
                    }
                    else

                    {
                        collCTcons.Clear();
                        CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                    }
                }
                else
                    MessageBox.Show("Some Error Occured this Please Login Again", "CTPGetConsigneeDetaile1");

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTPGetConsigneeDetail3");

            }
        }

        public async void CTPGetConsigneeDetails(string dealerinfoIds, string mineralusefor, string searchtext)
        {
            try
            {

                JObject returnJOBJECT = new JObject();
                ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
                if (Convert.ToInt16(dealerinfoIds) > 0)
                {
                    if (checkBox2.Checked)
                    {
                        try
                        {
                            Dictionary<string, string> datacollection = new Dictionary<string, string>(4);
                            datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                            datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                            datacollection.Add("referenceId", Convert.ToString(cmbdealername));
                            datacollection.Add("mineralUsedFor", Convert.ToString(mineralusefor));
                            datacollection.Add("searchText", Convert.ToString(searchtext.ToLower()));
                            var result = string.Empty;
                            try
                            {
                                if (WebAPIModelResponse.Authtoken.ToString() != "")
                                {
                                    dtConsigneeaddress = await minesmart.Helper.Cls_PostMines.TPsearchconsigneedtl(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_TPSearchDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                                    if (dtConsigneeaddress != null && dtConsigneeaddress.Rows.Count > 0)
                                    {
                                        if (dtConsigneeaddress.Rows.Count == 1)
                                        {
                                            if (dtConsigneeaddress.Rows[0]["Status"].ToString() == "301")
                                            {
                                                MessageBox.Show(dtConsigneeaddress.Rows[0]["MessageDiscription"].ToString(), "CTPGetConsigneeDetails", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                return;
                                            }
                                            else if (dtConsigneeaddress.Rows[0]["Status"].ToString() == "200")
                                            {
                                                MessageBox.Show("No Record Found", "CTPGetConsigneeDetails", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                return;
                                            }
                                            else
                                            {
                                                if (dtConsigneeaddress.Rows.Count == 1)
                                                {
                                                    CTcmbconsigneename.Text = dtConsigneeaddress.Rows[0]["firmName"].ToString();
                                                }
                                                else
                                                {

                                                    for (int i = 0; i < dtConsigneeaddress.Rows.Count; i++)
                                                    {
                                                        if (dtConsigneeaddress.Rows[i]["firmName"].ToString() != "")
                                                        {
                                                            collCTcons.Add(dtConsigneeaddress.Rows[i]["firmName"].ToString());
                                                        }
                                                    }
                                                    CTcmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                                    CTcmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                                    CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                                                }
                                            }
                                        }
                                        else
                                        {

                                            if (dtConsigneeaddress.Rows.Count == 1)
                                            {
                                                CTcmbconsigneename.Text = dtConsigneeaddress.Rows[0]["firmName"].ToString();
                                            }
                                            else
                                            {

                                                for (int i = 0; i < dtConsigneeaddress.Rows.Count; i++)
                                                {
                                                    if (dtConsigneeaddress.Rows[i]["firmName"].ToString() != "")
                                                    {
                                                        collCTcons.Add(dtConsigneeaddress.Rows[i]["firmName"].ToString());
                                                    }
                                                }
                                                CTcmbconsigneename.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                                CTcmbconsigneename.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                                // CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    MessageBox.Show("Error Occured durning this process.Please Try again.", "CTPGetConsigneeDetails", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                }
                            }
                            catch (Exception ex)
                            {
                                ErrorModel errormdl = new ErrorModel();
                                if (ex.Message.ToString().Contains("Status"))
                                {
                                    var parsed = JObject.Parse(ex.Message.ToString());
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                else
                                {
                                    errormdl.DateLog = DateTime.Now.ToString();
                                    errormdl.Exp = ex;
                                    errormdl.Message = ex.Message;
                                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                                }
                                MessageBox.Show(ex.Message, "CTPGetConsigneeDetails1");
                            }

                        }
                        catch (Exception ex)
                        {
                            ErrorModel errormdl = new ErrorModel();
                            if (ex.Message.ToString().Contains("Status"))
                            {
                                var parsed = JObject.Parse(ex.Message.ToString());
                                errormdl.DateLog = DateTime.Now.ToString();
                                //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                                errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            else
                            {
                                errormdl.DateLog = DateTime.Now.ToString();
                                errormdl.Exp = ex;
                                errormdl.Message = ex.Message;
                                minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                            }
                            MessageBox.Show(ex.Message, "CTPGetConsigneeDetail2");

                        }
                    }
                    else

                    {
                        collCTcons.Clear();
                        CTcmbconsigneename.AutoCompleteCustomSource.Clear();
                    }
                }
                else
                    MessageBox.Show("Some Error Occured this Please Login Again", "CTPGetConsigneeDetaile1");

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTPGetConsigneeDetail3");

            }
        }
        private void CTcmbconsigneeaddress_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {
                CTcmbconsigneeaddress.DroppedDown = true;
                if (char.IsControl(e.KeyChar))
                {
                    return;
                }
                string str = CTcmbconsigneeaddress.Text.Substring(0, CTcmbconsigneeaddress.SelectionStart) + e.KeyChar;
                Int32 index = CTcmbconsigneeaddress.FindString(str);
                if (index == -1)
                {
                    index = CTcmbconsigneeaddress.FindString(str);
                }
                this.CTcmbconsigneeaddress.SelectedIndex = index;
                this.CTcmbconsigneeaddress.SelectionStart = str.Length;
                this.CTcmbconsigneeaddress.SelectionLength = this.CTcmbconsigneeaddress.Text.Length - this.CTcmbconsigneeaddress.SelectionStart;
                e.Handled = true;
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmbconsigneeaddress_KeyPress");

            }
        }

        private void cmbmineralws_KeyPress(object sender, KeyPressEventArgs e)
        {
            cmbmineralws.DroppedDown = true;
            if (char.IsControl(e.KeyChar))
            {
                return;
            }
            string str = cmbmineralws.Text.Substring(0, cmbmineralws.SelectionStart) + e.KeyChar;
            Int32 index = cmbmineralws.FindString(str);
            if (index == -1)
            {
                index = cmbmineralws.FindString(str);
            }
            this.cmbmineralws.SelectedIndex = index;
            this.cmbmineralws.SelectionStart = str.Length;
            this.cmbmineralws.SelectionLength = this.cmbmineralws.Text.Length - this.cmbmineralws.SelectionStart;
            e.Handled = true;
        }



        private void txtwghttareweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void txtwghtgross_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void txtwghtnetweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void txtdrivemobilenows_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }


        private void CTtxttareweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void CTtxtgrossweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void CTtxtnetweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void CTtxtmobileno_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void CTtxtwehicleweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void CTtxtapproxdistance_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void CTtxtapproxtime_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void txtapproxtime_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void txttonnes_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.Handled = !char.IsDigit(e.KeyChar);
        }

        private void txtmobileno_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }

        private void txttareweight_KeyPress(object sender, KeyPressEventArgs e)
        {
            // allows 0-9, backspace, and decimal
            if (((e.KeyChar < 48 || e.KeyChar > 57) && e.KeyChar != 8 && e.KeyChar != 46))
            {
                e.Handled = true;
                return;
            }

            // checks to make sure only 1 decimal is allowed
            if (e.KeyChar == 46)
            {
                if ((sender as TextBox).Text.IndexOf(e.KeyChar) != -1)
                    e.Handled = true;
            }
        }
        private void txtfronturl_Validated(object sender, EventArgs e)
        {
            if (txtfronturl.Text != "")
            {
                WebAPIModelResponse.CameraFrontUrl = txtfronturl.Text.Trim();
                rtsp1 = WebAPIModelResponse.CameraFrontUrl;
                uc.streamPlayerControl1.StartPlay(new Uri(rtsp1), TimeSpan.FromMilliseconds(500), RtspTransport.Undefined, RtspFlags.None);
                uc.Refresh();
            }


        }

        private void txtrearcameraurl_Validated(object sender, EventArgs e)
        {
            if (txtrearcameraurl.Text != "")
            {
                WebAPIModelResponse.CameraRearUrl = txtrearcameraurl.Text.Trim();
                rtsp2 = WebAPIModelResponse.CameraRearUrl;
                uc.streamPlayerControl2.StartPlay(new Uri(rtsp2), TimeSpan.FromMilliseconds(500), RtspTransport.Undefined, RtspFlags.None);
                uc.Refresh();
            }

        }



        private void button1_Click_1(object sender, EventArgs e)
        {

        }

        private void FinalPage_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyData == System.Windows.Forms.Keys.Enter)
            {
                SendKeys.Send("{TAB}");
            }
        }

        #region Report
        void BindConfirmrawanna(string SearchRawanna)
        {
            try
            {
                DataTable dtvehi = new DataTable();

                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                _settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.SearchDetails = Convert.ToString(SearchRawanna);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetConfirmrawanna/";
                dtvehi = WebAPI.PostGetConfirmrawanna(_settingModal.PostUrl, _settingModal).Result;
                if (dtvehi != null)
                {
                    if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "210")
                    {
                        DataTable dd = new DataTable();
                        dataGridView1.Width = 140;
                        dataGridView1.Height = 90;
                        dd.Columns.Add(" MESSAGE  ");
                        dd.Rows.Add("Empty Table");
                        dtgridconfirmrawanna.DataSource = dd;
                        dtgridconfirmrawanna.ReadOnly = true;

                    }
                    else
                    {
                        dtgridconfirmrawanna.DataSource = dtvehi;
                        dtgridconfirmrawanna.ReadOnly = true;

                    }
                    cmbsearchrawanna.SelectedIndex = 1;
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        void BindInvoice()
        {

        }
        void BindConfirmTPass(string SearchRawanna)
        {
            try
            {
                DataTable dtvehi = new DataTable();

                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                _settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.SearchDetails = Convert.ToString(SearchRawanna);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetConfirmTPass/";
                dtvehi = WebAPI.PostGetConfirmTPass(_settingModal.PostUrl, _settingModal).Result;
                if (dtvehi != null)
                {
                    if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "210")
                    {
                        DataTable dd = new DataTable();
                        dataGridView1.Width = 140;
                        dataGridView1.Height = 90;
                        dd.Columns.Add(" MESSAGE  ");
                        dd.Rows.Add("Empty Table");
                        dtgridTpass.DataSource = dd;
                        dtgridTpass.ReadOnly = true;
                    }
                    else
                    {
                        dtgridTpass.DataSource = dtvehi;
                        dtgridTpass.ReadOnly = true;
                    }
                    cnbtrstpass.SelectedIndex = 1;
                }

            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        void BindWeightslip()
        {
            try
            {
                DataTable dtvehi = new DataTable();

                var response = string.Empty;
                _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                _settingModal.UserCredid = Convert.ToInt64(WebAPIModelResponse.UserCredtentialId);
                _settingModal.UserProfileid = Convert.ToInt64(WebAPIModelResponse.UserProfileid);
                _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                _settingModal.PostUrl = "/Api/ErawaanaAPI/GetWeightSlipDetails/";
                dtvehi = WebAPI.PostGetWeightSlipDetails(_settingModal.PostUrl, _settingModal).Result;
                if (dtvehi != null)
                {

                    if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "210")
                    {
                        DataTable dd = new DataTable();
                        dataGridView1.Width = 140;
                        dataGridView1.Height = 90;
                        dd.Columns.Add(" MESSAGE  ");
                        dd.Rows.Add("Empty Table");
                        dtgrdweightslip.DataSource = dd;
                        dtgrdweightslip.ReadOnly = true;
                    }
                    else
                    {
                        dtgrdweightslip.DataSource = dtvehi;
                        dtgrdweightslip.ReadOnly = true;
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        private void tabControl4_SelectedIndexChanged(object sender, EventArgs e)
        {
            String selected = tabControl4.SelectedTab.Name;
            if (selected == "ConfirmRawanna")
            {
                SearchRawanna = "1";
                //BindRawanna();

                BindConfirmrawanna(SearchRawanna);
            }
            else if (selected == "Invoice")
            {
                BindInvoice();
            }
            else if (selected == "ConfirmTPass")
            {
                SearchRawanna = "1";
                BindConfirmTPass(SearchRawanna);
            }
            else if (selected == "WeightSlip")
            {
                BindWeightslip();
            }
            else
            {

            }
        }

        #endregion

        private void btnrawannasearch_Click(object sender, EventArgs e)
        {
            try
            {
                if (cmbsearchrawanna.Text != "System.Data.DataRowView" && cmbsearchrawanna.Text != "Select" && cmbsearchrawanna.Text != "")
                {
                    if (Convert.ToString(cmbsearchrawanna.Text) == "Confirm")
                    {
                        SearchRawanna = "2";
                        BindConfirmrawanna(SearchRawanna);
                    }
                    else
                    {
                        SearchRawanna = "1";
                        BindConfirmrawanna(SearchRawanna);
                    }

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "btnrawannasearch_Click");
            }
        }

        private void cmbsearchrawanna_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbsearchrawanna.Text != "System.Data.DataRowView" && cmbsearchrawanna.Text != "Select" && cmbsearchrawanna.Text != "")
                {
                    if (Convert.ToString(cmbsearchrawanna.Text) == "Confirm")
                        SearchRawanna = "2";
                    else
                        SearchRawanna = "1";
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbsearchrawanna_SelectedIndexChanged");
            }
        }

        private void cnbtrstpass_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cnbtrstpass.Text != "System.Data.DataRowView" && cnbtrstpass.Text != "Select" && cnbtrstpass.Text != "")
                {
                    if (Convert.ToString(cnbtrstpass.Text) == "Confirm")
                        SearchRawanna = "2";
                    else
                        SearchRawanna = "1";
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cnbtrstpass_SelectedIndexChanged");
            }
        }

        private void btntpass_Click(object sender, EventArgs e)
        {
            if (cnbtrstpass.Text != "System.Data.DataRowView" && cnbtrstpass.Text != "Select" && cnbtrstpass.Text != "")
            {
                if (Convert.ToString(cnbtrstpass.Text) == "Confirm")
                {
                    SearchRawanna = "2";
                    BindConfirmTPass(SearchRawanna);
                }
                else
                {
                    SearchRawanna = "1";
                    BindConfirmTPass(SearchRawanna);
                }

            }
        }

        private void button3_Click(object sender, EventArgs e)
        {

        }

        private void dataGridView4_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == 10)
            {
                DataTable dtcdtl = new DataTable();
                dtcdtl.Columns.Add("TicketNumber", typeof(string));
                dtcdtl.Columns.Add("VehicleNo", typeof(string));
                DataRow dr = dtcdtl.NewRow();
                dr = dtcdtl.NewRow();
                dr["TicketNumber"] = Convert.ToString(dataGridView4.Rows[e.RowIndex].Cells[0].Value.ToString());
                dr["VehicleNo"] = Convert.ToString("WeightSlip");
                dtcdtl.Rows.Add(dr);
                var targetURL = minesmart.Helper.HttpServiceUrl.PrintWeightSlipWebsiteUrl + Comman.EncryptData(Convert.ToString(dataGridView4.Rows[e.RowIndex].Cells[0].Value.ToString()).Replace("\"", string.Empty).Trim().ToString()) + "&UId=" + Comman.EncryptData(WebAPIModelResponse.UserCredtentialId);
                var psi = new ProcessStartInfo
                {
                    FileName = targetURL,
                    UseShellExecute = true
                };
                Process.Start(psi);
            }
        }

        private void cmbconsigneeinov_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbconsigneeinov.Text != "System.Data.DataRowView" && cmbconsigneeinov.Text != "Select" && cmbconsigneeinov.Text != "")
                {
                    try
                    {
                        DataTable dtvehi = new DataTable();
                        var strresult = string.Empty;
                        SettingModel settingModal = new SettingModel();
                        settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                        settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                        settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                        settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                        settingModal.ConsigneeNameId = Convert.ToInt64(cmbconsigneeinov.SelectedValue);
                        settingModal.PostUrl = "/Api/ErawaanaAPI/getInvoiceConsigneeNameGST/";
                        dtvehi = WebAPI.PostgetInvoiceConsigneeNameGST(settingModal.PostUrl, settingModal).Result;
                        if (dtvehi != null)
                        {

                            if (Convert.ToString(dtvehi.Rows[0]["Status"]) == "200")
                            {
                                txtgistnumber.Text = Convert.ToString(dtvehi.Rows[0]["ConsigneeGST"]);
                                txtgistnumber_TextChanged(null, null);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message, "cmbconsigneeinov_SelectedIndexChanged");
                    }
                }
                else
                {
                    txtgistnumber.Text = "";
                    lblIgst.Visible = false;
                    lbligstamt.Visible = false;

                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbconsigneeinov_SelectedIndexChanged");
            }
        }
        public void Loaddatabind()
        {
            DataTable dtn = new DataTable();
            SettingModel settingModal = new SettingModel();
            try
            {
                settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                settingModal.PostUrl = "/Api/ErawaanaAPI/getcompanydetails/";
                wb = WebAPI.PostGetcompanydetails(settingModal.PostUrl, settingModal).Result;
                if (WebAPIModelResponse.success == "200")
                {
                    //txtname.Text = WebAPIModelResponse.FirmName;
                    FirmGSTNumber = WebAPIModelResponse.FirmGSTNumber;
                }
            }
            catch (Exception ex)
            {
                // minesmart.Helper.ErrorLog.WriteSettingLog(ex, "custommessage", "");
                System.Windows.Forms.MessageBox.Show(ex.Message);
                System.Windows.Forms.MessageBox.Show(ex.StackTrace);
                System.Windows.Forms.MessageBox.Show(ex.InnerException.ToString());
                //System.Windows.Forms.MessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                MessageBox.Show(ex.Message, "Loaddatabind");
            }
        }
        private void cmbconsigneeinov_KeyPress(object sender, KeyPressEventArgs e)
        {
            cmbconsigneeinov.DroppedDown = true;
            if (char.IsControl(e.KeyChar))
            {
                return;
            }
            string str = cmbconsigneeinov.Text.Substring(0, cmbconsigneeinov.SelectionStart) + e.KeyChar;
            Int32 index = cmbconsigneeinov.FindString(str);
            if (index == -1)
            {
                index = cmbconsigneeinov.FindString(str);
            }
            this.cmbconsigneeinov.SelectedIndex = index;
            this.cmbconsigneeinov.SelectionStart = str.Length;
            this.cmbconsigneeinov.SelectionLength = this.cmbconsigneeinov.Text.Length - this.cmbconsigneeinov.SelectionStart;
            e.Handled = true;
        }

        //private async void BindMLList()
        //{
        //    JObject returnJOBJECT = new JObject();
        //    DataTable dtLeaseList = new DataTable();
        //    DataTable dt = new DataTable();
        //    ConsigneeDetailsModel consigneeDetails = new ConsigneeDetailsModel();
        //    var newcomboresult = string.Empty;
        //    try
        //    {
        //        Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
        //        datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
        //        datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
        //        var result = string.Empty;
        //        dtMlno = await minesmart.Helper.Cls_PostMines.LeaseListdetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_leaseDetail, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
        //        collMlno.Clear();
        //        for (int i = 0; i < dtMlno.Rows.Count; i++)
        //        {
        //            collMlno.Add(dtMlno.Rows[i]["LeaseNo"].ToString());
        //        }
        //        txtmlhelp.PlaceholderText = "Please Select";
        //        txtmlhelp.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        //        txtmlhelp.AutoCompleteSource = AutoCompleteSource.CustomSource;
        //        txtmlhelp.AutoCompleteCustomSource = collMlno;

        //    }
        //    catch (Exception ex)
        //    {

        //        ErrorModel errormdl = new ErrorModel();
        //        if (ex.Message.ToString().Contains("Status"))
        //        {
        //            var parsed = JObject.Parse(ex.Message.ToString());
        //            errormdl.DateLog = DateTime.Now.ToString();
        //            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
        //            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
        //            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
        //        }
        //        else
        //        {
        //            errormdl.DateLog = DateTime.Now.ToString();
        //            errormdl.Exp = ex;
        //            errormdl.Message = ex.Message;
        //            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
        //        }
        //        MessageBox.Show(ex.Message);

        //    }

        //}

        private void cmbmlno_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (cmbmlno.Text != "")
                {
                    if (cmbmlno.Text.Length >= 3)
                    {
                        if (cmbmlno.AutoCompleteCustomSource.Count == 0)
                        {
                            cmbmlno.AutoCompleteCustomSource = collMlno;

                        }
                    }
                    else
                    {
                        if (cmbmlno.Text.Length < 3)
                        {
                            //cmbconsigneename.AutoCompleteCustomSource = null;

                        }
                    }
                }
                else
                {
                    ClearAllData();
                }


            }
            catch (Exception ex)
            {

                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbmlno_TextChanged");

            }

        }

        private void cmbconsigneename_TextChanged(object sender, EventArgs e)
        {

            if (cmbconsigneename.Text.Length >= 3)
            {
                if (cmbconsigneename.AutoCompleteCustomSource.Count == 0)
                {
                    cmbconsigneename.AutoCompleteCustomSource = collCons;

                }

            }
            else
            {
                if (cmbconsigneename.Text.Length < 3)
                {
                    //cmbconsigneename.AutoCompleteCustomSource = null;

                }
            }
        }

        private void cmbmlno_Validated(object sender, EventArgs e)
        {
            try
            {
                if (cmbmlno.Text != "")
                {
                    cmbconsigneename.Text = string.Empty;
                    cmbconsigneename.ResetText();
                    cmbconsigneename.AutoCompleteCustomSource.Clear();
                    cmbconsigneeaddress.Text = string.Empty;
                    cmbconsigneeaddress.ResetText();
                    cmbconsigneeaddress.AutoCompleteCustomSource.Clear();
                    cmbmineral.Text = string.Empty;
                    cmbmineral.ResetText();
                    cmbmineral.AutoCompleteCustomSource.Clear();
                    if (dtMlno.Rows.Count > 0)
                    {
                        DataTable dtnew = new DataTable();
                        DataView dvData = new DataView(dtMlno);
                        dvData.RowFilter = " LeaseNo='" + cmbmlno.Text.Trim() + "'";
                        dtnew = dvData.ToTable();
                        if (dtnew.Rows.Count > 0)
                            leasenoId = Convert.ToInt64(dtnew.Rows[0]["LeaseId"].ToString());
                        if (cmbmlno.Text != null && cmbmlno.Text != "")
                        {
                            if (Convert.ToInt32(leasenoId) > 0)
                            {
                                GetconsigneeDetails(Convert.ToInt32(leasenoId));
                                WebAPIModelResponse.mineralNameuserfor = Convert.ToString(cmbmineraluserfor.SelectedValue);
                                comboleasenovalue = Convert.ToInt32(leasenoId);
                                GetMineralDetails(Convert.ToInt32(leasenoId));

                            }
                        }
                    }
                    else
                    {
                        ClearAllData();
                    }
                }
                else
                {
                    ClearAllData();
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbmlno_Validated");
            }
        }

        private void cmbconsigneename_Validated(object sender, EventArgs e)
        {
            try
            {
                if (dtConsignee != null)
                {
                    if (cmbconsigneename.Text != null && cmbconsigneename.Text != "")
                    {
                        if (cmbconsigneename.Text.ToString().Contains("("))
                        {

                            DataTable dtnew = new DataTable();
                            DataView dvData = new DataView(dtConsignee);
                            dvData.RowFilter = " ConsigneeName='" + cmbconsigneename.Text.Trim() + "'";
                            dtnew = dvData.ToTable();
                            if (dtnew.Rows.Count > 0)
                                ConsigneeId = Convert.ToInt64(dtnew.Rows[0]["ConsigneeId"].ToString());
                            if (cmbmlno.Text != null && cmbmlno.Text != "")
                            {
                                if (Convert.ToInt32(ConsigneeId) > 0)
                                {
                                    var consigneenameregst = cmbconsigneename.Text.ToString();
                                    if (consigneenameregst.Contains("("))
                                    {
                                        string[] consigneegst = consigneenameregst.Split('(');
                                        txtconsigneegst.Text = consigneegst[1].ToString().Replace("  ", "");
                                        txtconsigneegst.Text = txtconsigneegst.Text.Replace(")", "");
                                        cmbconsigneename.Text = consigneenameregst.ToString().Replace("  ", "");
                                        txtconsigneegst.ReadOnly = true;
                                        txtconsigneegst.ReadOnly = true;
                                    }
                                    else
                                    {
                                        txtconsigneegst.Text = string.Empty;
                                        txtconsigneegst.ReadOnly = true;
                                    }
                                }
                            }


                            //var comboconsigneetext = cmbconsigneename.Text.ToString();
                            GetconsigneeAddressDetails(ConsigneeId);


                        }
                        else
                        {
                            txtconsigneegst.Text = string.Empty;
                            txtconsigneegst.ReadOnly = true;
                            txtconsigneegst.Text = string.Empty;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "cmbconsigneename_Validated");

            }
        }


        #region Minmize Application

        private void MineMart_Resize(object sender, EventArgs e)
        {

            if (this.WindowState == FormWindowState.Maximized)
            {
                BindGetSetting();
                uc.UserInitializationForSerialPort();
                rtsp1 = WebAPIModelResponse.CameraFrontUrl;
                rtsp2 = WebAPIModelResponse.CameraRearUrl;
                uc.streamPlayerControl1.StartPlay(new Uri(rtsp1), TimeSpan.FromMilliseconds(500), RtspTransport.Undefined, RtspFlags.None);
                uc.streamPlayerControl1.StartPlay(new Uri(rtsp1), TimeSpan.FromMilliseconds(500), RtspTransport.Undefined, RtspFlags.None);
                uc.Refresh();

            }
        }
        #endregion
        private void panel2_Paint(object sender, PaintEventArgs e)
        {
            Panel panel = (Panel)sender;
            float width = (float)4.0;
            Pen pen = new Pen(SystemColors.ControlDark, width);
            pen.DashStyle = DashStyle.Dot;
            e.Graphics.DrawLine(pen, 0, 0, 0, panel.Height - 0);
            e.Graphics.DrawLine(pen, 0, 0, panel.Width - 0, 0);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, 0, panel.Height - 1);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, panel.Width - 1, 0);
        }

        private void panel4_Paint(object sender, PaintEventArgs e)
        {
            Panel panel = (Panel)sender;
            float width = (float)4.0;
            Pen pen = new Pen(SystemColors.ControlDark, width);
            pen.DashStyle = DashStyle.Dot;
            e.Graphics.DrawLine(pen, 0, 0, 0, panel.Height - 0);
            e.Graphics.DrawLine(pen, 0, 0, panel.Width - 0, 0);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, 0, panel.Height - 1);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, panel.Width - 1, 0);
        }

        private void panel6_Paint(object sender, PaintEventArgs e)
        {
            Panel panel = (Panel)sender;
            float width = (float)4.0;
            Pen pen = new Pen(SystemColors.ControlDark, width);
            pen.DashStyle = DashStyle.Dot;
            e.Graphics.DrawLine(pen, 0, 0, 0, panel.Height - 0);
            e.Graphics.DrawLine(pen, 0, 0, panel.Width - 0, 0);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, 0, panel.Height - 1);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, panel.Width - 1, 0);
        }

        private void panel8_Paint(object sender, PaintEventArgs e)
        {
            Panel panel = (Panel)sender;
            float width = (float)4.0;
            Pen pen = new Pen(SystemColors.ControlDark, width);
            pen.DashStyle = DashStyle.Dot;
            e.Graphics.DrawLine(pen, 0, 0, 0, panel.Height - 0);
            e.Graphics.DrawLine(pen, 0, 0, panel.Width - 0, 0);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, 0, panel.Height - 1);
            e.Graphics.DrawLine(pen, panel.Width - 1, panel.Height - 1, panel.Width - 1, 0);
        }

        private void CTcmbdealername_Validated(object sender, EventArgs e)
        {
            try
            {
                if (dtdelare != null)
                {
                    if (CTcmbdealername.Text != null && CTcmbdealername.Text != "")
                    {
                        if (checkBox3.Checked)
                            WebAPIModelResponse.mineralNameuserfor = "S";
                        else
                            WebAPIModelResponse.mineralNameuserfor = "R";

                        if (WebAPIModelResponse.mineralNameuserfor == "S")
                        {
                            DataTable dtnew = new DataTable();
                            DataView dvData = new DataView(dtdelare);
                            dvData.RowFilter = " FirmName='" + CTcmbdealername.Text.Trim() + "'";
                            dtnew = dvData.ToTable();
                            if (dtnew.Rows.Count > 0)
                                cmbdealername = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                            if (Convert.ToInt32(cmbdealername) > 0)
                            {
                                CTGetLocationDetails(Convert.ToInt32(cmbdealername));
                                CTGetConsigneeDetails(Convert.ToInt32(cmbdealername));
                            }
                        }
                        //else
                        //{
                        //    WebAPIModelResponse.mineralNameuserfor = "R";
                        //    CTPGetConsigneeDetails(Convert.ToString(cmbdealername), WebAPIModelResponse.mineralNameuserfor);
                        //    CTGetLocationDetails(Convert.ToInt32(cmbdealername));
                        //}

                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmbdealername_Validated");
            }
        }

        private void CTcmbconsigneename_Validated(object sender, EventArgs e)
        {
            try
            {
                if (CTcmbconsigneename.Text != "Select" && CTcmbconsigneename.Text != "")
                {
                    if (dtdelare != null)
                    {
                        if (checkBox3.Checked)
                        {
                            if (CTcmbconsigneename.Text != null && CTcmbconsigneename.Text != "")
                            {
                                if (CTcmbconsigneename.Text.ToString().Contains("("))
                                {

                                    DataTable dtnew = new DataTable();
                                    DataView dvData = new DataView(dtdelare);
                                    dvData.RowFilter = " Name='" + CTcmbconsigneename.Text.Trim() + "'";
                                    dtnew = dvData.ToTable();
                                    if (dtnew.Rows.Count > 0)
                                        CTConsigneeId = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                                    if (CTcmbdealername.Text != null && CTcmbdealername.Text != "")
                                    {
                                        if (Convert.ToInt32(CTConsigneeId) > 0)
                                        {
                                            var consigneenameregst = CTcmbconsigneename.Text.ToString();
                                            if (consigneenameregst.Contains("("))
                                            {
                                                string[] consigneegst = consigneenameregst.Split('(');
                                                CTtxtconsigneegst.Text = consigneegst[1].ToString().Replace("  ", "");
                                                CTtxtconsigneegst.Text = consigneegst[1].ToString().Replace(")", "");
                                                CTcmbconsigneename.Text = CTcmbconsigneename.Text.ToString().Replace("  ", "");
                                                CTtxtconsigneegst.ReadOnly = true;
                                                CTtxtconsigneegst.ReadOnly = true;
                                            }
                                            else
                                            {
                                                CTtxtconsigneegst.Text = string.Empty;
                                                CTtxtconsigneegst.ReadOnly = true;
                                            }
                                        }
                                    }


                                    //var comboconsigneetext = cmbconsigneename.Text.ToString();
                                    CTGetConsigneeaddressDetails(CTConsigneeId);


                                }
                                else
                                {
                                    txtconsigneegst.Text = string.Empty;
                                    txtconsigneegst.ReadOnly = true;
                                    txtconsigneegst.Text = string.Empty;
                                }

                            }
                        }
                        else
                        {
                            DataTable dtnew = new DataTable();
                            DataView dvData = new DataView(dtConsigneeaddress);
                            dvData.RowFilter = " firmName='" + CTcmbconsigneename.Text.Trim() + "'";
                            dtnew = dvData.ToTable();
                            if (dtnew.Rows.Count > 0)
                                if (dtnew.Rows.Count == 1)
                                {
                                    CTcmbconsigneeaddress.DataSource = dtnew;
                                    CTcmbconsigneeaddress.DisplayMember = "stockLocName";
                                    CTcmbconsigneeaddress.ValueMember = "stockLocid";
                                    CTGetMineralDetails(Convert.ToInt32(dtnew.Rows[0]["stockLocid"]));
                                }
                                else
                                {
                                    DataRow row = dtnew.NewRow();
                                    row["stockLocName"] = "Select";
                                    row["stockLocid"] = "0";
                                    dtnew.Rows.InsertAt(row, 0);
                                    CTcmbconsigneeaddress.DataSource = dtnew;
                                    CTcmbconsigneeaddress.DisplayMember = "stockLocName";
                                    CTcmbconsigneeaddress.ValueMember = "stockLocid";
                                }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmbconsigneename_Validated");

            }
        }



        #region Print Checkbox 
        private void Chkconfirmdmg_CheckedChanged(object sender, EventArgs e)
        {
            if (Chkconfirmdmg.Checked == true)
            {
                chkconfirmprint.Checked = false;
                Chkconfirmdmg.Checked = true;
            }
            else
            {
                chkconfirmprint.Checked = true;
                Chkconfirmdmg.Checked = false;
            }
        }

        private void chkconfirmprint_CheckedChanged(object sender, EventArgs e)
        {
            if (chkconfirmprint.Checked == true)
            {
                Chkconfirmdmg.Checked = false;
                chkconfirmprint.Checked = true;
            }
            else
            {
                chkconfirmprint.Checked = false;
                Chkconfirmdmg.Checked = true;
            }
        }

        private void chkdmgunconfirmprint_CheckedChanged(object sender, EventArgs e)
        {
            if (chkdmgunconfirmprint.Checked == true)
            {
                chkunconfirmprint.Checked = false;
                chkdmgunconfirmprint.Checked = true;
            }
            else
            {
                chkunconfirmprint.Checked = true;
                chkdmgunconfirmprint.Checked = false;
            }
        }

        private void chkunconfirmprint_CheckedChanged(object sender, EventArgs e)
        {
            if (chkunconfirmprint.Checked == true)
            {
                chkdmgunconfirmprint.Checked = false;
                chkunconfirmprint.Checked = true;
            }
            else
            {
                chkunconfirmprint.Checked = false;
                chkdmgunconfirmprint.Checked = true;
            }
        }

        private void chkdmgtpass_CheckedChanged(object sender, EventArgs e)
        {
            if (chkdmgtpass.Checked == true)
            {
                chkprinttpass.Checked = false;
                chkdmgtpass.Checked = true;
            }
            else
            {
                chkprinttpass.Checked = true;
                chkdmgtpass.Checked = false;
            }
        }

        private void chkprinttpass_CheckedChanged(object sender, EventArgs e)
        {
            if (chkprinttpass.Checked == true)
            {
                chkdmgtpass.Checked = false;
                chkprinttpass.Checked = true;
            }
            else
            {
                chkprinttpass.Checked = false;
                chkdmgtpass.Checked = true;
            }
        }

        private void chkprintuntpass_CheckedChanged(object sender, EventArgs e)
        {
            if (chkprintuntpass.Checked == true)
            {
                chkdmguntpass.Checked = false;
                chkprintuntpass.Checked = true;
            }
            else
            {
                chkprintuntpass.Checked = false;
                chkdmguntpass.Checked = true;
            }
        }

        private void chkdmguntpass_CheckedChanged(object sender, EventArgs e)
        {
            if (chkdmguntpass.Checked == true)
            {
                chkprintuntpass.Checked = false;
                chkdmguntpass.Checked = true;
            }
            else
            {
                chkprintuntpass.Checked = true;
                chkdmguntpass.Checked = false;
            }
        }
        #endregion

        #region Vehicle details
        private async void CTtxtVehicle_Validated(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            if (CTtxtVehicle.Text != "")
            {
                var txtvehiclelg = CTtxtVehicle.Text.Length;
                var checklocallivelength = CTtxtVehicle.Text.Length;
                if (minesmart.Helper.HttpServiceUrl.localURL == "http://103.203.138.51/services/v1.4/")
                    checklocallivelength = 6;
                else
                    checklocallivelength = 10;
                if (checklocallivelength <= txtvehiclelg)
                {
                    //Call APi
                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    datacollection.Add("vehicleNo", Convert.ToString(CTtxtVehicle.Text.ToString().ToUpper().Trim().Replace(" ", "")));
                    var result = string.Empty;
                    try
                    {
                        if (WebAPIModelResponse.Authtoken.ToString() != "")
                        {
                            dt = await minesmart.Helper.Cls_PostMines.getvehicleDetailTP(minesmart.Helper.HttpServiceUrl.TrasitlocalURL, SSL_VehicleInfo, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                            if (dt != null && dt.Rows.Count > 0)
                            {
                                // var resultvehicle = DataTableToJSONWithStringBuilder(dt);
                                CTtxtdrivername.Text = dt.Rows[0]["lastDriverName"].ToString();
                                CTtxtmobileno.Text = dt.Rows[0]["lastDriverMobileNo"].ToString();
                                CTtxttareweight.Text = dt.Rows[0]["tareWeight"].ToString();
                                CTtxtVehicle.Text = dt.Rows[0]["vehicleNo"].ToString();
                                //CTtxtnetweight.Text = string.Format("{0:0.000}", Convert.ToDouble(CTtxtgrossweight.Text.Trim()) - Convert.ToDouble(CTtxttareweight.Text.Trim()));
                                var NetWet = string.Format("{0:0.000}", Convert.ToDouble(Convert.ToDouble(CTtxtgrossweight.Text.ToString())) - Convert.ToDouble(CTtxttareweight.Text.Trim()));
                                if (NetWet.Contains("-"))
                                    CTtxtnetweight.Text = "0.00";
                                else
                                    CTtxtnetweight.Text = NetWet;

                                CTtxtnetweight.ReadOnly = true;
                                this.CTbtnSave.Text = "SAVE";
                                Cursor.Current = Cursors.Default;
                                CTtxttareweight.ReadOnly = true;
                                //txtVehicle.ReadOnly = true;
                                //"IsAvailable";
                                //MessageBox.Show(resultvehicle.ToString());
                            }
                            else
                            {
                                CTtxtVehicle.Text = string.Empty;
                                CTtxtmobileno.Text = string.Empty;
                                CTtxttareweight.Text = string.Empty;
                                CTtxtdrivername.Text = string.Empty;
                                MessageBox.Show("Invalid Vehicle Number No Record Found");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        CTtxtVehicle.Text = string.Empty;
                        CTtxtmobileno.Text = string.Empty;
                        CTtxttareweight.Text = string.Empty;
                        CTtxtdrivername.Text = string.Empty;
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message);

                    }
                }
                else
                {
                    CTtxtVehicle.Text = string.Empty;
                    CTtxtmobileno.Text = string.Empty;
                    CTtxttareweight.Text = string.Empty;
                    CTtxtdrivername.Text = string.Empty;
                    MessageBox.Show("Please Enter Valid Vehicle Number like RJ14TA00000");
                }
            }
            else
            {
                CTtxtVehicle.Text = string.Empty;
                CTtxtmobileno.Text = string.Empty;
                CTtxttareweight.Text = string.Empty;
                CTtxtdrivername.Text = string.Empty;
                MessageBox.Show("Please Enter Valid Vehicle Number.");
            }
        }

        private async void txtVehicle_Validated(object sender, EventArgs e)
        {
            DataTable dt = new DataTable();
            if (txtVehicle.Text != "")
            {

                var txtvehiclelg = txtVehicle.Text.Length;
                var checklocallivelength = txtVehicle.Text.Length;
                if (minesmart.Helper.HttpServiceUrl.localURL == "http://103.203.138.51/services/v1.4/")
                    checklocallivelength = 6;
                else
                    checklocallivelength = 10;
                if (checklocallivelength <= txtvehiclelg)
                {
                    //Call APi
                    Dictionary<string, string> datacollection = new Dictionary<string, string>(3);
                    datacollection.Add("ssoId", Convert.ToString(WebAPIModelResponse.SsoId));
                    datacollection.Add("password", Convert.ToString(WebAPIModelResponse.Password));
                    datacollection.Add("vehicleNo", Convert.ToString(txtVehicle.Text.ToString().ToUpper().Trim().Replace(" ", "")));
                    var result = string.Empty;
                    try
                    {
                        if (WebAPIModelResponse.Authtoken.ToString() != "")
                        {
                            dt = await minesmart.Helper.Cls_PostMines.getvehicleDetail(minesmart.Helper.HttpServiceUrl.localURL, SSL_VehicleInfo, datacollection, Convert.ToString(WebAPIModelResponse.Accesskey), Convert.ToString(WebAPIModelResponse.Weightbridgeno));
                            if (dt != null && dt.Rows.Count > 0)
                            {

                                // var resultvehicle = DataTableToJSONWithStringBuilder(dt);
                                txtdrivername.Text = dt.Rows[0]["lastDriverName"].ToString();
                                txtmobileno.Text = dt.Rows[0]["lastDriverMobileNo"].ToString();
                                txttareweight.Text = dt.Rows[0]["tareWeight"].ToString();
                                txtVehicle.Text = dt.Rows[0]["vehicleNo"].ToString();
                                txttareweight.ReadOnly = true;
                                var NetWet = string.Format("{0:0.000}", Convert.ToDouble(Convert.ToDouble(txtgrossweight.Text.ToString())) - Convert.ToDouble(txttareweight.Text.Trim()));
                                if (NetWet.Contains("-"))
                                    txtnetweight.Text = "0.00";
                                else
                                    txtnetweight.Text = NetWet;
                                txtnetweight.ReadOnly = true;
                                this.btnSave.Text = "GENERATE";
                                Cursor.Current = Cursors.Default;
                                //"IsAvailable";
                                //MessageBox.Show(resultvehicle.ToString());
                            }
                            else
                            {
                                txtdrivername.Text = string.Empty;
                                txtmobileno.Text = string.Empty;
                                txttareweight.Text = string.Empty;
                                txtVehicle.Text = string.Empty;
                                MessageBox.Show("Blank/Invalid Vehicle Number");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        ErrorModel errormdl = new ErrorModel();
                        if (ex.Message.ToString().Contains("Status"))
                        {
                            var parsed = JObject.Parse(ex.Message.ToString());
                            errormdl.DateLog = DateTime.Now.ToString();
                            //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                            errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        else
                        {
                            errormdl.DateLog = DateTime.Now.ToString();
                            errormdl.Exp = ex;
                            errormdl.Message = ex.Message;
                            minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                        }
                        MessageBox.Show(ex.Message);

                    }
                }
                else
                {
                    MessageBox.Show("Please Enter Valid Vehicle Number like RJ14TA00000");
                }
            }
            else
            {
                MessageBox.Show("Please Enter Valid Vehicle Number");

            }
        }

        private void txtVehicleNows_Validated(object sender, EventArgs e)
        {
            try
            {
                DataTable dtvehi = new DataTable();
                if (txtVehicleNows.Text != "")
                {
                    var txtvehiclelg = txtVehicleNows.Text.Length;
                    var checklocallivelength = txtVehicleNows.Text.Length;
                    if (minesmart.Helper.HttpServiceUrl.localURL == "http://103.203.138.51/services/v1.4/")
                        checklocallivelength = 6;
                    else
                        checklocallivelength = 10;
                    if (checklocallivelength <= txtvehiclelg)
                    {
                        var response = string.Empty;
                        _settingModal.SsoId = Convert.ToString(WebAPIModelResponse.SsoId);
                        _settingModal.UserId = Convert.ToInt64(WebAPIModelResponse.Userid);
                        _settingModal.CompanyId = Convert.ToInt64(WebAPIModelResponse.CompanyId);
                        _settingModal.ClientId = Convert.ToInt64(WebAPIModelResponse.ClientId);
                        _settingModal.weightbridgeNo = Convert.ToString(WebAPIModelResponse.Weightbridgeno);
                        _settingModal.VehicleNo = Convert.ToString(txtVehicleNows.Text);
                        _settingModal.PostUrl = "/Api/ErawaanaAPI/GetLastVechicledtl/";
                        dtvehi = WebAPI.PostGetLastVechicledtl(_settingModal.PostUrl, _settingModal).Result;
                        if (dtvehi.Rows.Count > 0)
                        {
                            txtdrivernamws.Text = dtvehi.Rows[0]["DriverName"].ToString();
                            txtdrivemobilenows.Text = dtvehi.Rows[0]["DriverMobileNo"].ToString();
                            txtwghttareweight.Text = dtvehi.Rows[0]["TareWeight"].ToString();
                            if (txtwghttareweight.Text != "" && txtwghttareweight.Text != null)
                            {
                                var wgnet = string.Format("{0:0.000}", (Convert.ToDouble(txtwghtgross.Text == "" ? "0" : txtwghtgross.Text) - Convert.ToDouble(txtwghttareweight.Text == "" ? "0" : txtwghttareweight.Text)));
                                if (wgnet.Contains("-"))
                                    txtwghtnetweight.Text = "0.00";
                                else
                                    txtwghtnetweight.Text = wgnet;
                                //txtwghtnetweight.ReadOnly = true;
                            }
                        }

                    }
                    else
                    {
                        MessageBox.Show("Invalid Vehicle Number");
                    }
                }
                else
                {
                    MessageBox.Show("Please Enter Valid Vehicle Number");

                }


            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message);

            }
        }

        #endregion

        private void cmbmineralws_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (Convert.ToString(cmbmineralws.Text) == "+")
            {
                using (Product lg = new Product())
                {
                    lg.ShowDialog();
                    BindProductItem();
                }
            }
        }

        private void MineMart_FormClosed(object sender, FormClosedEventArgs e)
        {
            System.Windows.Forms.Application.Exit();
            System.Windows.Forms.Application.ExitThread();
        }

        #region ClearAllDatat
        private async void ClearAllData()
        {
            GetOnlineBlankResul();
            cmbmlno.Text = string.Empty;
            cmbconsigneeaddress.SelectedIndex = cmbconsigneeaddress.FindString("Select");
            cmbmlno.ResetText();
            cmbmlno.AutoCompleteCustomSource.Clear();
            cmbconsigneename.Text = string.Empty;
            cmbconsigneename.ResetText();
            cmbconsigneename.AutoCompleteCustomSource.Clear();
            cmbconsigneeaddress.Text = string.Empty;
            cmbconsigneeaddress.ResetText();
            cmbconsigneeaddress.AutoCompleteCustomSource.Clear();
            txtapproxtime.Text = string.Empty;
            txtconsigneegst.Text = string.Empty;
            txtdrivername.Text = string.Empty;
            txtgrossweight.Text = "0";
            txtmobileno.Text = string.Empty;
            txtnetweight.Text = "0";
            //txtorderno.Text = string.Empty;
            txtremark.Text = string.Empty;
            txtroyaltyschrate.Text = string.Empty;
            txttareweight.Text = string.Empty;
            //txttonnes.Text = string.Empty;
            txtVehicle.Text = string.Empty;

            this.btnSave.Enabled = true;
            BindLeaseListCombo();

        }
        private async void ClearAllDataMLNo()
        {
            txtapproxtime.Text = string.Empty;
            txtapproxtime.Text = string.Empty;
            txtconsigneegst.Text = string.Empty;
            txtdrivername.Text = string.Empty;
            txtgrossweight.Text = "0";
            txtmobileno.Text = string.Empty;
            txtnetweight.Text = "0";
            //txtorderno.Text = string.Empty;
            txtremark.Text = string.Empty;
            txtroyaltyschrate.Text = string.Empty;
            txttareweight.Text = string.Empty;
            //txttonnes.Text = string.Empty;
            txtVehicle.Text = string.Empty;
            cmbconsigneeaddress.Text = string.Empty;
            cmbconsigneename.Text = string.Empty;
            cmbconsigneeaddress.SelectedIndex = cmbconsigneeaddress.FindString("Select");
            cmbmineral.SelectedIndex = cmbmineral.FindString("Select");

            this.btnSave.Enabled = true;
            Cursor.Current = Cursors.Default;
            //UserInitializationForSerialPort();

        }

        private async void ClearUnconfirmRawannadata()
        {
            txteRawannaNo.Text = string.Empty;
            txtsearch.Text = string.Empty;
            txtcombroyalityschedule.Text = string.Empty;
            txtcmbmineral.Text = string.Empty;
            cmbconsigneename.Text = string.Empty;
            txtrawannadate.Text = string.Empty;
            //txtapproxRoyalty.Text = string.Empty;
            txtroyaltyschrate.Text = string.Empty;
            // txtcapcity.Text = string.Empty;
            txttansporttype.Text = string.Empty;
            txtstatus.Text = string.Empty;
            txtapproxtime.Text = string.Empty;
            txtapproxtime.Text = string.Empty;
            txtconsigneegst.Text = string.Empty;
            txtdrivername.Text = string.Empty;
            txtgrossweight.Text = "0";
            txtnetweight.Text = "0";
            txttareweight.Text = "0";
            txtcmbconsigneename.Text = string.Empty;
            txtundrivername.Text = string.Empty;
            txtunapproxtime.Text = string.Empty;
            txtuntareweight.Text = string.Empty;
            txtunnetweight.Text = string.Empty;
            txtdrivemobile.Text = string.Empty;
            txttansporttype.Text = string.Empty;
            txtremarks.Text = string.Empty;
            txtroyaltyschrate.Text = string.Empty;
            txtvechilenumber.Text = string.Empty;
            cmbconsigneeaddress.Text = string.Empty;
            cmbconsigneename.Text = string.Empty;
            cmbconsigneeaddress.SelectedIndex = cmbconsigneeaddress.FindString("Select");
            cmbmineral.SelectedIndex = cmbmineral.FindString("Select");
            cmbmlno.Text = string.Empty;
            // txtvehicleweight.Text = string.Empty;
            //txtapproxRoyalty.Text = string.Empty;

            this.btnunconfirmrawanna.Enabled = true;
            // txtlocation.Text = string.Empty;

            this.btnsearch.Enabled = true;
            //UserInitializationForSerialPort();


        }
        public void ClearRecordInvoice()
        {
            BindInvoicenumber();
            //txtbuyer.Text = string.Empty;
            // txtconsigneegst.Text = string.Empty;
            txtdespatchthrough.Text = string.Empty;
            txtdestination.Text = string.Empty;
            txterawannanumber.Text = string.Empty;
            txtgistnumber.Text = string.Empty;
            txtvehiclenumber.Text = string.Empty;
            cmbgstslab.SelectedIndex = 0;
            cmbconsigneeinov.SelectedIndex = 0;
            dataGridView1.Rows.Clear();
            lblsubtotalamt.Text = "0.000";
            lblsgst.Text = "0.000";
            lblcgst.Text = "0.000";
            lbligstamt.Text = "0.000";
            lblfinaltotal.Text = "0.000";
            lblsgsttax.Text = "SGST 0%";
            lblcgsttax.Text = "CGST 0%";

            Cursor.Current = Cursors.Default;
            this.btnSave.Enabled = true;
        }
        public void ClearAllDataWeightSlip()
        {

            txtticketnumber.Text = string.Empty;
            txtVehicleNows.Text = string.Empty;
            cmbmineralws.SelectedIndex = 0;
            txtdrivernamws.Text = string.Empty;
            txtdrivemobilenows.Text = string.Empty;
            txtwghttareweight.Text = string.Empty;
            txtwghtgross.Text = string.Empty;
            txtwghtnetweight.Text = string.Empty;
            txtremarkweightslip.Text = string.Empty;
            chkissaved.Checked = false;
            LoadTicketNumber();
            Bindweightslip();
            this.btnSaveWeightSlip.Text = "PRINT";
            this.btnSaveWeightSlip.Enabled = true;

        }
        public void CTClearAllData()
        {
            CTtxtapproxtime.Text = string.Empty;
            CTtxtconsigneegst.Text = string.Empty;
            CTtxtdrivername.Text = string.Empty;
            CTtxtgrossweight.Text = "0";
            CTtxtmobileno.Text = string.Empty;
            CTtxtnetweight.Text = string.Empty;
            CTtxtremark.Text = string.Empty;
            CTtxttareweight.Text = string.Empty;
            //CTtxttonnes.Text = string.Empty;
            CTtxtVehicle.Text = string.Empty;
            //txtaddessconsignee.Text = string.Empty;
            CTcmbdealername.ResetText();
            CTcmbdealername.AutoCompleteCustomSource.Clear();

            CTcmbconsigneename.ResetText();
            CTcmbconsigneename.AutoCompleteCustomSource.Clear();

            CTcmblocation.ResetText();
            CTcmblocation.AutoCompleteCustomSource.Clear();

            CTcmbmineral.ResetText();
            CTcmbmineral.AutoCompleteCustomSource.Clear();

            CTcmbconsigneeaddress.ResetText();
            CTcmbconsigneeaddress.AutoCompleteCustomSource.Clear();


            this.CTbtnSave.Enabled = true;
            CTBindDealerDetail();
        }

        private async void UCTClearAllData()
        {
            UCTtxtsearch.Text = string.Empty;
            UCTcmbdealername.Text = string.Empty;
            UCTtxteRawannaNo.Text = string.Empty;
            UCTtxtrawannadate.Text = string.Empty;
            UCTtxtstatus1.Text = string.Empty;
            UCTcmbmineral.Text = string.Empty;
            UCTcmbmineraluserfor.Text = string.Empty;
            UCTtxtLocation.Text = string.Empty;
            UCTtxtapproxRoyalty.Text = string.Empty;
            UCTtxttransactiontype.Text = string.Empty;
            UCTcmbconsigneename.Text = string.Empty;
            UCTcmbconsigneeaddress.Text = string.Empty;
            UCTtxtconsigneegst.Text = string.Empty;
            // UCTtxtapproxweight.Text = string.Empty;
            UCTtxtapproxtime.Text = string.Empty;
            UCTtxtvechilenumber.Text = string.Empty;
            UCTtxtdrivername.Text = string.Empty;
            UCTtxtdrivemobile.Text = string.Empty;
            // UCTtxtcapcity.Text = string.Empty;
            UCTtxttransactiontype.Text = string.Empty;
            //  UCTtxtvehicleweight.Text = string.Empty;
            UCTtxttareweight.Text = string.Empty;
            UCTtxtgrossweight.Text = string.Empty;
            UCTtxtnetweight.Text = string.Empty;
            UCTtxtremark.Text = string.Empty;

            this.button2.Enabled = true;

            this.UCTbtnsearch.Enabled = true;
        }
        #endregion

        private void cmbmlno_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.KeyChar = e.KeyChar.ToString().ToUpper()[0];
        }

        private void cmbconsigneename_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.KeyChar = e.KeyChar.ToString().ToUpper()[0];
        }

        private void CTcmbdealername_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.KeyChar = e.KeyChar.ToString().ToUpper()[0];
        }

        private void CTcmbconsigneename_KeyPress(object sender, KeyPressEventArgs e)
        {
            e.KeyChar = e.KeyChar.ToString().ToUpper()[0];
        }

        private void CTcmbconsigneeaddress_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                if (CTcmbconsigneeaddress.Text != "System.Data.DataRowView" && CTcmbconsigneeaddress.Text != "Select" && CTcmbconsigneeaddress.Text != "")
                {
                    DataTable dtnew = new DataTable();
                    DataView dvData = new DataView(dtdelare);
                    dvData.RowFilter = "Name = '" + CTcmbconsigneeaddress.Text + "'";
                    dtnew = dvData.ToTable();
                    if (dtnew.Rows.Count == 1)
                    {
                        //CTcmbconsigneeaddress.Text = dtnew.Rows[0]["Name"].ToString();
                        CTcmbAddress = Convert.ToInt64(dtnew.Rows[0]["ID"].ToString());
                    }
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmbconsigneeaddress_SelectedIndexChanged");

            }
        }

        public void SuccessProductMsg()
        {
            //lblmsg.Visible = false;
            //lblmsg.Text = "Minerial Added Successfully";
            //lblmsg.ResetText();

        }

        private void CTcmbconsigneename_TextChanged(object sender, EventArgs e)
        {
            if (CTcmbconsigneename.Text.Length >= 3)
            {
                if (checkBox3.Checked)
                {
                    CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                }
                else
                {
                    WebAPIModelResponse.mineralNameuserfor = "R";
                    CTPGetConsigneeDetails(Convert.ToString(cmbdealername), WebAPIModelResponse.mineralNameuserfor, CTcmbconsigneename.Text);
                    // CTGetLocationDetails(Convert.ToInt32(cmbdealername));
                    CTcmbconsigneename.AutoCompleteCustomSource = collCTcons;
                }

            }
            else
            {

            }
        }

        private void MineMart_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (uc.streamPlayerControl1.IsPlaying)
            {
                uc.streamPlayerControl1.Stop();
                //  streamPlayerControl1.Refresh();
                if (!uc.streamPlayerControl1.IsDisposed)
                    uc.streamPlayerControl1.Dispose();
            }
            if (uc.streamPlayerControl2.IsPlaying)
            {
                uc.streamPlayerControl2.Stop();
                //  streamPlayerControl1.Refresh();
                if (!uc.streamPlayerControl2.IsDisposed)
                    uc.streamPlayerControl2.Dispose();
            }
        }

        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox3.Checked)
            {
                checkBox2.Checked = false;
                checkBox3.Checked = true;
                CTGetConsigneeDetails(Convert.ToInt32(cmbdealername));
            }
            else
            {
                checkBox2.Checked = true;
                checkBox3.Checked = false;
            }
        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox2.Checked)
            {
                WebAPIModelResponse.mineralNameuserfor = "R";
                //CTPGetConsigneeDetails(Convert.ToString(cmbdealername), WebAPIModelResponse.mineralNameuserfor);
                //CTGetLocationDetails(Convert.ToInt32(cmbdealername));
                checkBox2.Checked = true;
                checkBox3.Checked = false;
            }
            else
            {
                checkBox2.Checked = false;
                checkBox3.Checked = true;
                WebAPIModelResponse.mineralNameuserfor = "S";
                CTGetConsigneeDetails(Convert.ToInt32(cmbdealername));
            }
        }

        private void cmbsystemtype_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cmbsystemtype_Validated(object sender, EventArgs e)
        {
            try
            {
                if (cmbsystemtype.Text != "System.Data.DataRowView" && cmbsystemtype.Text != "Select" && cmbsystemtype.Text != "")
                {
                    bindsystemmodelData(cmbsystemtype.SelectedValue.ToString());
                }
            }
            catch (Exception ex)
            {
                ErrorModel errormdl = new ErrorModel();
                if (ex.Message.ToString().Contains("Status"))
                {
                    var parsed = JObject.Parse(ex.Message.ToString());
                    errormdl.DateLog = DateTime.Now.ToString();
                    //errormdl.Exp = parsed.SelectToken("MessageDiscription"  .Value<string>();
                    errormdl.Message = parsed.SelectToken("MessageDiscription").Value<string>();
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                else
                {
                    errormdl.DateLog = DateTime.Now.ToString();
                    errormdl.Exp = ex;
                    errormdl.Message = ex.Message;
                    minesmart.Helper.ErrorLog.SaveErrorLogtable(errormdl);
                }
                MessageBox.Show(ex.Message, "CTcmbconsigneeaddress_SelectedIndexChanged");

            }
        }

        private void cmbsystemmodel_Validated(object sender, EventArgs e)
        {
            try
            {
                //Getsystemmodelsetting
                Dictionary<string, string> test = new Dictionary<string, string>();
                DataTable dtn = new DataTable();
                var response = string.Empty;
                _settingModal.DeviceType = cmbsystemtype.SelectedValue.ToString();
                _settingModal.DeviceMode = cmbsystemmodel.SelectedValue.ToString();
                _settingModal.PostUrl = "/Api/ErawaanaAPINew/GetWeightslipsetting/";
                dtn = WebAPI.PostWeightslipsetting(_settingModal.PostUrl, _settingModal).Result;
                if (dtn != null && dtn.Rows.Count > 0)
                {
                    if (dtn.Rows[0]["BAUDRATE"].ToString() != "0")
                    {
                        _settingModal.RatesBaud = dtn.Rows[0]["BAUDRATE"].ToString();
                        WebAPIModelResponse.baudrate = Convert.ToString(_settingModal.RatesBaud);
                    }
                    else
                    {
                        _settingModal.RatesBaud = dtn.Rows[0]["BAUDRATE"].ToString();
                    }
                    if (dtn.Rows[0]["DATABITS"].ToString() != "0")
                    {
                        _settingModal.DataBits = dtn.Rows[0]["DATABITS"].ToString();
                        WebAPIModelResponse.DataBits = Convert.ToString(_settingModal.DataBits);
                    }
                    else
                    {
                        _settingModal.DataBits = dtn.Rows[0]["DATABITS"].ToString();
                    }

                    if (dtn.Rows[0]["ParityNew"].ToString() != "0")
                    {
                        _settingModal.ParityNew = dtn.Rows[0]["ParityNew"].ToString();
                        WebAPIModelResponse.Parity = Convert.ToString(_settingModal.ParityNew);
                    }
                    else
                    {
                        _settingModal.ParityNew = dtn.Rows[0]["ParityNew"].ToString();
                    }
                    if (dtn.Rows[0]["PARITY"].ToString() != "0")
                    {
                        _settingModal.Parity = dtn.Rows[0]["PARITY"].ToString();
                    }
                    else
                    {
                        _settingModal.Parity = dtn.Rows[0]["PARITY"].ToString();
                    }
                    if (dtn.Rows[0]["STOPBITS"].ToString() != "0")
                    {
                        _settingModal.StopBits = dtn.Rows[0]["STOPBITS"].ToString();
                    }
                    else
                    {
                        _settingModal.StopBits = dtn.Rows[0]["STOPBITS"].ToString();
                    }
                    if (dtn.Rows[0]["StopBitssNew"].ToString() != "0")
                    {
                        _settingModal.StopBitsNew = dtn.Rows[0]["StopBitssNew"].ToString();
                        WebAPIModelResponse.StopBits = Convert.ToString(_settingModal.StopBitsNew);
                    }
                    else
                    {
                        _settingModal.StopBitsNew = dtn.Rows[0]["StopBitssNew"].ToString();
                    }
                    if (dtn.Rows[0]["ISREVERSED"].ToString() != "0")
                    {
                        _settingModal.IsReversed = dtn.Rows[0]["ISREVERSED"].ToString();
                        WebAPIModelResponse.Isreversed = Convert.ToString(_settingModal.IsReversed);
                    }
                    else
                    {
                        _settingModal.IsReversed = dtn.Rows[0]["ISREVERSED"].ToString();
                    }
                    if (dtn.Rows[0]["READERCODE"].ToString() != "0")
                    {
                        _settingModal.ReaderCode = dtn.Rows[0]["READERCODE"].ToString();
                        WebAPIModelResponse.ReaderCode = Convert.ToString(_settingModal.ReaderCode);
                    }
                    else
                    {
                        _settingModal.ReaderCode = dtn.Rows[0]["READERCODE"].ToString();
                    }
                    if (dtn.Rows[0]["SYTEMTYPE"].ToString() != "0")
                    {
                        _settingModal.SytemType = dtn.Rows[0]["SYTEMTYPE"].ToString();
                        WebAPIModelResponse.SytemType = Convert.ToString(_settingModal.SytemType);
                    }
                    else
                    {
                        _settingModal.SytemType = dtn.Rows[0]["SYTEMTYPE"].ToString();
                    }
                    if (dtn.Rows[0]["DId"].ToString() != "0")
                    {
                        _settingModal.DeviceType = dtn.Rows[0]["DId"].ToString();
                    }
                    else
                    {
                        _settingModal.DeviceType = dtn.Rows[0]["DId"].ToString();
                    }
                    if (dtn.Rows[0]["PId"].ToString() != "0")
                    {
                        _settingModal.DeviceMode = dtn.Rows[0]["PId"].ToString();
                    }
                    else
                    {
                        _settingModal.DeviceMode = dtn.Rows[0]["PId"].ToString();
                    }

                    BindDatabitCombo();
                    BindIsReversedCombo();
                    BindStopBitsCombo();
                    BindParitysCombo();
                    BindBaudRateCombo();
                    bindsystemtypeData();
                    bindsystemtypeData();
                    bindsystemmodelData();
                    WebAPIModelResponse.CombPortName = Convert.ToString(_settingModal.PortName);


                    cmbportname.Items.Clear();
                    cmbportname.ResetText();
                    cmbportname.AutoCompleteCustomSource.Clear();
                    List<string> tList = new List<string>();
                    string[] portNames = SerialPort.GetPortNames();
                    foreach (var portName in portNames)
                    {
                        tList.Add(portName);
                    }
                    if (tList.Contains(WebAPIModelResponse.CombPortName))
                    {
                        cmbportname.Items.Add(WebAPIModelResponse.CombPortName);
                    }
                    else
                    {
                        string[] portNamesNew = SerialPort.GetPortNames();
                        foreach (var portName in portNamesNew)
                        {
                            cmbportname.Items.Add(portName);
                        }
                    }

                    if (_settingModal.StopBits == "None")
                        _settingModal.StopBits = "0";
                    else if (_settingModal.StopBits == "One")
                        _settingModal.StopBits = "1";
                    else if (_settingModal.StopBits == "Two")
                        _settingModal.StopBits = "2";
                    else
                        _settingModal.StopBits = "3";

                    if (_settingModal.RatesBaud == "None")
                        _settingModal.RatesBaud = "0";
                    else if (_settingModal.RatesBaud == "1200")
                        _settingModal.RatesBaud = "1";
                    else if (_settingModal.RatesBaud == "2400")
                        _settingModal.RatesBaud = "2";
                    else if (_settingModal.RatesBaud == "4800")
                        _settingModal.RatesBaud = "3";
                    else if (_settingModal.RatesBaud == "9600")
                        _settingModal.RatesBaud = "4";
                    else if (_settingModal.RatesBaud == "14400")
                        _settingModal.RatesBaud = "5";
                    else if (_settingModal.RatesBaud == "19200")
                        _settingModal.RatesBaud = "6";
                    else if (_settingModal.RatesBaud == "38400")
                        _settingModal.RatesBaud = "7";
                    else if (_settingModal.RatesBaud == "57600")
                        _settingModal.RatesBaud = "8";
                    else if (_settingModal.RatesBaud == "115200")
                        _settingModal.RatesBaud = "9";
                    else if (_settingModal.RatesBaud == "128000")
                        _settingModal.RatesBaud = "10";
                    else
                        _settingModal.RatesBaud = "11";

                    if (_settingModal.DataBits == "None")
                        _settingModal.DataBits = "0";
                    else if (_settingModal.DataBits == "8")
                        _settingModal.DataBits = "1";
                    else
                        _settingModal.DataBits = "2";

                    if (_settingModal.Parity == "None")
                        _settingModal.Parity = "0";
                    else if (_settingModal.Parity == "Even")
                        _settingModal.Parity = "1";
                    else if (_settingModal.Parity == "Odd")
                        _settingModal.Parity = "2";
                    else if (_settingModal.Parity == "Mark")
                        _settingModal.Parity = "3";
                    else
                        _settingModal.Parity = "4";

                    if (_settingModal.IsReversed == "0")
                        _settingModal.IsReversed = "Yes";
                    else
                        _settingModal.IsReversed = "No";

                    combbaudrate.SelectedIndex = Convert.ToInt32(_settingModal.RatesBaud);
                    cmbdatabits.SelectedIndex = Convert.ToInt32(_settingModal.DataBits);
                    cmbparity.SelectedIndex = Convert.ToInt32(_settingModal.Parity);
                    cmbstopbits.SelectedIndex = Convert.ToInt32(_settingModal.StopBits);
                    cmbisreversed.SelectedIndex = Convert.ToInt32(_settingModal.IsReversed == "No" ? 1 : 0);
                    txtreadercode.Text = Convert.ToString(_settingModal.ReaderCode);
                    txtreadercode.Text = _settingModal.ReaderCode;
                    txtsystemtype.Text = _settingModal.SytemType;
                    cmbportname.Text = _settingModal.PortName;
                    //cmbsystemtype.Text = _settingModal.DeviceType;
                    //cmbsystemmodel.Text = _settingModal.DeviceMode;
                }

            }
            catch (Exception ex)
            {

            }
        }
    }

}
